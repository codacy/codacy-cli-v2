{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
    {
      "invocations": [
        {
          "executionSuccessful": true,
          "toolExecutionNotifications": []
        }
      ],
      "results": [],
      "tool": {
        "driver": {
          "name": "Semgrep OSS",
          "rules": [
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Data is being eval'd from a `curl` command. An attacker with control of the server in the `curl` command could inject malicious code into the `eval`, resulting in a system comrpomise. Avoid eval'ing untrusted data if you can. If you must do this, consider checking the SHA sum of the content returned by the server to verify its integrity."
              },
              "help": {
                "markdown": "Data is being eval'd from a `curl` command. An attacker with control of the server in the `curl` command could inject malicious code into the `eval`, resulting in a system comrpomise. Avoid eval'ing untrusted data if you can. If you must do this, consider checking the SHA sum of the content returned by the server to verify its integrity.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
                "text": "Data is being eval'd from a `curl` command. An attacker with control of the server in the `curl` command could inject malicious code into the `eval`, resulting in a system comrpomise. Avoid eval'ing untrusted data if you can. If you must do this, consider checking the SHA sum of the content returned by the server to verify its integrity."
              },
              "id": "codacy.tools-configs.bash.curl.security.curl-eval.curl-eval",
              "name": "codacy.tools-configs.bash.curl.security.curl-eval.curl-eval",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.bash.curl.security.curl-eval.curl-eval"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead."
              },
              "help": {
                "markdown": "Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://us-cert.cisa.gov/bsi/articles/knowledge/coding-practices/fgets-and-gets_s](https://us-cert.cisa.gov/bsi/articles/knowledge/coding-practices/fgets-and-gets_s)\n",
                "text": "Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead."
              },
              "id": "codacy.tools-configs.c.lang.security.insecure-use-gets-fn.insecure-use-gets-fn",
              "name": "codacy.tools-configs.c.lang.security.insecure-use-gets-fn.insecure-use-gets-fn",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-676: Use of Potentially Dangerous Function",
                  "MEDIUM CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.c.lang.security.insecure-use-gets-fn.insecure-use-gets-fn"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Call to 'read()' without error checking is susceptible to file descriptor exhaustion. Consider using the 'getrandom()' function."
              },
              "help": {
                "markdown": "Call to 'read()' without error checking is susceptible to file descriptor exhaustion. Consider using the 'getrandom()' function.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://lwn.net/Articles/606141/](https://lwn.net/Articles/606141/)\n",
                "text": "Call to 'read()' without error checking is susceptible to file descriptor exhaustion. Consider using the 'getrandom()' function."
              },
              "id": "codacy.tools-configs.c.lang.security.random-fd-exhaustion.random-fd-exhaustion",
              "name": "codacy.tools-configs.c.lang.security.random-fd-exhaustion.random-fd-exhaustion",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-774: Allocation of File Descriptors or Handles Without Limits or Throttling",
                  "MEDIUM CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.c.lang.security.random-fd-exhaustion.random-fd-exhaustion"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "DOCTYPE declarations are enabled for javax.xml.parsers.SAXParserFactory. Without prohibiting external entity declarations, this is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false."
              },
              "help": {
                "markdown": "DOCTYPE declarations are enabled for javax.xml.parsers.SAXParserFactory. Without prohibiting external entity declarations, this is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/clj-holmes/clj-holmes-rules/blob/main/security/xxe-clojure-xml/xxe-clojure-xml.yml)\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://xerces.apache.org/xerces2-j/features.html](https://xerces.apache.org/xerces2-j/features.html)\n",
                "text": "DOCTYPE declarations are enabled for javax.xml.parsers.SAXParserFactory. Without prohibiting external entity declarations, this is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false."
              },
              "helpUri": "https://github.com/clj-holmes/clj-holmes-rules/blob/main/security/xxe-clojure-xml/xxe-clojure-xml.yml",
              "id": "codacy.tools-configs.clojure.lang.security.documentbuilderfactory-xxe.documentbuilderfactory-xxe",
              "name": "codacy.tools-configs.clojure.lang.security.documentbuilderfactory-xxe.documentbuilderfactory-xxe",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-611: Improper Restriction of XML External Entity Reference",
                  "HIGH CONFIDENCE",
                  "OWASP-A04:2017 - XML External Entities (XXE)",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.clojure.lang.security.documentbuilderfactory-xxe.documentbuilderfactory-xxe"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "MD5 hash algorithm detected. This is not collision resistant and leads to easily-cracked password hashes. Replace with current recommended hashing algorithms."
              },
              "help": {
                "markdown": "MD5 hash algorithm detected. This is not collision resistant and leads to easily-cracked password hashes. Replace with current recommended hashing algorithms.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/clj-holmes/clj-holmes-rules/blob/main/security/weak-hash-function-md5.yml)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)\n",
                "text": "MD5 hash algorithm detected. This is not collision resistant and leads to easily-cracked password hashes. Replace with current recommended hashing algorithms."
              },
              "helpUri": "https://github.com/clj-holmes/clj-holmes-rules/blob/main/security/weak-hash-function-md5.yml",
              "id": "codacy.tools-configs.clojure.lang.security.use-of-md5.use-of-md5",
              "name": "codacy.tools-configs.clojure.lang.security.use-of-md5.use-of-md5",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-328: Use of Weak Hash",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.clojure.lang.security.use-of-md5.use-of-md5"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."
              },
              "help": {
                "markdown": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)\n",
                "text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."
              },
              "id": "codacy.tools-configs.clojure.lang.security.use-of-sha1.use-of-sha1",
              "name": "codacy.tools-configs.clojure.lang.security.use-of-sha1.use-of-sha1",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "CWE-328: Use of Weak Hash",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.clojure.lang.security.use-of-sha1.use-of-sha1"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Hardcoded passwords are a security risk. They can be easily found by attackers and used to gain unauthorized access to the system."
              },
              "help": {
                "markdown": "Hardcoded passwords are a security risk. They can be easily found by attackers and used to gain unauthorized access to the system.",
                "text": "Hardcoded passwords are a security risk. They can be easily found by attackers and used to gain unauthorized access to the system."
              },
              "id": "codacy.tools-configs.codacy.csharp.security.hard-coded-password",
              "name": "codacy.tools-configs.codacy.csharp.security.hard-coded-password",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "MEDIUM CONFIDENCE",
                  "OWASP-A3:2017 Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.codacy.csharp.security.hard-coded-password"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Empty strings can lead to unexpected behavior and should be handled carefully."
              },
              "help": {
                "markdown": "Empty strings can lead to unexpected behavior and should be handled carefully.",
                "text": "Empty strings can lead to unexpected behavior and should be handled carefully."
              },
              "id": "codacy.tools-configs.codacy.generic.plsql.empty-strings",
              "name": "codacy.tools-configs.codacy.generic.plsql.empty-strings",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "MEDIUM CONFIDENCE"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.codacy.generic.plsql.empty-strings"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Hardcoded or exposed passwords are a security risk. They can be easily found by attackers and used to gain unauthorized access to the system.\n"
              },
              "help": {
                "markdown": "Hardcoded or exposed passwords are a security risk. They can be easily found by attackers and used to gain unauthorized access to the system.\n",
                "text": "Hardcoded or exposed passwords are a security risk. They can be easily found by attackers and used to gain unauthorized access to the system.\n"
              },
              "id": "codacy.tools-configs.codacy.generic.plsql.find-all-passwords",
              "name": "codacy.tools-configs.codacy.generic.plsql.find-all-passwords",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "MEDIUM CONFIDENCE",
                  "OWASP-A3:2017 Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.codacy.generic.plsql.find-all-passwords"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Resource injection detected. This can lead to unauthorized access or manipulation of resources."
              },
              "help": {
                "markdown": "Resource injection detected. This can lead to unauthorized access or manipulation of resources.",
                "text": "Resource injection detected. This can lead to unauthorized access or manipulation of resources."
              },
              "id": "codacy.tools-configs.codacy.generic.plsql.resource-injection",
              "name": "codacy.tools-configs.codacy.generic.plsql.resource-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "MEDIUM CONFIDENCE",
                  "OWASP-A3:2017 Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.codacy.generic.plsql.resource-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "It's possible to embed malicious secret instructions to AI rules files using unicode characters that are invisible to human reviewers.This can lead to future AI-generated code that has security vulnerabilities or other weaknesses baked in which may not be noticed."
              },
              "help": {
                "markdown": "It's possible to embed malicious secret instructions to AI rules files using unicode characters that are invisible to human reviewers.This can lead to future AI-generated code that has security vulnerabilities or other weaknesses baked in which may not be noticed.",
                "text": "It's possible to embed malicious secret instructions to AI rules files using unicode characters that are invisible to human reviewers.This can lead to future AI-generated code that has security vulnerabilities or other weaknesses baked in which may not be noticed."
              },
              "id": "codacy.tools-configs.codacy.generic.security.detect-invisible-unicode",
              "name": "codacy.tools-configs.codacy.generic.security.detect-invisible-unicode",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "MEDIUM CONFIDENCE"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.codacy.generic.security.detect-invisible-unicode"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Hardcoded passwords are a security risk. They can be easily found by attackers and used to gain unauthorized access to the system."
              },
              "help": {
                "markdown": "Hardcoded passwords are a security risk. They can be easily found by attackers and used to gain unauthorized access to the system.",
                "text": "Hardcoded passwords are a security risk. They can be easily found by attackers and used to gain unauthorized access to the system."
              },
              "id": "codacy.tools-configs.codacy.java.security.hard-coded-password",
              "name": "codacy.tools-configs.codacy.java.security.hard-coded-password",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "MEDIUM CONFIDENCE",
                  "OWASP-A3:2017 Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.codacy.java.security.hard-coded-password"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Hardcoded passwords are a security risk. They can be easily found by attackers and used to gain unauthorized access to the system."
              },
              "help": {
                "markdown": "Hardcoded passwords are a security risk. They can be easily found by attackers and used to gain unauthorized access to the system.",
                "text": "Hardcoded passwords are a security risk. They can be easily found by attackers and used to gain unauthorized access to the system."
              },
              "id": "codacy.tools-configs.codacy.javascript.security.hard-coded-password",
              "name": "codacy.tools-configs.codacy.javascript.security.hard-coded-password",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "MEDIUM CONFIDENCE",
                  "OWASP-A3:2017 Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.codacy.javascript.security.hard-coded-password"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "LDAP queries are constructed dynamically on user-controlled input. This vulnerability in code could lead to an arbitrary LDAP query execution."
              },
              "help": {
                "markdown": "LDAP queries are constructed dynamically on user-controlled input. This vulnerability in code could lead to an arbitrary LDAP query execution.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A03_2021-Injection/](https://owasp.org/Top10/A03_2021-Injection/)\n - [https://cwe.mitre.org/data/definitions/90](https://cwe.mitre.org/data/definitions/90)\n - [https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html#safe-c-sharp-net-tba-example](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html#safe-c-sharp-net-tba-example)\n",
                "text": "LDAP queries are constructed dynamically on user-controlled input. This vulnerability in code could lead to an arbitrary LDAP query execution."
              },
              "id": "codacy.tools-configs.csharp.dotnet.security.audit.ldap-injection.ldap-injection",
              "name": "codacy.tools-configs.csharp.dotnet.security.audit.ldap-injection.ldap-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.csharp.dotnet.security.audit.ldap-injection.ldap-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Mass assignment or Autobinding vulnerability in code allows an attacker to execute over-posting attacks, which could create a new parameter in the binding request and manipulate the underlying object in the application."
              },
              "help": {
                "markdown": "Mass assignment or Autobinding vulnerability in code allows an attacker to execute over-posting attacks, which could create a new parameter in the binding request and manipulate the underlying object in the application.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cwe.mitre.org/data/definitions/915.html](https://cwe.mitre.org/data/definitions/915.html)\n - [https://github.com/OWASP/API-Security/blob/master/2019/en/src/0xa6-mass-assignment.md](https://github.com/OWASP/API-Security/blob/master/2019/en/src/0xa6-mass-assignment.md)\n",
                "text": "Mass assignment or Autobinding vulnerability in code allows an attacker to execute over-posting attacks, which could create a new parameter in the binding request and manipulate the underlying object in the application."
              },
              "id": "codacy.tools-configs.csharp.dotnet.security.audit.mass-assignment.mass-assignment",
              "name": "codacy.tools-configs.csharp.dotnet.security.audit.mass-assignment.mass-assignment",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A08:2021 - Software and Data Integrity Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.csharp.dotnet.security.audit.mass-assignment.mass-assignment"
              }
            },
            {
              "defaultConfiguration": {
                "level": "note"
              },
              "fullDescription": {
                "text": "Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users."
              },
              "help": {
                "markdown": "Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n - [https://cwe.mitre.org/data/definitions/862.html](https://cwe.mitre.org/data/definitions/862.html)\n - [https://docs.microsoft.com/en-us/aspnet/core/security/authorization/simple?view=aspnetcore-7.0](https://docs.microsoft.com/en-us/aspnet/core/security/authorization/simple?view=aspnetcore-7.0)\n",
                "text": "Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users."
              },
              "id": "codacy.tools-configs.csharp.dotnet.security.audit.missing-or-broken-authorization.missing-or-broken-authorization",
              "name": "codacy.tools-configs.csharp.dotnet.security.audit.missing-or-broken-authorization.missing-or-broken-authorization",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-862: Missing Authorization",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.csharp.dotnet.security.audit.missing-or-broken-authorization.missing-or-broken-authorization"
              }
            },
            {
              "defaultConfiguration": {
                "level": "note"
              },
              "fullDescription": {
                "text": "An open directory listing is potentially exposed, potentially revealing sensitive information to attackers."
              },
              "help": {
                "markdown": "An open directory listing is potentially exposed, potentially revealing sensitive information to attackers.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cwe.mitre.org/data/definitions/548.html](https://cwe.mitre.org/data/definitions/548.html)\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration/](https://owasp.org/Top10/A05_2021-Security_Misconfiguration/)\n - [https://docs.microsoft.com/en-us/aspnet/core/fundamentals/static-files?view=aspnetcore-7.0#directory-browsing](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/static-files?view=aspnetcore-7.0#directory-browsing)\n",
                "text": "An open directory listing is potentially exposed, potentially revealing sensitive information to attackers."
              },
              "id": "codacy.tools-configs.csharp.dotnet.security.audit.open-directory-listing.open-directory-listing",
              "name": "codacy.tools-configs.csharp.dotnet.security.audit.open-directory-listing.open-directory-listing",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-548: Exposure of Information Through Directory Listing",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "OWASP-A06:2017 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.csharp.dotnet.security.audit.open-directory-listing.open-directory-listing"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "XPath queries are constructed dynamically on user-controlled input. This vulnerability in code could lead to an XPath Injection exploitation."
              },
              "help": {
                "markdown": "XPath queries are constructed dynamically on user-controlled input. This vulnerability in code could lead to an XPath Injection exploitation.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A03_2021-Injection/](https://owasp.org/Top10/A03_2021-Injection/)\n - [https://cwe.mitre.org/data/definitions/643.html](https://cwe.mitre.org/data/definitions/643.html)\n",
                "text": "XPath queries are constructed dynamically on user-controlled input. This vulnerability in code could lead to an XPath Injection exploitation."
              },
              "id": "codacy.tools-configs.csharp.dotnet.security.audit.xpath-injection.xpath-injection",
              "name": "codacy.tools-configs.csharp.dotnet.security.audit.xpath-injection.xpath-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.csharp.dotnet.security.audit.xpath-injection.xpath-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "User-controllable string passed to Razor.Parse. This leads directly to code execution in the context of the process."
              },
              "help": {
                "markdown": "User-controllable string passed to Razor.Parse. This leads directly to code execution in the context of the process.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://clement.notin.org/blog/2020/04/15/Server-Side-Template-Injection-(SSTI)-in-ASP.NET-Razor/](https://clement.notin.org/blog/2020/04/15/Server-Side-Template-Injection-(SSTI)-in-ASP.NET-Razor/)\n",
                "text": "User-controllable string passed to Razor.Parse. This leads directly to code execution in the context of the process."
              },
              "id": "codacy.tools-configs.csharp.dotnet.security.razor-template-injection.razor-template-injection",
              "name": "codacy.tools-configs.csharp.dotnet.security.razor-template-injection.razor-template-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-94: Improper Control of Generation of Code ('Code Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.csharp.dotnet.security.razor-template-injection.razor-template-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Usage of deprecated cipher algorithm detected. Use Aes or ChaCha20Poly1305 instead."
              },
              "help": {
                "markdown": "Usage of deprecated cipher algorithm detected. Use Aes or ChaCha20Poly1305 instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.des?view=net-6.0#remarks](https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.des?view=net-6.0#remarks)\n - [https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.rc2?view=net-6.0#remarks](https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.rc2?view=net-6.0#remarks)\n - [https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.aes?view=net-6.0](https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.aes?view=net-6.0)\n - [https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.chacha20poly1305?view=net-6.0](https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.chacha20poly1305?view=net-6.0)\n",
                "text": "Usage of deprecated cipher algorithm detected. Use Aes or ChaCha20Poly1305 instead."
              },
              "id": "codacy.tools-configs.csharp.dotnet.security.use_deprecated_cipher_algorithm.use_deprecated_cipher_algorithm",
              "name": "codacy.tools-configs.csharp.dotnet.security.use_deprecated_cipher_algorithm.use_deprecated_cipher_algorithm",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.csharp.dotnet.security.use_deprecated_cipher_algorithm.use_deprecated_cipher_algorithm"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Usage of the insecure ECB mode detected. You should use an authenticated encryption mode instead, which is implemented by the classes AesGcm or ChaCha20Poly1305."
              },
              "help": {
                "markdown": "Usage of the insecure ECB mode detected. You should use an authenticated encryption mode instead, which is implemented by the classes AesGcm or ChaCha20Poly1305.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.chacha20poly1305?view=net-6.0](https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.chacha20poly1305?view=net-6.0)\n - [https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.aesgcm?view=net-6.0](https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.aesgcm?view=net-6.0)\n - [https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.ciphermode?view=net-6.0](https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.ciphermode?view=net-6.0)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#cipher-modes](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#cipher-modes)\n",
                "text": "Usage of the insecure ECB mode detected. You should use an authenticated encryption mode instead, which is implemented by the classes AesGcm or ChaCha20Poly1305."
              },
              "id": "codacy.tools-configs.csharp.dotnet.security.use_ecb_mode.use_ecb_mode",
              "name": "codacy.tools-configs.csharp.dotnet.security.use_ecb_mode.use_ecb_mode",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.csharp.dotnet.security.use_ecb_mode.use_ecb_mode"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "You are using an insecure random number generator (RNG) to create a cryptographic key. System.Random must never be used for cryptographic purposes. Use System.Security.Cryptography.RandomNumberGenerator instead."
              },
              "help": {
                "markdown": "You are using an insecure random number generator (RNG) to create a cryptographic key. System.Random must never be used for cryptographic purposes. Use System.Security.Cryptography.RandomNumberGenerator instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://learn.microsoft.com/en-us/dotnet/api/system.random?view=net-6.0#remarks](https://learn.microsoft.com/en-us/dotnet/api/system.random?view=net-6.0#remarks)\n - [https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.randomnumbergenerator?view=net-6.0](https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.randomnumbergenerator?view=net-6.0)\n - [https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.aesgcm?view=net-6.0#constructors](https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.aesgcm?view=net-6.0#constructors)\n - [https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.symmetricalgorithm.key?view=net-6.0#system-security-cryptography-symmetricalgorithm-key](https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.symmetricalgorithm.key?view=net-6.0#system-security-cryptography-symmetricalgorithm-key)\n",
                "text": "You are using an insecure random number generator (RNG) to create a cryptographic key. System.Random must never be used for cryptographic purposes. Use System.Security.Cryptography.RandomNumberGenerator instead."
              },
              "id": "codacy.tools-configs.csharp.dotnet.security.use_weak_rng_for_keygeneration.use_weak_rng_for_keygeneration",
              "name": "codacy.tools-configs.csharp.dotnet.security.use_weak_rng_for_keygeneration.use_weak_rng_for_keygeneration",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.csharp.dotnet.security.use_weak_rng_for_keygeneration.use_weak_rng_for_keygeneration"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "You are using the outdated PKCS#1 v1.5 encryption padding for your RSA key. Use the OAEP padding instead."
              },
              "help": {
                "markdown": "You are using the outdated PKCS#1 v1.5 encryption padding for your RSA key. Use the OAEP padding instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.rsapkcs1keyexchangeformatter](https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.rsapkcs1keyexchangeformatter)\n - [https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.rsaoaepkeyexchangeformatter](https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.rsaoaepkeyexchangeformatter)\n - [https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.rsapkcs1keyexchangedeformatter](https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.rsapkcs1keyexchangedeformatter)\n - [https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.rsaoaepkeyexchangedeformatter](https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.rsaoaepkeyexchangedeformatter)\n",
                "text": "You are using the outdated PKCS#1 v1.5 encryption padding for your RSA key. Use the OAEP padding instead."
              },
              "id": "codacy.tools-configs.csharp.dotnet.security.use_weak_rsa_encryption_padding.use_weak_rsa_encryption_padding",
              "name": "codacy.tools-configs.csharp.dotnet.security.use_weak_rsa_encryption_padding.use_weak_rsa_encryption_padding",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-780: Use of RSA Algorithm without OAEP",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.csharp.dotnet.security.use_weak_rsa_encryption_padding.use_weak_rsa_encryption_padding"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Double.Epsilon is defined by .NET as the smallest value that can be added to or subtracted from a zero-value Double. It is unsuitable for equality comparisons of non-zero Double values. Furthermore, the value of Double.Epsilon is framework and processor architecture dependent. Wherever possible, developers should prefer the framework Equals() method over custom equality implementations."
              },
              "help": {
                "markdown": "Double.Epsilon is defined by .NET as the smallest value that can be added to or subtracted from a zero-value Double. It is unsuitable for equality comparisons of non-zero Double values. Furthermore, the value of Double.Epsilon is framework and processor architecture dependent. Wherever possible, developers should prefer the framework Equals() method over custom equality implementations.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.microsoft.com/en-us/dotnet/api/system.double?view=net-6.0#testing-for-equality](https://docs.microsoft.com/en-us/dotnet/api/system.double?view=net-6.0#testing-for-equality)\n - [https://docs.microsoft.com/en-us/dotnet/api/system.double.epsilon?view=net-6.0#platform-notes](https://docs.microsoft.com/en-us/dotnet/api/system.double.epsilon?view=net-6.0#platform-notes)\n",
                "text": "Double.Epsilon is defined by .NET as the smallest value that can be added to or subtracted from a zero-value Double. It is unsuitable for equality comparisons of non-zero Double values. Furthermore, the value of Double.Epsilon is framework and processor architecture dependent. Wherever possible, developers should prefer the framework Equals() method over custom equality implementations."
              },
              "id": "codacy.tools-configs.csharp.lang.correctness.double.double-epsilon-equality.correctness-double-epsilon-equality",
              "name": "codacy.tools-configs.csharp.lang.correctness.double.double-epsilon-equality.correctness-double-epsilon-equality",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "MEDIUM CONFIDENCE"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.csharp.lang.correctness.double.double-epsilon-equality.correctness-double-epsilon-equality"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Potential inter-process write of RegionInfo $RI via $PIPESTREAM $P that was instantiated with a two-character culture code $REGION.  Per .NET documentation, if you want to persist a RegionInfo object or communicate it between processes, you should instantiate it by using a full culture name rather than a two-letter ISO region code."
              },
              "help": {
                "markdown": "Potential inter-process write of RegionInfo $RI via $PIPESTREAM $P that was instantiated with a two-character culture code $REGION.  Per .NET documentation, if you want to persist a RegionInfo object or communicate it between processes, you should instantiate it by using a full culture name rather than a two-letter ISO region code.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.microsoft.com/en-us/dotnet/api/system.globalization.regioninfo.twoletterisoregionname?view=net-6.0#remarks](https://docs.microsoft.com/en-us/dotnet/api/system.globalization.regioninfo.twoletterisoregionname?view=net-6.0#remarks)\n",
                "text": "Potential inter-process write of RegionInfo $RI via $PIPESTREAM $P that was instantiated with a two-character culture code $REGION.  Per .NET documentation, if you want to persist a RegionInfo object or communicate it between processes, you should instantiate it by using a full culture name rather than a two-letter ISO region code."
              },
              "id": "codacy.tools-configs.csharp.lang.correctness.regioninfo.regioninfo-interop.correctness-regioninfo-interop",
              "name": "codacy.tools-configs.csharp.lang.correctness.regioninfo.regioninfo-interop.correctness-regioninfo-interop",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "MEDIUM CONFIDENCE"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.csharp.lang.correctness.regioninfo.regioninfo-interop.correctness-regioninfo-interop"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Sending the trusted CA list increases the size of the handshake request and can leak system configuration information."
              },
              "help": {
                "markdown": "Sending the trusted CA list increases the size of the handshake request and can leak system configuration information.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.microsoft.com/en-us/dotnet/api/system.net.security.sslcertificatetrust.createforx509collection?view=net-6.0#remarks](https://docs.microsoft.com/en-us/dotnet/api/system.net.security.sslcertificatetrust.createforx509collection?view=net-6.0#remarks)\n - [https://docs.microsoft.com/en-us/dotnet/api/system.net.security.sslcertificatetrust.createforx509store?view=net-6.0#remarks](https://docs.microsoft.com/en-us/dotnet/api/system.net.security.sslcertificatetrust.createforx509store?view=net-6.0#remarks)\n",
                "text": "Sending the trusted CA list increases the size of the handshake request and can leak system configuration information."
              },
              "id": "codacy.tools-configs.csharp.lang.correctness.sslcertificatetrust.sslcertificatetrust-handshake-no-trust.correctness-sslcertificatetrust-handshake-no-trust",
              "name": "codacy.tools-configs.csharp.lang.correctness.sslcertificatetrust.sslcertificatetrust-handshake-no-trust.correctness-sslcertificatetrust-handshake-no-trust",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor",
                  "HIGH CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.csharp.lang.correctness.sslcertificatetrust.sslcertificatetrust-handshake-no-trust.correctness-sslcertificatetrust-handshake-no-trust"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The TokenValidationParameters.$LIFETIME is set to $FALSE, this means the JWT tokens lifetime is not validated. This can lead to an JWT token being used after it has expired, which has security implications. It is recommended to validate the JWT lifetime to ensure only valid tokens are used."
              },
              "help": {
                "markdown": "The TokenValidationParameters.$LIFETIME is set to $FALSE, this means the JWT tokens lifetime is not validated. This can lead to an JWT token being used after it has expired, which has security implications. It is recommended to validate the JWT lifetime to ensure only valid tokens are used.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/)\n - [https://cwe.mitre.org/data/definitions/613.html](https://cwe.mitre.org/data/definitions/613.html)\n - [https://docs.microsoft.com/en-us/dotnet/api/microsoft.identitymodel.tokens.tokenvalidationparameters?view=azure-dotnet](https://docs.microsoft.com/en-us/dotnet/api/microsoft.identitymodel.tokens.tokenvalidationparameters?view=azure-dotnet)\n",
                "text": "The TokenValidationParameters.$LIFETIME is set to $FALSE, this means the JWT tokens lifetime is not validated. This can lead to an JWT token being used after it has expired, which has security implications. It is recommended to validate the JWT lifetime to ensure only valid tokens are used."
              },
              "id": "codacy.tools-configs.csharp.lang.security.ad.jwt-tokenvalidationparameters-no-expiry-validation.jwt-tokenvalidationparameters-no-expiry-validation",
              "name": "codacy.tools-configs.csharp.lang.security.ad.jwt-tokenvalidationparameters-no-expiry-validation.jwt-tokenvalidationparameters-no-expiry-validation",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-613: Insufficient Session Expiration",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2017 - Broken Authentication",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.csharp.lang.security.ad.jwt-tokenvalidationparameters-no-expiry-validation.jwt-tokenvalidationparameters-no-expiry-validation"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Accepting unsigned security tokens as valid security tokens allows an attacker to remove its signature and potentially forge an identity. As a fix, set RequireSignedTokens to be true."
              },
              "help": {
                "markdown": "Accepting unsigned security tokens as valid security tokens allows an attacker to remove its signature and potentially forge an identity. As a fix, set RequireSignedTokens to be true.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control/](https://owasp.org/Top10/A01_2021-Broken_Access_Control/)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures/](https://owasp.org/Top10/A02_2021-Cryptographic_Failures/)\n - [https://cwe.mitre.org/data/definitions/347](https://cwe.mitre.org/data/definitions/347)\n",
                "text": "Accepting unsigned security tokens as valid security tokens allows an attacker to remove its signature and potentially forge an identity. As a fix, set RequireSignedTokens to be true."
              },
              "id": "codacy.tools-configs.csharp.lang.security.cryptography.unsigned-security-token.unsigned-security-token",
              "name": "codacy.tools-configs.csharp.lang.security.cryptography.unsigned-security-token.unsigned-security-token",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-347: Improper Verification of Cryptographic Signature",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.csharp.lang.security.cryptography.unsigned-security-token.unsigned-security-token"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Validating certificates based on subject name is bad practice. Use the X509Certificate2.Verify() method instead."
              },
              "help": {
                "markdown": "Validating certificates based on subject name is bad practice. Use the X509Certificate2.Verify() method instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.microsoft.com/en-us/dotnet/api/system.identitymodel.tokens.issuernameregistry?view=netframework-4.8](https://docs.microsoft.com/en-us/dotnet/api/system.identitymodel.tokens.issuernameregistry?view=netframework-4.8)\n",
                "text": "Validating certificates based on subject name is bad practice. Use the X509Certificate2.Verify() method instead."
              },
              "id": "codacy.tools-configs.csharp.lang.security.cryptography.x509-subject-name-validation.x509-subject-name-validation",
              "name": "codacy.tools-configs.csharp.lang.security.cryptography.x509-subject-name-validation.x509-subject-name-validation",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-295: Improper Certificate Validation",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.csharp.lang.security.cryptography.x509-subject-name-validation.x509-subject-name-validation"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "String argument $A is used to read or write data from a file via Path.Combine without direct sanitization via Path.GetFileName. If the path is user-supplied data this can lead to path traversal."
              },
              "help": {
                "markdown": "String argument $A is used to read or write data from a file via Path.Combine without direct sanitization via Path.GetFileName. If the path is user-supplied data this can lead to path traversal.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.praetorian.com/blog/pathcombine-security-issues-in-aspnet-applications/](https://www.praetorian.com/blog/pathcombine-security-issues-in-aspnet-applications/)\n - [https://docs.microsoft.com/en-us/dotnet/api/system.io.path.combine?view=net-6.0#remarks](https://docs.microsoft.com/en-us/dotnet/api/system.io.path.combine?view=net-6.0#remarks)\n",
                "text": "String argument $A is used to read or write data from a file via Path.Combine without direct sanitization via Path.GetFileName. If the path is user-supplied data this can lead to path traversal."
              },
              "id": "codacy.tools-configs.csharp.lang.security.filesystem.unsafe-path-combine.unsafe-path-combine",
              "name": "codacy.tools-configs.csharp.lang.security.filesystem.unsafe-path-combine.unsafe-path-combine",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "OWASP-A05:2017 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.csharp.lang.security.filesystem.unsafe-path-combine.unsafe-path-combine"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The top level wildcard bindings $PREFIX leaves your application open to security vulnerabilities and give attackers more control over where traffic is routed. If you must use wildcards, consider using subdomain wildcard binding. For example, you can use \"*.asdf.gov\" if you own all of \"asdf.gov\"."
              },
              "help": {
                "markdown": "The top level wildcard bindings $PREFIX leaves your application open to security vulnerabilities and give attackers more control over where traffic is routed. If you must use wildcards, consider using subdomain wildcard binding. For example, you can use \"*.asdf.gov\" if you own all of \"asdf.gov\".\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.microsoft.com/en-us/dotnet/api/system.net.httplistener?view=net-6.0](https://docs.microsoft.com/en-us/dotnet/api/system.net.httplistener?view=net-6.0)\n",
                "text": "The top level wildcard bindings $PREFIX leaves your application open to security vulnerabilities and give attackers more control over where traffic is routed. If you must use wildcards, consider using subdomain wildcard binding. For example, you can use \"*.asdf.gov\" if you own all of \"asdf.gov\"."
              },
              "id": "codacy.tools-configs.csharp.lang.security.http.http-listener-wildcard-bindings.http-listener-wildcard-bindings",
              "name": "codacy.tools-configs.csharp.lang.security.http.http-listener-wildcard-bindings.http-listener-wildcard-bindings",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-706: Use of Incorrectly-Resolved Name or Reference",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.csharp.lang.security.http.http-listener-wildcard-bindings.http-listener-wildcard-bindings"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure"
              },
              "help": {
                "markdown": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide](https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide)\n",
                "text": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure"
              },
              "id": "codacy.tools-configs.csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization",
              "name": "codacy.tools-configs.csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-502: Deserialization of Untrusted Data",
                  "HIGH CONFIDENCE",
                  "OWASP-A08:2017 - Insecure Deserialization",
                  "OWASP-A08:2021 - Software and Data Integrity Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The FsPickler is dangerous and is not recommended for data processing. Default configuration tend to insecure deserialization vulnerability."
              },
              "help": {
                "markdown": "The FsPickler is dangerous and is not recommended for data processing. Default configuration tend to insecure deserialization vulnerability.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://mbraceproject.github.io/FsPickler/tutorial.html#Disabling-Subtype-Resolution](https://mbraceproject.github.io/FsPickler/tutorial.html#Disabling-Subtype-Resolution)\n",
                "text": "The FsPickler is dangerous and is not recommended for data processing. Default configuration tend to insecure deserialization vulnerability."
              },
              "id": "codacy.tools-configs.csharp.lang.security.insecure-deserialization.fs-pickler.insecure-fspickler-deserialization",
              "name": "codacy.tools-configs.csharp.lang.security.insecure-deserialization.fs-pickler.insecure-fspickler-deserialization",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-502: Deserialization of Untrusted Data",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A08:2017 - Insecure Deserialization",
                  "OWASP-A08:2021 - Software and Data Integrity Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.csharp.lang.security.insecure-deserialization.fs-pickler.insecure-fspickler-deserialization"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The LosFormatter type is dangerous and is not recommended for data processing. Applications should stop using LosFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. LosFormatter is insecure and can't be made secure"
              },
              "help": {
                "markdown": "The LosFormatter type is dangerous and is not recommended for data processing. Applications should stop using LosFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. LosFormatter is insecure and can't be made secure\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.losformatter?view=netframework-4.8](https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.losformatter?view=netframework-4.8)\n",
                "text": "The LosFormatter type is dangerous and is not recommended for data processing. Applications should stop using LosFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. LosFormatter is insecure and can't be made secure"
              },
              "id": "codacy.tools-configs.csharp.lang.security.insecure-deserialization.los-formatter.insecure-losformatter-deserialization",
              "name": "codacy.tools-configs.csharp.lang.security.insecure-deserialization.los-formatter.insecure-losformatter-deserialization",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-502: Deserialization of Untrusted Data",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A08:2017 - Insecure Deserialization",
                  "OWASP-A08:2021 - Software and Data Integrity Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.csharp.lang.security.insecure-deserialization.los-formatter.insecure-losformatter-deserialization"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The NetDataContractSerializer type is dangerous and is not recommended for data processing. Applications should stop using NetDataContractSerializer as soon as possible, even if they believe the data they're processing to be trustworthy. NetDataContractSerializer is insecure and can't be made secure"
              },
              "help": {
                "markdown": "The NetDataContractSerializer type is dangerous and is not recommended for data processing. Applications should stop using NetDataContractSerializer as soon as possible, even if they believe the data they're processing to be trustworthy. NetDataContractSerializer is insecure and can't be made secure\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.netdatacontractserializer?view=netframework-4.8#security](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.netdatacontractserializer?view=netframework-4.8#security)\n",
                "text": "The NetDataContractSerializer type is dangerous and is not recommended for data processing. Applications should stop using NetDataContractSerializer as soon as possible, even if they believe the data they're processing to be trustworthy. NetDataContractSerializer is insecure and can't be made secure"
              },
              "id": "codacy.tools-configs.csharp.lang.security.insecure-deserialization.net-data-contract.insecure-netdatacontract-deserialization",
              "name": "codacy.tools-configs.csharp.lang.security.insecure-deserialization.net-data-contract.insecure-netdatacontract-deserialization",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-502: Deserialization of Untrusted Data",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A08:2017 - Insecure Deserialization",
                  "OWASP-A08:2021 - Software and Data Integrity Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.csharp.lang.security.insecure-deserialization.net-data-contract.insecure-netdatacontract-deserialization"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The SoapFormatter type is dangerous and is not recommended for data processing. Applications should stop using SoapFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. SoapFormatter is insecure and can't be made secure"
              },
              "help": {
                "markdown": "The SoapFormatter type is dangerous and is not recommended for data processing. Applications should stop using SoapFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. SoapFormatter is insecure and can't be made secure\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.soap.soapformatter?view=netframework-4.8#remarks](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.soap.soapformatter?view=netframework-4.8#remarks)\n",
                "text": "The SoapFormatter type is dangerous and is not recommended for data processing. Applications should stop using SoapFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. SoapFormatter is insecure and can't be made secure"
              },
              "id": "codacy.tools-configs.csharp.lang.security.insecure-deserialization.soap-formatter.insecure-soapformatter-deserialization",
              "name": "codacy.tools-configs.csharp.lang.security.insecure-deserialization.soap-formatter.insecure-soapformatter-deserialization",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-502: Deserialization of Untrusted Data",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A08:2017 - Insecure Deserialization",
                  "OWASP-A08:2021 - Software and Data Integrity Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.csharp.lang.security.insecure-deserialization.soap-formatter.insecure-soapformatter-deserialization"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Specifying the regex timeout leaves the system vulnerable to a regex-based Denial of Service (DoS) attack. Consider setting the timeout to a short amount of time like 2 or 3 seconds. If you are sure you need an infinite timeout, double check that your context meets the conditions outlined in the \"Notes to Callers\" section at the bottom of this page: https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.-ctor?view=net-6.0"
              },
              "help": {
                "markdown": "Specifying the regex timeout leaves the system vulnerable to a regex-based Denial of Service (DoS) attack. Consider setting the timeout to a short amount of time like 2 or 3 seconds. If you are sure you need an infinite timeout, double check that your context meets the conditions outlined in the \"Notes to Callers\" section at the bottom of this page: https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.-ctor?view=net-6.0\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)\n - [https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.infinitematchtimeout](https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.infinitematchtimeout)\n - [https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.-ctor?view=net-6.0](https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.-ctor?view=net-6.0)\n",
                "text": "Specifying the regex timeout leaves the system vulnerable to a regex-based Denial of Service (DoS) attack. Consider setting the timeout to a short amount of time like 2 or 3 seconds. If you are sure you need an infinite timeout, double check that your context meets the conditions outlined in the \"Notes to Callers\" section at the bottom of this page: https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.-ctor?view=net-6.0"
              },
              "id": "codacy.tools-configs.csharp.lang.security.regular-expression-dos.regular-expression-dos-infinite-timeout.regular-expression-dos-infinite-timeout",
              "name": "codacy.tools-configs.csharp.lang.security.regular-expression-dos.regular-expression-dos-infinite-timeout.regular-expression-dos-infinite-timeout",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-1333: Inefficient Regular Expression Complexity",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.csharp.lang.security.regular-expression-dos.regular-expression-dos-infinite-timeout.regular-expression-dos-infinite-timeout"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "When using `System.Text.RegularExpressions` to process untrusted input, pass a timeout.  A malicious user can provide input to `RegularExpressions` that abuses the backtracking behaviour of this regular expression engine. This will lead to excessive CPU usage, causing a Denial-of-Service attack"
              },
              "help": {
                "markdown": "When using `System.Text.RegularExpressions` to process untrusted input, pass a timeout.  A malicious user can provide input to `RegularExpressions` that abuses the backtracking behaviour of this regular expression engine. This will lead to excessive CPU usage, causing a Denial-of-Service attack\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)\n - [https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expressions#regular-expression-examples](https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expressions#regular-expression-examples)\n",
                "text": "When using `System.Text.RegularExpressions` to process untrusted input, pass a timeout.  A malicious user can provide input to `RegularExpressions` that abuses the backtracking behaviour of this regular expression engine. This will lead to excessive CPU usage, causing a Denial-of-Service attack"
              },
              "id": "codacy.tools-configs.csharp.lang.security.regular-expression-dos.regular-expression-dos.regular-expression-dos",
              "name": "codacy.tools-configs.csharp.lang.security.regular-expression-dos.regular-expression-dos.regular-expression-dos",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-1333: Inefficient Regular Expression Complexity",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.csharp.lang.security.regular-expression-dos.regular-expression-dos.regular-expression-dos"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'."
              },
              "help": {
                "markdown": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
                "text": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'."
              },
              "id": "codacy.tools-configs.csharp.lang.security.sqli.csharp-sqli.csharp-sqli",
              "name": "codacy.tools-configs.csharp.lang.security.sqli.csharp-sqli.csharp-sqli",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.csharp.lang.security.sqli.csharp-sqli.csharp-sqli"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Stacktrace information is displayed in a non-Development environment. Accidentally disclosing sensitive stack trace information in a production environment aids an attacker in reconnaissance and information gathering."
              },
              "help": {
                "markdown": "Stacktrace information is displayed in a non-Development environment. Accidentally disclosing sensitive stack trace information in a production environment aids an attacker in reconnaissance and information gathering.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cwe.mitre.org/data/definitions/209.html](https://cwe.mitre.org/data/definitions/209.html)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design/](https://owasp.org/Top10/A04_2021-Insecure_Design/)\n",
                "text": "Stacktrace information is displayed in a non-Development environment. Accidentally disclosing sensitive stack trace information in a production environment aids an attacker in reconnaissance and information gathering."
              },
              "id": "codacy.tools-configs.csharp.lang.security.stacktrace-disclosure.stacktrace-disclosure",
              "name": "codacy.tools-configs.csharp.lang.security.stacktrace-disclosure.stacktrace-disclosure",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-209: Generation of Error Message Containing Sensitive Information",
                  "HIGH CONFIDENCE",
                  "OWASP-A04:2021 - Insecure Design",
                  "OWASP-A06:2017 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.csharp.lang.security.stacktrace-disclosure.stacktrace-disclosure"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data."
              },
              "help": {
                "markdown": "XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.jardinesoftware.net/2016/05/26/xxe-and-net/](https://www.jardinesoftware.net/2016/05/26/xxe-and-net/)\n - [https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument.xmlresolver?view=net-6.0#remarks](https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument.xmlresolver?view=net-6.0#remarks)\n",
                "text": "XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data."
              },
              "id": "codacy.tools-configs.csharp.lang.security.xxe.xmldocument-unsafe-parser-override.xmldocument-unsafe-parser-override",
              "name": "codacy.tools-configs.csharp.lang.security.xxe.xmldocument-unsafe-parser-override.xmldocument-unsafe-parser-override",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-611: Improper Restriction of XML External Entity Reference",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A04:2017 - XML External Entities (XXE)",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.csharp.lang.security.xxe.xmldocument-unsafe-parser-override.xmldocument-unsafe-parser-override"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data."
              },
              "help": {
                "markdown": "XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.jardinesoftware.net/2016/05/26/xxe-and-net/](https://www.jardinesoftware.net/2016/05/26/xxe-and-net/)\n - [https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument.xmlresolver?view=net-6.0#remarks](https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument.xmlresolver?view=net-6.0#remarks)\n",
                "text": "XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data."
              },
              "id": "codacy.tools-configs.csharp.lang.security.xxe.xmlreadersettings-unsafe-parser-override.xmlreadersettings-unsafe-parser-override",
              "name": "codacy.tools-configs.csharp.lang.security.xxe.xmlreadersettings-unsafe-parser-override.xmlreadersettings-unsafe-parser-override",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-611: Improper Restriction of XML External Entity Reference",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A04:2017 - XML External Entities (XXE)",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.csharp.lang.security.xxe.xmlreadersettings-unsafe-parser-override.xmlreadersettings-unsafe-parser-override"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data."
              },
              "help": {
                "markdown": "XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.jardinesoftware.net/2016/05/26/xxe-and-net/](https://www.jardinesoftware.net/2016/05/26/xxe-and-net/)\n - [https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument.xmlresolver?view=net-6.0#remarks](https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument.xmlresolver?view=net-6.0#remarks)\n",
                "text": "XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data."
              },
              "id": "codacy.tools-configs.csharp.lang.security.xxe.xmltextreader-unsafe-defaults.xmltextreader-unsafe-defaults",
              "name": "codacy.tools-configs.csharp.lang.security.xxe.xmltextreader-unsafe-defaults.xmltextreader-unsafe-defaults",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-611: Improper Restriction of XML External Entity Reference",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A04:2017 - XML External Entities (XXE)",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.csharp.lang.security.xxe.xmltextreader-unsafe-defaults.xmltextreader-unsafe-defaults"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "The last user in the container is 'root'. This is a security hazard because if an attacker gains control of the container they will have root access. Switch back to another user after running commands as 'root'."
              },
              "help": {
                "markdown": "The last user in the container is 'root'. This is a security hazard because if an attacker gains control of the container they will have root access. Switch back to another user after running commands as 'root'.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/hadolint/hadolint/wiki/DL3002)\n - [https://github.com/hadolint/hadolint/wiki/DL3002](https://github.com/hadolint/hadolint/wiki/DL3002)\n",
                "text": "The last user in the container is 'root'. This is a security hazard because if an attacker gains control of the container they will have root access. Switch back to another user after running commands as 'root'."
              },
              "helpUri": "https://github.com/hadolint/hadolint/wiki/DL3002",
              "id": "codacy.tools-configs.dockerfile.security.last-user-is-root.last-user-is-root",
              "name": "codacy.tools-configs.dockerfile.security.last-user-is-root.last-user-is-root",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-269: Improper Privilege Management",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.dockerfile.security.last-user-is-root.last-user-is-root"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'."
              },
              "help": {
                "markdown": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n",
                "text": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'."
              },
              "id": "codacy.tools-configs.dockerfile.security.missing-user-entrypoint.missing-user-entrypoint",
              "name": "codacy.tools-configs.dockerfile.security.missing-user-entrypoint.missing-user-entrypoint",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-269: Improper Privilege Management",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.dockerfile.security.missing-user-entrypoint.missing-user-entrypoint"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'."
              },
              "help": {
                "markdown": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n",
                "text": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'."
              },
              "id": "codacy.tools-configs.dockerfile.security.missing-user.missing-user",
              "name": "codacy.tools-configs.dockerfile.security.missing-user.missing-user",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-269: Improper Privilege Management",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.dockerfile.security.missing-user.missing-user"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Avoid using sudo in Dockerfiles. Running processes as a non-root user can help  reduce the potential impact of configuration errors and security vulnerabilities."
              },
              "help": {
                "markdown": "Avoid using sudo in Dockerfiles. Running processes as a non-root user can help  reduce the potential impact of configuration errors and security vulnerabilities.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cwe.mitre.org/data/definitions/250.html](https://cwe.mitre.org/data/definitions/250.html)\n - [https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#user](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#user)\n",
                "text": "Avoid using sudo in Dockerfiles. Running processes as a non-root user can help  reduce the potential impact of configuration errors and security vulnerabilities."
              },
              "id": "codacy.tools-configs.dockerfile.security.no-sudo-in-dockerfile.no-sudo-in-dockerfile",
              "name": "codacy.tools-configs.dockerfile.security.no-sudo-in-dockerfile.no-sudo-in-dockerfile",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-250: Execution with Unnecessary Privileges",
                  "HIGH CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.dockerfile.security.no-sudo-in-dockerfile.no-sudo-in-dockerfile"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Stripe Restricted API Key detected"
              },
              "help": {
                "markdown": "Stripe Restricted API Key detected\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n",
                "text": "Stripe Restricted API Key detected"
              },
              "helpUri": "https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json",
              "id": "codacy.tools-configs.generic.secrets.security.detected-stripe-restricted-api-key.detected-stripe-restricted-api-key",
              "name": "codacy.tools-configs.generic.secrets.security.detected-stripe-restricted-api-key.detected-stripe-restricted-api-key",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-798: Use of Hard-coded Credentials",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.generic.secrets.security.detected-stripe-restricted-api-key.detected-stripe-restricted-api-key"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Username and password in URI detected"
              },
              "help": {
                "markdown": "Username and password in URI detected\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go](https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go)\n",
                "text": "Username and password in URI detected"
              },
              "id": "codacy.tools-configs.generic.secrets.security.detected-username-and-password-in-uri.detected-username-and-password-in-uri",
              "name": "codacy.tools-configs.generic.secrets.security.detected-username-and-password-in-uri.detected-username-and-password-in-uri",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-798: Use of Hard-coded Credentials",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.generic.secrets.security.detected-username-and-password-in-uri.detected-username-and-password-in-uri"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detects potential Google Maps API keys in code"
              },
              "help": {
                "markdown": "Detects potential Google Maps API keys in code\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://ozguralp.medium.com/unauthorized-google-maps-api-key-usage-cases-and-why-you-need-to-care-1ccb28bf21e](https://ozguralp.medium.com/unauthorized-google-maps-api-key-usage-cases-and-why-you-need-to-care-1ccb28bf21e)\n",
                "text": "Detects potential Google Maps API keys in code"
              },
              "id": "codacy.tools-configs.generic.secrets.security.google-maps-apikeyleak.google-maps-apikeyleak",
              "name": "codacy.tools-configs.generic.secrets.security.google-maps-apikeyleak.google-maps-apikeyleak",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-538: Insertion of Sensitive Information into Externally-Accessible File or Directory",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A3:2017 Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.generic.secrets.security.google-maps-apikeyleak.google-maps-apikeyleak"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Consuming CDNs without including a SubResource Integrity (SRI) can expose your application and its users to compromised code. SRIs allow you to consume specific versions of content where if even a single byte is compromised, the resource will not be loaded. Add an integrity attribute to your \u003cscript\u003e and \u003clink\u003e tags pointing to CDN content to ensure the resources have not been compromised. A crossorigin attribute should also be added. For a more thorough explanation along with explicit instructions on remediating, follow the directions from Mozilla here: https://developer.mozilla.org/en-US/blog/securing-cdn-using-sri-why-how/"
              },
              "help": {
                "markdown": "Consuming CDNs without including a SubResource Integrity (SRI) can expose your application and its users to compromised code. SRIs allow you to consume specific versions of content where if even a single byte is compromised, the resource will not be loaded. Add an integrity attribute to your \u003cscript\u003e and \u003clink\u003e tags pointing to CDN content to ensure the resources have not been compromised. A crossorigin attribute should also be added. For a more thorough explanation along with explicit instructions on remediating, follow the directions from Mozilla here: https://developer.mozilla.org/en-US/blog/securing-cdn-using-sri-why-how/\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cwe.mitre.org/data/definitions/352.html](https://cwe.mitre.org/data/definitions/352.html)\n - [https://developer.mozilla.org/en-US/blog/securing-cdn-using-sri-why-how/](https://developer.mozilla.org/en-US/blog/securing-cdn-using-sri-why-how/)\n",
                "text": "Consuming CDNs without including a SubResource Integrity (SRI) can expose your application and its users to compromised code. SRIs allow you to consume specific versions of content where if even a single byte is compromised, the resource will not be loaded. Add an integrity attribute to your \u003cscript\u003e and \u003clink\u003e tags pointing to CDN content to ensure the resources have not been compromised. A crossorigin attribute should also be added. For a more thorough explanation along with explicit instructions on remediating, follow the directions from Mozilla here: https://developer.mozilla.org/en-US/blog/securing-cdn-using-sri-why-how/"
              },
              "id": "codacy.tools-configs.generic.visualforce.security.ncino.html.usesriforcdns.use-sri-for-cdns",
              "name": "codacy.tools-configs.generic.visualforce.security.ncino.html.usesriforcdns.use-sri-for-cdns",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-346: Origin Validation Error",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.generic.visualforce.security.ncino.html.usesriforcdns.use-sri-for-cdns"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "To remediate this issue, ensure that all URL parameters are properly escaped before including them in scripts. Please update your code to use either the JSENCODE method to escape URL parameters or the escape=\"true\" attribute on \u003capex:outputText\u003e tags. Passing URL parameters directly into scripts and DOM sinks creates an opportunity for Cross-Site Scripting attacks. Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted websites. To remediate this issue, ensure that all URL parameters are properly escaped before including them in scripts."
              },
              "help": {
                "markdown": "To remediate this issue, ensure that all URL parameters are properly escaped before including them in scripts. Please update your code to use either the JSENCODE method to escape URL parameters or the escape=\"true\" attribute on \u003capex:outputText\u003e tags. Passing URL parameters directly into scripts and DOM sinks creates an opportunity for Cross-Site Scripting attacks. Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted websites. To remediate this issue, ensure that all URL parameters are properly escaped before including them in scripts.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/pages_security_tips_xss.htm](https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/pages_security_tips_xss.htm)\n",
                "text": "To remediate this issue, ensure that all URL parameters are properly escaped before including them in scripts. Please update your code to use either the JSENCODE method to escape URL parameters or the escape=\"true\" attribute on \u003capex:outputText\u003e tags. Passing URL parameters directly into scripts and DOM sinks creates an opportunity for Cross-Site Scripting attacks. Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted websites. To remediate this issue, ensure that all URL parameters are properly escaped before including them in scripts."
              },
              "id": "codacy.tools-configs.generic.visualforce.security.ncino.vf.xssfromunescapedurlparam.xss-from-unescaped-url-param",
              "name": "codacy.tools-configs.generic.visualforce.security.ncino.vf.xssfromunescapedurlparam.xss-from-unescaped-url-param",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.generic.visualforce.security.ncino.vf.xssfromunescapedurlparam.xss-from-unescaped-url-param"
              }
            },
            {
              "defaultConfiguration": {
                "level": "note"
              },
              "fullDescription": {
                "text": "Visualforce Pages must have the cspHeader attribute set to true. This attribute is available in API version 55 or higher."
              },
              "help": {
                "markdown": "Visualforce Pages must have the cspHeader attribute set to true. This attribute is available in API version 55 or higher.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://help.salesforce.com/s/articleView?id=sf.csp_trusted_sites.htm\u0026type=5](https://help.salesforce.com/s/articleView?id=sf.csp_trusted_sites.htm\u0026type=5)\n",
                "text": "Visualforce Pages must have the cspHeader attribute set to true. This attribute is available in API version 55 or higher."
              },
              "id": "codacy.tools-configs.generic.visualforce.security.ncino.xml.cspheaderattribute.csp-header-attribute",
              "name": "codacy.tools-configs.generic.visualforce.security.ncino.xml.cspheaderattribute.csp-header-attribute",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "HIGH CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.generic.visualforce.security.ncino.xml.cspheaderattribute.csp-header-attribute"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Visualforce Pages must use API version 55 or higher for required use of the cspHeader attribute set to true."
              },
              "help": {
                "markdown": "Visualforce Pages must use API version 55 or higher for required use of the cspHeader attribute set to true.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_pages.htm](https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_pages.htm)\n",
                "text": "Visualforce Pages must use API version 55 or higher for required use of the cspHeader attribute set to true."
              },
              "id": "codacy.tools-configs.generic.visualforce.security.ncino.xml.visualforceapiversion.visualforce-page-api-version",
              "name": "codacy.tools-configs.generic.visualforce.security.ncino.xml.visualforceapiversion.visualforce-page-api-version",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "HIGH CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.generic.visualforce.security.ncino.xml.visualforceapiversion.visualforce-page-api-version"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use prepared statements with the 'Prepare' and 'PrepareContext' calls."
              },
              "help": {
                "markdown": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use prepared statements with the 'Prepare' and 'PrepareContext' calls.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://pkg.go.dev/database/sql#DB.Query](https://pkg.go.dev/database/sql#DB.Query)\n",
                "text": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use prepared statements with the 'Prepare' and 'PrepareContext' calls."
              },
              "id": "codacy.tools-configs.go.aws-lambda.security.database-sqli.database-sqli",
              "name": "codacy.tools-configs.go.aws-lambda.security.database-sqli.database-sqli",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.aws-lambda.security.database-sqli.database-sqli"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."
              },
              "help": {
                "markdown": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/www-community/attacks/SQL_Injection](https://owasp.org/www-community/attacks/SQL_Injection)\n",
                "text": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."
              },
              "id": "codacy.tools-configs.go.aws-lambda.security.tainted-sql-string.tainted-sql-string",
              "name": "codacy.tools-configs.go.aws-lambda.security.tainted-sql-string.tainted-sql-string",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.aws-lambda.security.tainted-sql-string.tainted-sql-string"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Variable $VAR is assigned from two different sources: '$Y' and '$R'. Make sure this is intended, as this could cause logic bugs if they are treated as they are the same object."
              },
              "help": {
                "markdown": "Variable $VAR is assigned from two different sources: '$Y' and '$R'. Make sure this is intended, as this could cause logic bugs if they are treated as they are the same object.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cwe.mitre.org/data/definitions/289.html](https://cwe.mitre.org/data/definitions/289.html)\n",
                "text": "Variable $VAR is assigned from two different sources: '$Y' and '$R'. Make sure this is intended, as this could cause logic bugs if they are treated as they are the same object."
              },
              "id": "codacy.tools-configs.go.gorilla.security.audit.handler-assignment-from-multiple-sources.handler-assignment-from-multiple-sources",
              "name": "codacy.tools-configs.go.gorilla.security.audit.handler-assignment-from-multiple-sources.handler-assignment-from-multiple-sources",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-289: Authentication Bypass by Alternate Name",
                  "MEDIUM CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.gorilla.security.audit.handler-assignment-from-multiple-sources.handler-assignment-from-multiple-sources"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "A session cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie which mitigates XSS attacks. Set the 'HttpOnly' flag by setting 'HttpOnly' to 'true' in the Options struct."
              },
              "help": {
                "markdown": "A session cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie which mitigates XSS attacks. Set the 'HttpOnly' flag by setting 'HttpOnly' to 'true' in the Options struct.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://github.com/0c34/govwa/blob/139693e56406b5684d2a6ae22c0af90717e149b8/user/session/session.go#L69](https://github.com/0c34/govwa/blob/139693e56406b5684d2a6ae22c0af90717e149b8/user/session/session.go#L69)\n",
                "text": "A session cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie which mitigates XSS attacks. Set the 'HttpOnly' flag by setting 'HttpOnly' to 'true' in the Options struct."
              },
              "id": "codacy.tools-configs.go.gorilla.security.audit.session-cookie-missing-httponly.session-cookie-missing-httponly",
              "name": "codacy.tools-configs.go.gorilla.security.audit.session-cookie-missing-httponly.session-cookie-missing-httponly",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.gorilla.security.audit.session-cookie-missing-httponly.session-cookie-missing-httponly"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "A session cookie was detected without setting the 'Secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'Secure' flag by setting 'Secure' to 'true' in the Options struct."
              },
              "help": {
                "markdown": "A session cookie was detected without setting the 'Secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'Secure' flag by setting 'Secure' to 'true' in the Options struct.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://github.com/0c34/govwa/blob/139693e56406b5684d2a6ae22c0af90717e149b8/user/session/session.go#L69](https://github.com/0c34/govwa/blob/139693e56406b5684d2a6ae22c0af90717e149b8/user/session/session.go#L69)\n",
                "text": "A session cookie was detected without setting the 'Secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'Secure' flag by setting 'Secure' to 'true' in the Options struct."
              },
              "id": "codacy.tools-configs.go.gorilla.security.audit.session-cookie-missing-secure.session-cookie-missing-secure",
              "name": "codacy.tools-configs.go.gorilla.security.audit.session-cookie-missing-secure.session-cookie-missing-secure",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.gorilla.security.audit.session-cookie-missing-secure.session-cookie-missing-secure"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found SameSiteNoneMode setting in Gorilla session options. Consider setting SameSite to Lax, Strict or Default for enhanced security."
              },
              "help": {
                "markdown": "Found SameSiteNoneMode setting in Gorilla session options. Consider setting SameSite to Lax, Strict or Default for enhanced security.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://pkg.go.dev/github.com/gorilla/sessions#Options](https://pkg.go.dev/github.com/gorilla/sessions#Options)\n",
                "text": "Found SameSiteNoneMode setting in Gorilla session options. Consider setting SameSite to Lax, Strict or Default for enhanced security."
              },
              "id": "codacy.tools-configs.go.gorilla.security.audit.session-cookie-samesitenone.session-cookie-samesitenone",
              "name": "codacy.tools-configs.go.gorilla.security.audit.session-cookie-samesitenone.session-cookie-samesitenone",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-1275: Sensitive Cookie with Improper SameSite Attribute",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.gorilla.security.audit.session-cookie-samesitenone.session-cookie-samesitenone"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The Origin header in the HTTP WebSocket handshake is used to guarantee that the connection accepted by the WebSocket is from a trusted origin domain. Failure to enforce can lead to Cross Site Request Forgery (CSRF). As per \"gorilla/websocket\" documentation: \"A CheckOrigin function should carefully validate the request origin to prevent cross-site request forgery.\""
              },
              "help": {
                "markdown": "The Origin header in the HTTP WebSocket handshake is used to guarantee that the connection accepted by the WebSocket is from a trusted origin domain. Failure to enforce can lead to Cross Site Request Forgery (CSRF). As per \"gorilla/websocket\" documentation: \"A CheckOrigin function should carefully validate the request origin to prevent cross-site request forgery.\"\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://pkg.go.dev/github.com/gorilla/websocket#Upgrader](https://pkg.go.dev/github.com/gorilla/websocket#Upgrader)\n",
                "text": "The Origin header in the HTTP WebSocket handshake is used to guarantee that the connection accepted by the WebSocket is from a trusted origin domain. Failure to enforce can lead to Cross Site Request Forgery (CSRF). As per \"gorilla/websocket\" documentation: \"A CheckOrigin function should carefully validate the request origin to prevent cross-site request forgery.\""
              },
              "id": "codacy.tools-configs.go.gorilla.security.audit.websocket-missing-origin-check.websocket-missing-origin-check",
              "name": "codacy.tools-configs.go.gorilla.security.audit.websocket-missing-origin-check.websocket-missing-origin-check",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-352: Cross-Site Request Forgery (CSRF)",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.gorilla.security.audit.websocket-missing-origin-check.websocket-missing-origin-check"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected usage of dangerous method $METHOD which does not escape inputs (see link in references). If the argument is user-controlled, this can lead to SQL injection. When using $METHOD function, do not trust user-submitted data and only allow approved list of input (possibly, use an allowlist approach)."
              },
              "help": {
                "markdown": "Detected usage of dangerous method $METHOD which does not escape inputs (see link in references). If the argument is user-controlled, this can lead to SQL injection. When using $METHOD function, do not trust user-submitted data and only allow approved list of input (possibly, use an allowlist approach).\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://gorm.io/docs/security.html#SQL-injection-Methods](https://gorm.io/docs/security.html#SQL-injection-Methods)\n - [https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
                "text": "Detected usage of dangerous method $METHOD which does not escape inputs (see link in references). If the argument is user-controlled, this can lead to SQL injection. When using $METHOD function, do not trust user-submitted data and only allow approved list of input (possibly, use an allowlist approach)."
              },
              "id": "codacy.tools-configs.go.gorm.security.audit.gorm-dangerous-methods-usage.gorm-dangerous-method-usage",
              "name": "codacy.tools-configs.go.gorm.security.audit.gorm-dangerous-methods-usage.gorm-dangerous-method-usage",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "HIGH CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.gorm.security.audit.gorm-dangerous-methods-usage.gorm-dangerous-method-usage"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Found an insecure gRPC connection using 'grpc.WithInsecure()'. This creates a connection without encryption to a gRPC server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Instead, establish a secure connection with an SSL certificate using the 'grpc.WithTransportCredentials()' function. You can create a create credentials using a 'tls.Config{}' struct with 'credentials.NewTLS()'. The final fix looks like this: 'grpc.WithTransportCredentials(credentials.NewTLS(\u003cconfig\u003e))'."
              },
              "help": {
                "markdown": "Found an insecure gRPC connection using 'grpc.WithInsecure()'. This creates a connection without encryption to a gRPC server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Instead, establish a secure connection with an SSL certificate using the 'grpc.WithTransportCredentials()' function. You can create a create credentials using a 'tls.Config{}' struct with 'credentials.NewTLS()'. The final fix looks like this: 'grpc.WithTransportCredentials(credentials.NewTLS(\u003cconfig\u003e))'.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://blog.gopheracademy.com/advent-2019/go-grps-and-tls/#connection-without-encryption](https://blog.gopheracademy.com/advent-2019/go-grps-and-tls/#connection-without-encryption)\n",
                "text": "Found an insecure gRPC connection using 'grpc.WithInsecure()'. This creates a connection without encryption to a gRPC server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Instead, establish a secure connection with an SSL certificate using the 'grpc.WithTransportCredentials()' function. You can create a create credentials using a 'tls.Config{}' struct with 'credentials.NewTLS()'. The final fix looks like this: 'grpc.WithTransportCredentials(credentials.NewTLS(\u003cconfig\u003e))'."
              },
              "id": "codacy.tools-configs.go.grpc.security.grpc-client-insecure-connection.grpc-client-insecure-connection",
              "name": "codacy.tools-configs.go.grpc.security.grpc-client-insecure-connection.grpc-client-insecure-connection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-300: Channel Accessible by Non-Endpoint",
                  "HIGH CONFIDENCE",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.grpc.security.grpc-client-insecure-connection.grpc-client-insecure-connection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Found an insecure gRPC server without 'grpc.Creds()' or options with credentials. This allows for a connection without encryption to this server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Include credentials derived from an SSL certificate in order to create a secure gRPC connection. You can create credentials using 'credentials.NewServerTLSFromFile(\"cert.pem\", \"cert.key\")'."
              },
              "help": {
                "markdown": "Found an insecure gRPC server without 'grpc.Creds()' or options with credentials. This allows for a connection without encryption to this server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Include credentials derived from an SSL certificate in order to create a secure gRPC connection. You can create credentials using 'credentials.NewServerTLSFromFile(\"cert.pem\", \"cert.key\")'.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://blog.gopheracademy.com/advent-2019/go-grps-and-tls/#connection-without-encryption](https://blog.gopheracademy.com/advent-2019/go-grps-and-tls/#connection-without-encryption)\n",
                "text": "Found an insecure gRPC server without 'grpc.Creds()' or options with credentials. This allows for a connection without encryption to this server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Include credentials derived from an SSL certificate in order to create a secure gRPC connection. You can create credentials using 'credentials.NewServerTLSFromFile(\"cert.pem\", \"cert.key\")'."
              },
              "id": "codacy.tools-configs.go.grpc.security.grpc-server-insecure-connection.grpc-server-insecure-connection",
              "name": "codacy.tools-configs.go.grpc.security.grpc-server-insecure-connection.grpc-server-insecure-connection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-300: Channel Accessible by Non-Endpoint",
                  "HIGH CONFIDENCE",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.grpc.security.grpc-server-insecure-connection.grpc-server-insecure-connection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected the decoding of a JWT token without a verify step. Don't use `ParseUnverified` unless you know what you're doing This method parses the token but doesn't validate the signature. It's only ever useful in cases where you know the signature is valid (because it has been checked previously in the stack) and you want to extract values from it."
              },
              "help": {
                "markdown": "Detected the decoding of a JWT token without a verify step. Don't use `ParseUnverified` unless you know what you're doing This method parses the token but doesn't validate the signature. It's only ever useful in cases where you know the signature is valid (because it has been checked previously in the stack) and you want to extract values from it.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/)\n - [https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures](https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures)\n",
                "text": "Detected the decoding of a JWT token without a verify step. Don't use `ParseUnverified` unless you know what you're doing This method parses the token but doesn't validate the signature. It's only ever useful in cases where you know the signature is valid (because it has been checked previously in the stack) and you want to extract values from it."
              },
              "helpUri": "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/",
              "id": "codacy.tools-configs.go.jwt-go.security.audit.jwt-parse-unverified.jwt-go-parse-unverified",
              "name": "codacy.tools-configs.go.jwt-go.security.audit.jwt-parse-unverified.jwt-go-parse-unverified",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-345: Insufficient Verification of Data Authenticity",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A08:2021 - Software and Data Integrity Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.jwt-go.security.audit.jwt-parse-unverified.jwt-go-parse-unverified"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."
              },
              "help": {
                "markdown": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."
              },
              "helpUri": "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/",
              "id": "codacy.tools-configs.go.jwt-go.security.jwt-none-alg.jwt-go-none-algorithm",
              "name": "codacy.tools-configs.go.jwt-go.security.jwt-none-alg.jwt-go-none-algorithm",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.jwt-go.security.jwt-none-alg.jwt-go-none-algorithm"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
              },
              "help": {
                "markdown": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n",
                "text": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
              },
              "id": "codacy.tools-configs.go.jwt-go.security.jwt.hardcoded-jwt-key",
              "name": "codacy.tools-configs.go.jwt-go.security.jwt.hardcoded-jwt-key",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-798: Use of Hard-coded Credentials",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.jwt-go.security.jwt.hardcoded-jwt-key"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The package `net/http/cgi` is on the import blocklist.  The package is vulnerable to httpoxy attacks (CVE-2015-5386). It is recommended to use `net/http` or a web framework to build a web application instead."
              },
              "help": {
                "markdown": "The package `net/http/cgi` is on the import blocklist.  The package is vulnerable to httpoxy attacks (CVE-2015-5386). It is recommended to use `net/http` or a web framework to build a web application instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/securego/gosec)\n - [https://godoc.org/golang.org/x/crypto/sha3](https://godoc.org/golang.org/x/crypto/sha3)\n",
                "text": "The package `net/http/cgi` is on the import blocklist.  The package is vulnerable to httpoxy attacks (CVE-2015-5386). It is recommended to use `net/http` or a web framework to build a web application instead."
              },
              "helpUri": "https://github.com/securego/gosec",
              "id": "codacy.tools-configs.go.lang.security.audit.crypto.bad_imports.insecure-module-used",
              "name": "codacy.tools-configs.go.lang.security.audit.crypto.bad_imports.insecure-module-used",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.lang.security.audit.crypto.bad_imports.insecure-module-used"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Disabled host key verification detected. This allows man-in-the-middle attacks. Use the 'golang.org/x/crypto/ssh/knownhosts' package to do host key verification. See https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/ to learn more about the problem and how to fix it."
              },
              "help": {
                "markdown": "Disabled host key verification detected. This allows man-in-the-middle attacks. Use the 'golang.org/x/crypto/ssh/knownhosts' package to do host key verification. See https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/ to learn more about the problem and how to fix it.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/securego/gosec)\n - [https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/](https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/)\n - [https://gist.github.com/Skarlso/34321a230cf0245018288686c9e70b2d](https://gist.github.com/Skarlso/34321a230cf0245018288686c9e70b2d)\n",
                "text": "Disabled host key verification detected. This allows man-in-the-middle attacks. Use the 'golang.org/x/crypto/ssh/knownhosts' package to do host key verification. See https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/ to learn more about the problem and how to fix it."
              },
              "helpUri": "https://github.com/securego/gosec",
              "id": "codacy.tools-configs.go.lang.security.audit.crypto.insecure_ssh.avoid-ssh-insecure-ignore-host-key",
              "name": "codacy.tools-configs.go.lang.security.audit.crypto.insecure_ssh.avoid-ssh-insecure-ignore-host-key",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-322: Key Exchange without Entity Authentication",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.lang.security.audit.crypto.insecure_ssh.avoid-ssh-insecure-ignore-host-key"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Do not use `math/rand`. Use `crypto/rand` instead."
              },
              "help": {
                "markdown": "Do not use `math/rand`. Use `crypto/rand` instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#secure-random-number-generation](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#secure-random-number-generation)\n",
                "text": "Do not use `math/rand`. Use `crypto/rand` instead."
              },
              "id": "codacy.tools-configs.go.lang.security.audit.crypto.math_random.math-random-used",
              "name": "codacy.tools-configs.go.lang.security.audit.crypto.math_random.math-random-used",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.lang.security.audit.crypto.math_random.math-random-used"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "`MinVersion` is missing from this TLS configuration.  By default, TLS 1.2 is currently used as the minimum when acting as a client, and TLS 1.0 when acting as a server. General purpose web applications should default to TLS 1.3 with all other protocols disabled.  Only where it is known that a web server must support legacy clients with unsupported an insecure browsers (such as Internet Explorer 10), it may be necessary to enable TLS 1.0 to provide support. Add `MinVersion: tls.VersionTLS13' to the TLS configuration to bump the minimum version to TLS 1.3."
              },
              "help": {
                "markdown": "`MinVersion` is missing from this TLS configuration.  By default, TLS 1.2 is currently used as the minimum when acting as a client, and TLS 1.0 when acting as a server. General purpose web applications should default to TLS 1.3 with all other protocols disabled.  Only where it is known that a web server must support legacy clients with unsupported an insecure browsers (such as Internet Explorer 10), it may be necessary to enable TLS 1.0 to provide support. Add `MinVersion: tls.VersionTLS13' to the TLS configuration to bump the minimum version to TLS 1.3.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/securego/gosec/blob/master/rules/tls_config.go)\n - [https://golang.org/doc/go1.14#crypto/tls](https://golang.org/doc/go1.14#crypto/tls)\n - [https://golang.org/pkg/crypto/tls/#:~:text=MinVersion](https://golang.org/pkg/crypto/tls/#:~:text=MinVersion)\n - [https://www.us-cert.gov/ncas/alerts/TA14-290A](https://www.us-cert.gov/ncas/alerts/TA14-290A)\n",
                "text": "`MinVersion` is missing from this TLS configuration.  By default, TLS 1.2 is currently used as the minimum when acting as a client, and TLS 1.0 when acting as a server. General purpose web applications should default to TLS 1.3 with all other protocols disabled.  Only where it is known that a web server must support legacy clients with unsupported an insecure browsers (such as Internet Explorer 10), it may be necessary to enable TLS 1.0 to provide support. Add `MinVersion: tls.VersionTLS13' to the TLS configuration to bump the minimum version to TLS 1.3."
              },
              "helpUri": "https://github.com/securego/gosec/blob/master/rules/tls_config.go",
              "id": "codacy.tools-configs.go.lang.security.audit.crypto.missing-ssl-minversion.missing-ssl-minversion",
              "name": "codacy.tools-configs.go.lang.security.audit.crypto.missing-ssl-minversion.missing-ssl-minversion",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.lang.security.audit.crypto.missing-ssl-minversion.missing-ssl-minversion"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "SSLv3 is insecure because it has known vulnerabilities. Starting with go1.14, SSLv3 will be removed. Instead, use 'tls.VersionTLS13'."
              },
              "help": {
                "markdown": "SSLv3 is insecure because it has known vulnerabilities. Starting with go1.14, SSLv3 will be removed. Instead, use 'tls.VersionTLS13'.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/securego/gosec/blob/master/rules/tls_config.go)\n - [https://golang.org/doc/go1.14#crypto/tls](https://golang.org/doc/go1.14#crypto/tls)\n - [https://www.us-cert.gov/ncas/alerts/TA14-290A](https://www.us-cert.gov/ncas/alerts/TA14-290A)\n",
                "text": "SSLv3 is insecure because it has known vulnerabilities. Starting with go1.14, SSLv3 will be removed. Instead, use 'tls.VersionTLS13'."
              },
              "helpUri": "https://github.com/securego/gosec/blob/master/rules/tls_config.go",
              "id": "codacy.tools-configs.go.lang.security.audit.crypto.ssl.ssl-v3-is-insecure",
              "name": "codacy.tools-configs.go.lang.security.audit.crypto.ssl.ssl-v3-is-insecure",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.lang.security.audit.crypto.ssl.ssl-v3-is-insecure"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected an insecure CipherSuite via the 'tls' module. This suite is considered weak. Use the function 'tls.CipherSuites()' to get a list of good cipher suites. See https://golang.org/pkg/crypto/tls/#InsecureCipherSuites for why and what other cipher suites to use."
              },
              "help": {
                "markdown": "Detected an insecure CipherSuite via the 'tls' module. This suite is considered weak. Use the function 'tls.CipherSuites()' to get a list of good cipher suites. See https://golang.org/pkg/crypto/tls/#InsecureCipherSuites for why and what other cipher suites to use.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/securego/gosec/blob/master/rules/tls.go)\n - [https://golang.org/pkg/crypto/tls/#InsecureCipherSuites](https://golang.org/pkg/crypto/tls/#InsecureCipherSuites)\n",
                "text": "Detected an insecure CipherSuite via the 'tls' module. This suite is considered weak. Use the function 'tls.CipherSuites()' to get a list of good cipher suites. See https://golang.org/pkg/crypto/tls/#InsecureCipherSuites for why and what other cipher suites to use."
              },
              "helpUri": "https://github.com/securego/gosec/blob/master/rules/tls.go",
              "id": "codacy.tools-configs.go.lang.security.audit.crypto.tls.tls-with-insecure-cipher",
              "name": "codacy.tools-configs.go.lang.security.audit.crypto.tls.tls-with-insecure-cipher",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.lang.security.audit.crypto.tls.tls-with-insecure-cipher"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected DES cipher algorithm which is insecure. The algorithm is considered weak and has been deprecated. Use AES instead."
              },
              "help": {
                "markdown": "Detected DES cipher algorithm which is insecure. The algorithm is considered weak and has been deprecated. Use AES instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/securego/gosec#available-rules)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Detected DES cipher algorithm which is insecure. The algorithm is considered weak and has been deprecated. Use AES instead."
              },
              "helpUri": "https://github.com/securego/gosec#available-rules",
              "id": "codacy.tools-configs.go.lang.security.audit.crypto.use_of_weak_crypto.use-of-des",
              "name": "codacy.tools-configs.go.lang.security.audit.crypto.use_of_weak_crypto.use-of-des",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.lang.security.audit.crypto.use_of_weak_crypto.use-of-des"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "help": {
                "markdown": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/securego/gosec#available-rules)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "helpUri": "https://github.com/securego/gosec#available-rules",
              "id": "codacy.tools-configs.go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5",
              "name": "codacy.tools-configs.go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-328: Use of Weak Hash",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected RC4 cipher algorithm which is insecure. The algorithm has many known vulnerabilities. Use AES instead."
              },
              "help": {
                "markdown": "Detected RC4 cipher algorithm which is insecure. The algorithm has many known vulnerabilities. Use AES instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/securego/gosec#available-rules)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Detected RC4 cipher algorithm which is insecure. The algorithm has many known vulnerabilities. Use AES instead."
              },
              "helpUri": "https://github.com/securego/gosec#available-rules",
              "id": "codacy.tools-configs.go.lang.security.audit.crypto.use_of_weak_crypto.use-of-rc4",
              "name": "codacy.tools-configs.go.lang.security.audit.crypto.use_of_weak_crypto.use-of-rc4",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.lang.security.audit.crypto.use_of_weak_crypto.use-of-rc4"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "help": {
                "markdown": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/securego/gosec#available-rules)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "helpUri": "https://github.com/securego/gosec#available-rules",
              "id": "codacy.tools-configs.go.lang.security.audit.crypto.use_of_weak_crypto.use-of-sha1",
              "name": "codacy.tools-configs.go.lang.security.audit.crypto.use_of_weak_crypto.use-of-sha1",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-328: Use of Weak Hash",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.lang.security.audit.crypto.use_of_weak_crypto.use-of-sha1"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "RSA keys should be at least 2048 bits"
              },
              "help": {
                "markdown": "RSA keys should be at least 2048 bits\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/securego/gosec/blob/master/rules/rsa.go)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms)\n",
                "text": "RSA keys should be at least 2048 bits"
              },
              "helpUri": "https://github.com/securego/gosec/blob/master/rules/rsa.go",
              "id": "codacy.tools-configs.go.lang.security.audit.crypto.use_of_weak_rsa_key.use-of-weak-rsa-key",
              "name": "codacy.tools-configs.go.lang.security.audit.crypto.use_of_weak_rsa_key.use-of-weak-rsa-key",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.lang.security.audit.crypto.use_of_weak_rsa_key.use-of-weak-rsa-key"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected non-static command inside exec.Cmd. Audit the input to 'exec.Cmd'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code."
              },
              "help": {
                "markdown": "Detected non-static command inside exec.Cmd. Audit the input to 'exec.Cmd'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
                "text": "Detected non-static command inside exec.Cmd. Audit the input to 'exec.Cmd'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code."
              },
              "id": "codacy.tools-configs.go.lang.security.audit.dangerous-exec-cmd.dangerous-exec-cmd",
              "name": "codacy.tools-configs.go.lang.security.audit.dangerous-exec-cmd.dangerous-exec-cmd",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-94: Improper Control of Generation of Code ('Code Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.lang.security.audit.dangerous-exec-cmd.dangerous-exec-cmd"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as bcrypt. You can use the `golang.org/x/crypto/bcrypt` package."
              },
              "help": {
                "markdown": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as bcrypt. You can use the `golang.org/x/crypto/bcrypt` package.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html](https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html)\n - [https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords](https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords)\n - [https://github.com/returntocorp/semgrep-rules/issues/1609](https://github.com/returntocorp/semgrep-rules/issues/1609)\n - [https://pkg.go.dev/golang.org/x/crypto/bcrypt](https://pkg.go.dev/golang.org/x/crypto/bcrypt)\n",
                "text": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as bcrypt. You can use the `golang.org/x/crypto/bcrypt` package."
              },
              "id": "codacy.tools-configs.go.lang.security.audit.md5-used-as-password.md5-used-as-password",
              "name": "codacy.tools-configs.go.lang.security.audit.md5-used-as-password.md5-used-as-password",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.lang.security.audit.md5-used-as-password.md5-used-as-password"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected a network listener listening on 0.0.0.0 or an empty string. This could unexpectedly expose the server publicly as it binds to all available interfaces. Instead, specify another IP address that is not 0.0.0.0 nor the empty string."
              },
              "help": {
                "markdown": "Detected a network listener listening on 0.0.0.0 or an empty string. This could unexpectedly expose the server publicly as it binds to all available interfaces. Instead, specify another IP address that is not 0.0.0.0 nor the empty string.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/securego/gosec)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n",
                "text": "Detected a network listener listening on 0.0.0.0 or an empty string. This could unexpectedly expose the server publicly as it binds to all available interfaces. Instead, specify another IP address that is not 0.0.0.0 nor the empty string."
              },
              "helpUri": "https://github.com/securego/gosec",
              "id": "codacy.tools-configs.go.lang.security.audit.net.bind_all.avoid-bind-to-all-interfaces",
              "name": "codacy.tools-configs.go.lang.security.audit.net.bind_all.avoid-bind-to-all-interfaces",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor",
                  "HIGH CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.lang.security.audit.net.bind_all.avoid-bind-to-all-interfaces"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "A session cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie which mitigates XSS attacks. Set the 'HttpOnly' flag by setting 'HttpOnly' to 'true' in the Cookie."
              },
              "help": {
                "markdown": "A session cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie which mitigates XSS attacks. Set the 'HttpOnly' flag by setting 'HttpOnly' to 'true' in the Cookie.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://github.com/0c34/govwa/blob/139693e56406b5684d2a6ae22c0af90717e149b8/util/cookie.go](https://github.com/0c34/govwa/blob/139693e56406b5684d2a6ae22c0af90717e149b8/util/cookie.go)\n - [https://golang.org/src/net/http/cookie.go](https://golang.org/src/net/http/cookie.go)\n",
                "text": "A session cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie which mitigates XSS attacks. Set the 'HttpOnly' flag by setting 'HttpOnly' to 'true' in the Cookie."
              },
              "id": "codacy.tools-configs.go.lang.security.audit.net.cookie-missing-httponly.cookie-missing-httponly",
              "name": "codacy.tools-configs.go.lang.security.audit.net.cookie-missing-httponly.cookie-missing-httponly",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.lang.security.audit.net.cookie-missing-httponly.cookie-missing-httponly"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "A session cookie was detected without setting the 'Secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'Secure' flag by setting 'Secure' to 'true' in the Options struct."
              },
              "help": {
                "markdown": "A session cookie was detected without setting the 'Secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'Secure' flag by setting 'Secure' to 'true' in the Options struct.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://github.com/0c34/govwa/blob/139693e56406b5684d2a6ae22c0af90717e149b8/util/cookie.go](https://github.com/0c34/govwa/blob/139693e56406b5684d2a6ae22c0af90717e149b8/util/cookie.go)\n - [https://golang.org/src/net/http/cookie.go](https://golang.org/src/net/http/cookie.go)\n",
                "text": "A session cookie was detected without setting the 'Secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'Secure' flag by setting 'Secure' to 'true' in the Options struct."
              },
              "id": "codacy.tools-configs.go.lang.security.audit.net.cookie-missing-secure.cookie-missing-secure",
              "name": "codacy.tools-configs.go.lang.security.audit.net.cookie-missing-secure.cookie-missing-secure",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.lang.security.audit.net.cookie-missing-secure.cookie-missing-secure"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected a potentially dynamic ClientTrace. This occurred because semgrep could not find a static definition for '$TRACE'. Dynamic ClientTraces are dangerous because they deserialize function code to run when certain Request events occur, which could lead to code being run without your knowledge. Ensure that your ClientTrace is statically defined."
              },
              "help": {
                "markdown": "Detected a potentially dynamic ClientTrace. This occurred because semgrep could not find a static definition for '$TRACE'. Dynamic ClientTraces are dangerous because they deserialize function code to run when certain Request events occur, which could lead to code being run without your knowledge. Ensure that your ClientTrace is statically defined.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://github.com/returntocorp/semgrep-rules/issues/518](https://github.com/returntocorp/semgrep-rules/issues/518)\n",
                "text": "Detected a potentially dynamic ClientTrace. This occurred because semgrep could not find a static definition for '$TRACE'. Dynamic ClientTraces are dangerous because they deserialize function code to run when certain Request events occur, which could lead to code being run without your knowledge. Ensure that your ClientTrace is statically defined."
              },
              "id": "codacy.tools-configs.go.lang.security.audit.net.dynamic-httptrace-clienttrace.dynamic-httptrace-clienttrace",
              "name": "codacy.tools-configs.go.lang.security.audit.net.dynamic-httptrace-clienttrace.dynamic-httptrace-clienttrace",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-913: Improper Control of Dynamically-Managed Code Resources",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.lang.security.audit.net.dynamic-httptrace-clienttrace.dynamic-httptrace-clienttrace"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found a formatted template string passed to 'template.HTML()'. 'template.HTML()' does not escape contents. Be absolutely sure there is no user-controlled data in this template. If user data can reach this template, you may have a XSS vulnerability."
              },
              "help": {
                "markdown": "Found a formatted template string passed to 'template.HTML()'. 'template.HTML()' does not escape contents. Be absolutely sure there is no user-controlled data in this template. If user data can reach this template, you may have a XSS vulnerability.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://golang.org/pkg/html/template/#HTML](https://golang.org/pkg/html/template/#HTML)\n",
                "text": "Found a formatted template string passed to 'template.HTML()'. 'template.HTML()' does not escape contents. Be absolutely sure there is no user-controlled data in this template. If user data can reach this template, you may have a XSS vulnerability."
              },
              "id": "codacy.tools-configs.go.lang.security.audit.net.formatted-template-string.formatted-template-string",
              "name": "codacy.tools-configs.go.lang.security.audit.net.formatted-template-string.formatted-template-string",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.lang.security.audit.net.formatted-template-string.formatted-template-string"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected usage of 'http.FileServer' as handler: this allows directory listing and an attacker could navigate through directories looking for sensitive files. Be sure to disable directory listing or restrict access to specific directories/files."
              },
              "help": {
                "markdown": "Detected usage of 'http.FileServer' as handler: this allows directory listing and an attacker could navigate through directories looking for sensitive files. Be sure to disable directory listing or restrict access to specific directories/files.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://github.com/OWASP/Go-SCP](https://github.com/OWASP/Go-SCP)\n - [https://cwe.mitre.org/data/definitions/548.html](https://cwe.mitre.org/data/definitions/548.html)\n",
                "text": "Detected usage of 'http.FileServer' as handler: this allows directory listing and an attacker could navigate through directories looking for sensitive files. Be sure to disable directory listing or restrict access to specific directories/files."
              },
              "id": "codacy.tools-configs.go.lang.security.audit.net.fs-directory-listing.fs-directory-listing",
              "name": "codacy.tools-configs.go.lang.security.audit.net.fs-directory-listing.fs-directory-listing",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-548: Exposure of Information Through Directory Listing",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "OWASP-A06:2017 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.lang.security.audit.net.fs-directory-listing.fs-directory-listing"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found an HTTP server without TLS. Use 'http.ListenAndServeTLS' instead. See https://golang.org/pkg/net/http/#ListenAndServeTLS for more information."
              },
              "help": {
                "markdown": "Found an HTTP server without TLS. Use 'http.ListenAndServeTLS' instead. See https://golang.org/pkg/net/http/#ListenAndServeTLS for more information.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://golang.org/pkg/net/http/#ListenAndServeTLS](https://golang.org/pkg/net/http/#ListenAndServeTLS)\n",
                "text": "Found an HTTP server without TLS. Use 'http.ListenAndServeTLS' instead. See https://golang.org/pkg/net/http/#ListenAndServeTLS for more information."
              },
              "id": "codacy.tools-configs.go.lang.security.audit.net.use-tls.use-tls",
              "name": "codacy.tools-configs.go.lang.security.audit.net.use-tls.use-tls",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.lang.security.audit.net.use-tls.use-tls"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found data going from url query parameters into formatted data written to ResponseWriter. This could be XSS and should not be done. If you must do this, ensure your data is sanitized or escaped."
              },
              "help": {
                "markdown": "Found data going from url query parameters into formatted data written to ResponseWriter. This could be XSS and should not be done. If you must do this, ensure your data is sanitized or escaped.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
                "text": "Found data going from url query parameters into formatted data written to ResponseWriter. This could be XSS and should not be done. If you must do this, ensure your data is sanitized or escaped."
              },
              "id": "codacy.tools-configs.go.lang.security.audit.net.wip-xss-using-responsewriter-and-printf.wip-xss-using-responsewriter-and-printf",
              "name": "codacy.tools-configs.go.lang.security.audit.net.wip-xss-using-responsewriter-and-printf.wip-xss-using-responsewriter-and-printf",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.lang.security.audit.net.wip-xss-using-responsewriter-and-printf.wip-xss-using-responsewriter-and-printf"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "`Clean` is not intended to sanitize against path traversal attacks. This function is for finding the shortest path name equivalent to the given input. Using `Clean` to sanitize file reads may expose this application to path traversal attacks, where an attacker could access arbitrary files on the server. To fix this easily, write this: `filepath.FromSlash(path.Clean(\"/\"+strings.Trim(req.URL.Path, \"/\")))` However, a better solution is using the `SecureJoin` function in the package `filepath-securejoin`. See https://pkg.go.dev/github.com/cyphar/filepath-securejoin#section-readme."
              },
              "help": {
                "markdown": "`Clean` is not intended to sanitize against path traversal attacks. This function is for finding the shortest path name equivalent to the given input. Using `Clean` to sanitize file reads may expose this application to path traversal attacks, where an attacker could access arbitrary files on the server. To fix this easily, write this: `filepath.FromSlash(path.Clean(\"/\"+strings.Trim(req.URL.Path, \"/\")))` However, a better solution is using the `SecureJoin` function in the package `filepath-securejoin`. See https://pkg.go.dev/github.com/cyphar/filepath-securejoin#section-readme.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://pkg.go.dev/path#Clean](https://pkg.go.dev/path#Clean)\n - [http://technosophos.com/2016/03/31/go-quickly-cleaning-filepaths.html](http://technosophos.com/2016/03/31/go-quickly-cleaning-filepaths.html)\n - [https://labs.detectify.com/2021/12/15/zero-day-path-traversal-grafana/](https://labs.detectify.com/2021/12/15/zero-day-path-traversal-grafana/)\n - [https://dzx.cz/2021/04/02/go_path_traversal/](https://dzx.cz/2021/04/02/go_path_traversal/)\n - [https://pkg.go.dev/github.com/cyphar/filepath-securejoin#section-readme](https://pkg.go.dev/github.com/cyphar/filepath-securejoin#section-readme)\n",
                "text": "`Clean` is not intended to sanitize against path traversal attacks. This function is for finding the shortest path name equivalent to the given input. Using `Clean` to sanitize file reads may expose this application to path traversal attacks, where an attacker could access arbitrary files on the server. To fix this easily, write this: `filepath.FromSlash(path.Clean(\"/\"+strings.Trim(req.URL.Path, \"/\")))` However, a better solution is using the `SecureJoin` function in the package `filepath-securejoin`. See https://pkg.go.dev/github.com/cyphar/filepath-securejoin#section-readme."
              },
              "id": "codacy.tools-configs.go.lang.security.filepath-clean-misuse.filepath-clean-misuse",
              "name": "codacy.tools-configs.go.lang.security.filepath-clean-misuse.filepath-clean-misuse",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "OWASP-A05:2017 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.lang.security.filepath-clean-misuse.filepath-clean-misuse"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "An HTTP redirect was found to be crafted from user-input `$REQUEST`. This can lead to open redirect vulnerabilities, potentially allowing attackers to redirect users to malicious web sites. It is recommend where possible to not allow user-input to craft the redirect URL. When user-input is necessary to craft the request, it is recommended to follow OWASP best practices to restrict the URL to domains in an allowlist."
              },
              "help": {
                "markdown": "An HTTP redirect was found to be crafted from user-input `$REQUEST`. This can lead to open redirect vulnerabilities, potentially allowing attackers to redirect users to malicious web sites. It is recommend where possible to not allow user-input to craft the redirect URL. When user-input is necessary to craft the request, it is recommended to follow OWASP best practices to restrict the URL to domains in an allowlist.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://knowledge-base.secureflag.com/vulnerabilities/unvalidated_redirects___forwards/open_redirect_go_lang.html](https://knowledge-base.secureflag.com/vulnerabilities/unvalidated_redirects___forwards/open_redirect_go_lang.html)\n",
                "text": "An HTTP redirect was found to be crafted from user-input `$REQUEST`. This can lead to open redirect vulnerabilities, potentially allowing attackers to redirect users to malicious web sites. It is recommend where possible to not allow user-input to craft the redirect URL. When user-input is necessary to craft the request, it is recommended to follow OWASP best practices to restrict the URL to domains in an allowlist."
              },
              "id": "codacy.tools-configs.go.lang.security.injection.open-redirect.open-redirect",
              "name": "codacy.tools-configs.go.lang.security.injection.open-redirect.open-redirect",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')",
                  "HIGH CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.lang.security.injection.open-redirect.open-redirect"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. Use the `html/template` package which will safely render HTML instead, or inspect that the HTML is rendered safely."
              },
              "help": {
                "markdown": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. Use the `html/template` package which will safely render HTML instead, or inspect that the HTML is rendered safely.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/](https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/)\n",
                "text": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. Use the `html/template` package which will safely render HTML instead, or inspect that the HTML is rendered safely."
              },
              "id": "codacy.tools-configs.go.lang.security.injection.raw-html-format.raw-html-format",
              "name": "codacy.tools-configs.go.lang.security.injection.raw-html-format.raw-html-format",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.lang.security.injection.raw-html-format.raw-html-format"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`db.Query(\"SELECT * FROM t WHERE id = ?\", id)`) or a safe library."
              },
              "help": {
                "markdown": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`db.Query(\"SELECT * FROM t WHERE id = ?\", id)`) or a safe library.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://golang.org/doc/database/sql-injection](https://golang.org/doc/database/sql-injection)\n - [https://www.stackhawk.com/blog/golang-sql-injection-guide-examples-and-prevention/](https://www.stackhawk.com/blog/golang-sql-injection-guide-examples-and-prevention/)\n",
                "text": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`db.Query(\"SELECT * FROM t WHERE id = ?\", id)`) or a safe library."
              },
              "id": "codacy.tools-configs.go.lang.security.injection.tainted-sql-string.tainted-sql-string",
              "name": "codacy.tools-configs.go.lang.security.injection.tainted-sql-string.tainted-sql-string",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "HIGH CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.lang.security.injection.tainted-sql-string.tainted-sql-string"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "A request was found to be crafted from user-input `$REQUEST`. This can lead to Server-Side Request Forgery (SSRF) vulnerabilities, potentially exposing sensitive data. It is recommend where possible to not allow user-input to craft the base request, but to be treated as part of the path or query parameter. When user-input is necessary to craft the request, it is recommended to follow OWASP best practices to prevent abuse, including using an allowlist."
              },
              "help": {
                "markdown": "A request was found to be crafted from user-input `$REQUEST`. This can lead to Server-Side Request Forgery (SSRF) vulnerabilities, potentially exposing sensitive data. It is recommend where possible to not allow user-input to craft the base request, but to be treated as part of the path or query parameter. When user-input is necessary to craft the request, it is recommended to follow OWASP best practices to prevent abuse, including using an allowlist.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://goteleport.com/blog/ssrf-attacks/](https://goteleport.com/blog/ssrf-attacks/)\n",
                "text": "A request was found to be crafted from user-input `$REQUEST`. This can lead to Server-Side Request Forgery (SSRF) vulnerabilities, potentially exposing sensitive data. It is recommend where possible to not allow user-input to craft the base request, but to be treated as part of the path or query parameter. When user-input is necessary to craft the request, it is recommended to follow OWASP best practices to prevent abuse, including using an allowlist."
              },
              "id": "codacy.tools-configs.go.lang.security.injection.tainted-url-host.tainted-url-host",
              "name": "codacy.tools-configs.go.lang.security.injection.tainted-url-host.tainted-url-host",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-918: Server-Side Request Forgery (SSRF)",
                  "HIGH CONFIDENCE",
                  "OWASP-A10:2021 - Server-Side Request Forgery (SSRF)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.lang.security.injection.tainted-url-host.tainted-url-host"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "A server-side template injection occurs when an attacker is able to use native template syntax to inject a malicious payload into a template, which is then executed server-side. When using \"html/template\" always check that user inputs are validated and sanitized before included within the template."
              },
              "help": {
                "markdown": "A server-side template injection occurs when an attacker is able to use native template syntax to inject a malicious payload into a template, which is then executed server-side. When using \"html/template\" always check that user inputs are validated and sanitized before included within the template.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.onsecurity.io/blog/go-ssti-method-research/](https://www.onsecurity.io/blog/go-ssti-method-research/)\n - [http://blog.takemyhand.xyz/2020/05/ssti-breaking-gos-template-engine-to.html](http://blog.takemyhand.xyz/2020/05/ssti-breaking-gos-template-engine-to.html)\n",
                "text": "A server-side template injection occurs when an attacker is able to use native template syntax to inject a malicious payload into a template, which is then executed server-side. When using \"html/template\" always check that user inputs are validated and sanitized before included within the template."
              },
              "id": "codacy.tools-configs.go.template.security.ssti.go-ssti",
              "name": "codacy.tools-configs.go.template.security.ssti.go-ssti",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-1336: Improper Neutralization of Special Elements Used in a Template Engine",
                  "MEDIUM CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.go.template.security.ssti.go-ssti"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The application exports an activity. Any application on the device can launch the exported activity which may compromise the integrity of your application or its data.  Ensure that any exported activities do not have privileged access to your application's control plane."
              },
              "help": {
                "markdown": "The application exports an activity. Any application on the device can launch the exported activity which may compromise the integrity of your application or its data.  Ensure that any exported activities do not have privileged access to your application's control plane.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cwe.mitre.org/data/definitions/926.html](https://cwe.mitre.org/data/definitions/926.html)\n",
                "text": "The application exports an activity. Any application on the device can launch the exported activity which may compromise the integrity of your application or its data.  Ensure that any exported activities do not have privileged access to your application's control plane."
              },
              "id": "codacy.tools-configs.java.android.security.exported_activity.exported_activity",
              "name": "codacy.tools-configs.java.android.security.exported_activity.exported_activity",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-926: Improper Export of Android Application Components",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A5:2021 Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.android.security.exported_activity.exported_activity"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."
              },
              "help": {
                "markdown": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/www-community/attacks/SQL_Injection](https://owasp.org/www-community/attacks/SQL_Injection)\n",
                "text": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."
              },
              "id": "codacy.tools-configs.java.aws-lambda.security.tainted-sql-string.tainted-sql-string",
              "name": "codacy.tools-configs.java.aws-lambda.security.tainted-sql-string.tainted-sql-string",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.aws-lambda.security.tainted-sql-string.tainted-sql-string"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."
              },
              "help": {
                "markdown": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
                "text": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."
              },
              "id": "codacy.tools-configs.java.aws-lambda.security.tainted-sqli.tainted-sqli",
              "name": "codacy.tools-configs.java.aws-lambda.security.tainted-sqli.tainted-sqli",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.aws-lambda.security.tainted-sqli.tainted-sqli"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Call '.verify()' before using the token."
              },
              "help": {
                "markdown": "Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Call '.verify()' before using the token.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/)\n - [https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures](https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures)\n",
                "text": "Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Call '.verify()' before using the token."
              },
              "helpUri": "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/",
              "id": "codacy.tools-configs.java.java-jwt.security.audit.jwt-decode-without-verify.java-jwt-decode-without-verify",
              "name": "codacy.tools-configs.java.java-jwt.security.audit.jwt-decode-without-verify.java-jwt-decode-without-verify",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-345: Insufficient Verification of Data Authenticity",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A08:2021 - Software and Data Integrity Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.java-jwt.security.audit.jwt-decode-without-verify.java-jwt-decode-without-verify"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
              },
              "help": {
                "markdown": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n",
                "text": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
              },
              "id": "codacy.tools-configs.java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret",
              "name": "codacy.tools-configs.java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-798: Use of Hard-coded Credentials",
                  "HIGH CONFIDENCE",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."
              },
              "help": {
                "markdown": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."
              },
              "helpUri": "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/",
              "id": "codacy.tools-configs.java.java-jwt.security.jwt-none-alg.java-jwt-none-alg",
              "name": "codacy.tools-configs.java.java-jwt.security.jwt-none-alg.java-jwt-none-alg",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.java-jwt.security.jwt-none-alg.java-jwt-none-alg"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."
              },
              "help": {
                "markdown": "Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://find-sec-bugs.github.io/bugs.htm#PATH_TRAVERSAL_IN)\n - [https://www.owasp.org/index.php/Path_Traversal](https://www.owasp.org/index.php/Path_Traversal)\n",
                "text": "Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."
              },
              "helpUri": "https://find-sec-bugs.github.io/bugs.htm#PATH_TRAVERSAL_IN",
              "id": "codacy.tools-configs.java.jax-rs.security.jax-rs-path-traversal.jax-rs-path-traversal",
              "name": "codacy.tools-configs.java.jax-rs.security.jax-rs-path-traversal.jax-rs-path-traversal",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "OWASP-A05:2017 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.jax-rs.security.jax-rs-path-traversal.jax-rs-path-traversal"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "In $METHOD, $X is used to construct a SQL query via string concatenation."
              },
              "help": {
                "markdown": "In $METHOD, $X is used to construct a SQL query via string concatenation.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
                "text": "In $METHOD, $X is used to construct a SQL query via string concatenation."
              },
              "id": "codacy.tools-configs.java.jboss.security.session_sqli.find-sql-string-concatenation",
              "name": "codacy.tools-configs.java.jboss.security.session_sqli.find-sql-string-concatenation",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.jboss.security.session_sqli.find-sql-string-concatenation"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Using less than 128 bits for Blowfish is considered insecure. Use 128 bits or more, or switch to use AES instead."
              },
              "help": {
                "markdown": "Using less than 128 bits for Blowfish is considered insecure. Use 128 bits or more, or switch to use AES instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://find-sec-bugs.github.io/bugs.htm#BLOWFISH_KEY_SIZE)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Using less than 128 bits for Blowfish is considered insecure. Use 128 bits or more, or switch to use AES instead."
              },
              "helpUri": "https://find-sec-bugs.github.io/bugs.htm#BLOWFISH_KEY_SIZE",
              "id": "codacy.tools-configs.java.lang.security.audit.blowfish-insufficient-key-size.blowfish-insufficient-key-size",
              "name": "codacy.tools-configs.java.lang.security.audit.blowfish-insufficient-key-size.blowfish-insufficient-key-size",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.blowfish-insufficient-key-size.blowfish-insufficient-key-size"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A malicious actor could discern the difference between plaintext with valid or invalid padding. Further, CBC mode does not include any integrity checks. Use 'AES/GCM/NoPadding' instead."
              },
              "help": {
                "markdown": "Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A malicious actor could discern the difference between plaintext with valid or invalid padding. Further, CBC mode does not include any integrity checks. Use 'AES/GCM/NoPadding' instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://find-sec-bugs.github.io/bugs.htm#PADDING_ORACLE)\n - [https://capec.mitre.org/data/definitions/463.html](https://capec.mitre.org/data/definitions/463.html)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#cipher-modes](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#cipher-modes)\n - [https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY](https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY)\n",
                "text": "Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A malicious actor could discern the difference between plaintext with valid or invalid padding. Further, CBC mode does not include any integrity checks. Use 'AES/GCM/NoPadding' instead."
              },
              "helpUri": "https://find-sec-bugs.github.io/bugs.htm#PADDING_ORACLE",
              "id": "codacy.tools-configs.java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle",
              "name": "codacy.tools-configs.java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content."
              },
              "help": {
                "markdown": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://find-sec-bugs.github.io/bugs.htm#CRLF_INJECTION_LOGS)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
                "text": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content."
              },
              "helpUri": "https://find-sec-bugs.github.io/bugs.htm#CRLF_INJECTION_LOGS",
              "id": "codacy.tools-configs.java.lang.security.audit.crlf-injection-logs.crlf-injection-logs",
              "name": "codacy.tools-configs.java.lang.security.audit.crlf-injection-logs.crlf-injection-logs",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.crlf-injection-logs.crlf-injection-logs"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."
              },
              "help": {
                "markdown": "DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://find-sec-bugs.github.io/bugs.htm#DES_USAGE)\n - [https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard](https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms)\n",
                "text": "DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information."
              },
              "helpUri": "https://find-sec-bugs.github.io/bugs.htm#DES_USAGE",
              "id": "codacy.tools-configs.java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated",
              "name": "codacy.tools-configs.java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."
              },
              "help": {
                "markdown": "Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://find-sec-bugs.github.io/bugs.htm#TDES_USAGE)\n - [https://csrc.nist.gov/News/2017/Update-to-Current-Use-and-Deprecation-of-TDEA](https://csrc.nist.gov/News/2017/Update-to-Current-Use-and-Deprecation-of-TDEA)\n",
                "text": "Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES."
              },
              "helpUri": "https://find-sec-bugs.github.io/bugs.htm#TDES_USAGE",
              "id": "codacy.tools-configs.java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated",
              "name": "codacy.tools-configs.java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY."
              },
              "help": {
                "markdown": "Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://find-sec-bugs.github.io/bugs.htm#ECB_MODE)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY."
              },
              "helpUri": "https://find-sec-bugs.github.io/bugs.htm#ECB_MODE",
              "id": "codacy.tools-configs.java.lang.security.audit.crypto.ecb-cipher.ecb-cipher",
              "name": "codacy.tools-configs.java.lang.security.audit.crypto.ecb-cipher.ecb-cipher",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.crypto.ecb-cipher.ecb-cipher"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "GCM IV/nonce is reused: encryption can be totally useless"
              },
              "help": {
                "markdown": "GCM IV/nonce is reused: encryption can be totally useless\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://www.youtube.com/watch?v=r1awgAl90wM)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "GCM IV/nonce is reused: encryption can be totally useless"
              },
              "helpUri": "https://www.youtube.com/watch?v=r1awgAl90wM",
              "id": "codacy.tools-configs.java.lang.security.audit.crypto.gcm-nonce-reuse.gcm-nonce-reuse",
              "name": "codacy.tools-configs.java.lang.security.audit.crypto.gcm-nonce-reuse.gcm-nonce-reuse",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-323: Reusing a Nonce, Key Pair in Encryption",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.crypto.gcm-nonce-reuse.gcm-nonce-reuse"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."
              },
              "help": {
                "markdown": "NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://find-sec-bugs.github.io/bugs.htm#NULL_CIPHER)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."
              },
              "helpUri": "https://find-sec-bugs.github.io/bugs.htm#NULL_CIPHER",
              "id": "codacy.tools-configs.java.lang.security.audit.crypto.no-null-cipher.no-null-cipher",
              "name": "codacy.tools-configs.java.lang.security.audit.crypto.no-null-cipher.no-null-cipher",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.crypto.no-null-cipher.no-null-cipher"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Initialization Vectors (IVs) for block ciphers should be randomly generated each time they are used. Using a static IV means the same plaintext encrypts to the same ciphertext every time, weakening the strength of the encryption."
              },
              "help": {
                "markdown": "Initialization Vectors (IVs) for block ciphers should be randomly generated each time they are used. Using a static IV means the same plaintext encrypts to the same ciphertext every time, weakening the strength of the encryption.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://find-sec-bugs.github.io/bugs.htm#STATIC_IV)\n - [https://cwe.mitre.org/data/definitions/329.html](https://cwe.mitre.org/data/definitions/329.html)\n",
                "text": "Initialization Vectors (IVs) for block ciphers should be randomly generated each time they are used. Using a static IV means the same plaintext encrypts to the same ciphertext every time, weakening the strength of the encryption."
              },
              "helpUri": "https://find-sec-bugs.github.io/bugs.htm#STATIC_IV",
              "id": "codacy.tools-configs.java.lang.security.audit.crypto.no-static-initialization-vector.no-static-initialization-vector",
              "name": "codacy.tools-configs.java.lang.security.audit.crypto.no-static-initialization-vector.no-static-initialization-vector",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-329: Generation of Predictable IV with CBC Mode",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.crypto.no-static-initialization-vector.no-static-initialization-vector"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Using RSA without OAEP mode weakens the encryption."
              },
              "help": {
                "markdown": "Using RSA without OAEP mode weakens the encryption.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://find-sec-bugs.github.io/bugs.htm#RSA_NO_PADDING)\n - [https://rdist.root.org/2009/10/06/why-rsa-encryption-padding-is-critical/](https://rdist.root.org/2009/10/06/why-rsa-encryption-padding-is-critical/)\n",
                "text": "Using RSA without OAEP mode weakens the encryption."
              },
              "helpUri": "https://find-sec-bugs.github.io/bugs.htm#RSA_NO_PADDING",
              "id": "codacy.tools-configs.java.lang.security.audit.crypto.rsa-no-padding.rsa-no-padding",
              "name": "codacy.tools-configs.java.lang.security.audit.crypto.rsa-no-padding.rsa-no-padding",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.crypto.rsa-no-padding.rsa-no-padding"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
              },
              "help": {
                "markdown": "Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://find-sec-bugs.github.io/bugs.htm#UNENCRYPTED_SOCKET)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
              },
              "helpUri": "https://find-sec-bugs.github.io/bugs.htm#UNENCRYPTED_SOCKET",
              "id": "codacy.tools-configs.java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket",
              "name": "codacy.tools-configs.java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Use of AES with ECB mode detected. ECB doesn't provide message confidentiality and  is not semantically secure so should not be used. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."
              },
              "help": {
                "markdown": "Use of AES with ECB mode detected. ECB doesn't provide message confidentiality and  is not semantically secure so should not be used. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n - [https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html](https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html)\n",
                "text": "Use of AES with ECB mode detected. ECB doesn't provide message confidentiality and  is not semantically secure so should not be used. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."
              },
              "id": "codacy.tools-configs.java.lang.security.audit.crypto.use-of-aes-ecb.use-of-aes-ecb",
              "name": "codacy.tools-configs.java.lang.security.audit.crypto.use-of-aes-ecb.use-of-aes-ecb",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.crypto.use-of-aes-ecb.use-of-aes-ecb"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Use of Blowfish was detected. Blowfish uses a 64-bit block size that  makes it vulnerable to birthday attacks, and is therefore considered non-compliant.  Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."
              },
              "help": {
                "markdown": "Use of Blowfish was detected. Blowfish uses a 64-bit block size that  makes it vulnerable to birthday attacks, and is therefore considered non-compliant.  Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n - [https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html](https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html)\n",
                "text": "Use of Blowfish was detected. Blowfish uses a 64-bit block size that  makes it vulnerable to birthday attacks, and is therefore considered non-compliant.  Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."
              },
              "id": "codacy.tools-configs.java.lang.security.audit.crypto.use-of-blowfish.use-of-blowfish",
              "name": "codacy.tools-configs.java.lang.security.audit.crypto.use-of-blowfish.use-of-blowfish",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.crypto.use-of-blowfish.use-of-blowfish"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Use of AES with no settings detected. By default, java.crypto.Cipher uses ECB mode. ECB doesn't  provide message confidentiality and is not semantically secure so should not be used. Instead, use a strong, secure cipher: java.crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."
              },
              "help": {
                "markdown": "Use of AES with no settings detected. By default, java.crypto.Cipher uses ECB mode. ECB doesn't  provide message confidentiality and is not semantically secure so should not be used. Instead, use a strong, secure cipher: java.crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n - [https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html](https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html)\n",
                "text": "Use of AES with no settings detected. By default, java.crypto.Cipher uses ECB mode. ECB doesn't  provide message confidentiality and is not semantically secure so should not be used. Instead, use a strong, secure cipher: java.crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."
              },
              "id": "codacy.tools-configs.java.lang.security.audit.crypto.use-of-default-aes.use-of-default-aes",
              "name": "codacy.tools-configs.java.lang.security.audit.crypto.use-of-default-aes.use-of-default-aes",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.crypto.use-of-default-aes.use-of-default-aes"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."
              },
              "help": {
                "markdown": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_MD5)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."
              },
              "helpUri": "https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_MD5",
              "id": "codacy.tools-configs.java.lang.security.audit.crypto.use-of-md5-digest-utils.use-of-md5-digest-utils",
              "name": "codacy.tools-configs.java.lang.security.audit.crypto.use-of-md5-digest-utils.use-of-md5-digest-utils",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-328: Use of Weak Hash",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.crypto.use-of-md5-digest-utils.use-of-md5-digest-utils"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."
              },
              "help": {
                "markdown": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_MD5)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead."
              },
              "helpUri": "https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_MD5",
              "id": "codacy.tools-configs.java.lang.security.audit.crypto.use-of-md5.use-of-md5",
              "name": "codacy.tools-configs.java.lang.security.audit.crypto.use-of-md5.use-of-md5",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-328: Use of Weak Hash",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.crypto.use-of-md5.use-of-md5"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Use of RC2 was detected. RC2 is vulnerable to related-key attacks, and is therefore considered non-compliant. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."
              },
              "help": {
                "markdown": "Use of RC2 was detected. RC2 is vulnerable to related-key attacks, and is therefore considered non-compliant. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n - [https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html](https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html)\n",
                "text": "Use of RC2 was detected. RC2 is vulnerable to related-key attacks, and is therefore considered non-compliant. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."
              },
              "id": "codacy.tools-configs.java.lang.security.audit.crypto.use-of-rc2.use-of-rc2",
              "name": "codacy.tools-configs.java.lang.security.audit.crypto.use-of-rc2.use-of-rc2",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.crypto.use-of-rc2.use-of-rc2"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Use of RC4 was detected. RC4 is vulnerable to several attacks, including stream cipher attacks and bit flipping attacks. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."
              },
              "help": {
                "markdown": "Use of RC4 was detected. RC4 is vulnerable to several attacks, including stream cipher attacks and bit flipping attacks. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n - [https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html](https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html)\n",
                "text": "Use of RC4 was detected. RC4 is vulnerable to several attacks, including stream cipher attacks and bit flipping attacks. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."
              },
              "id": "codacy.tools-configs.java.lang.security.audit.crypto.use-of-rc4.use-of-rc4",
              "name": "codacy.tools-configs.java.lang.security.audit.crypto.use-of-rc4.use-of-rc4",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.crypto.use-of-rc4.use-of-rc4"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."
              },
              "help": {
                "markdown": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_SHA1)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications."
              },
              "helpUri": "https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_SHA1",
              "id": "codacy.tools-configs.java.lang.security.audit.crypto.use-of-sha1.use-of-sha1",
              "name": "codacy.tools-configs.java.lang.security.audit.crypto.use-of-sha1.use-of-sha1",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-328: Use of Weak Hash",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.crypto.use-of-sha1.use-of-sha1"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "RSA keys should be at least 2048 bits based on NIST recommendation."
              },
              "help": {
                "markdown": "RSA keys should be at least 2048 bits based on NIST recommendation.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://find-sec-bugs.github.io/bugs.htm#RSA_KEY_SIZE)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms)\n",
                "text": "RSA keys should be at least 2048 bits based on NIST recommendation."
              },
              "helpUri": "https://find-sec-bugs.github.io/bugs.htm#RSA_KEY_SIZE",
              "id": "codacy.tools-configs.java.lang.security.audit.crypto.weak-rsa.use-of-weak-rsa-key",
              "name": "codacy.tools-configs.java.lang.security.audit.crypto.weak-rsa.use-of-weak-rsa-key",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.crypto.weak-rsa.use-of-weak-rsa-key"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."
              },
              "help": {
                "markdown": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION)\n - [https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n - [https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps](https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps)\n - [https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement](https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement)\n",
                "text": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."
              },
              "helpUri": "https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION",
              "id": "codacy.tools-configs.java.lang.security.audit.formatted-sql-string.formatted-sql-string",
              "name": "codacy.tools-configs.java.lang.security.audit.formatted-sql-string.formatted-sql-string",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.formatted-sql-string.formatted-sql-string"
              }
            },
            {
              "defaultConfiguration": {
                "level": "note"
              },
              "fullDescription": {
                "text": "Older Java application servers are vulnerable to HTTP response splitting, which may occur if an HTTP request can be injected with CRLF characters. This finding is reported for completeness; it is recommended to ensure your environment is not affected by testing this yourself."
              },
              "help": {
                "markdown": "Older Java application servers are vulnerable to HTTP response splitting, which may occur if an HTTP request can be injected with CRLF characters. This finding is reported for completeness; it is recommended to ensure your environment is not affected by testing this yourself.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://find-sec-bugs.github.io/bugs.htm#HTTP_RESPONSE_SPLITTING)\n - [https://www.owasp.org/index.php/HTTP_Response_Splitting](https://www.owasp.org/index.php/HTTP_Response_Splitting)\n",
                "text": "Older Java application servers are vulnerable to HTTP response splitting, which may occur if an HTTP request can be injected with CRLF characters. This finding is reported for completeness; it is recommended to ensure your environment is not affected by testing this yourself."
              },
              "helpUri": "https://find-sec-bugs.github.io/bugs.htm#HTTP_RESPONSE_SPLITTING",
              "id": "codacy.tools-configs.java.lang.security.audit.http-response-splitting.http-response-splitting",
              "name": "codacy.tools-configs.java.lang.security.audit.http-response-splitting.http-response-splitting",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.http-response-splitting.http-response-splitting"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Insecure SMTP connection detected. This connection will trust any SSL certificate. Enable certificate verification by setting 'email.setSSLCheckServerIdentity(true)'."
              },
              "help": {
                "markdown": "Insecure SMTP connection detected. This connection will trust any SSL certificate. Enable certificate verification by setting 'email.setSSLCheckServerIdentity(true)'.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://find-sec-bugs.github.io/bugs.htm#INSECURE_SMTP_SSL)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n",
                "text": "Insecure SMTP connection detected. This connection will trust any SSL certificate. Enable certificate verification by setting 'email.setSSLCheckServerIdentity(true)'."
              },
              "helpUri": "https://find-sec-bugs.github.io/bugs.htm#INSECURE_SMTP_SSL",
              "id": "codacy.tools-configs.java.lang.security.audit.insecure-smtp-connection.insecure-smtp-connection",
              "name": "codacy.tools-configs.java.lang.security.audit.insecure-smtp-connection.insecure-smtp-connection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-297: Improper Validation of Certificate with Host Mismatch",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.insecure-smtp-connection.insecure-smtp-connection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as PBKDF2 or bcrypt. You can use `javax.crypto.SecretKeyFactory` with `SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\")` or, if using Spring, `org.springframework.security.crypto.bcrypt`."
              },
              "help": {
                "markdown": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as PBKDF2 or bcrypt. You can use `javax.crypto.SecretKeyFactory` with `SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\")` or, if using Spring, `org.springframework.security.crypto.bcrypt`.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html](https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html)\n - [https://github.com/returntocorp/semgrep-rules/issues/1609](https://github.com/returntocorp/semgrep-rules/issues/1609)\n - [https://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#SecretKeyFactory](https://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#SecretKeyFactory)\n - [https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoder.html](https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoder.html)\n",
                "text": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as PBKDF2 or bcrypt. You can use `javax.crypto.SecretKeyFactory` with `SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\")` or, if using Spring, `org.springframework.security.crypto.bcrypt`."
              },
              "id": "codacy.tools-configs.java.lang.security.audit.md5-used-as-password.md5-used-as-password",
              "name": "codacy.tools-configs.java.lang.security.audit.md5-used-as-password.md5-used-as-password",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.md5-used-as-password.md5-used-as-password"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."
              },
              "help": {
                "markdown": "Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n - [https://owasp.org/www-community/attacks/SQL_Injection](https://owasp.org/www-community/attacks/SQL_Injection)\n",
                "text": "Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead."
              },
              "id": "codacy.tools-configs.java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request",
              "name": "codacy.tools-configs.java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "HIGH CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."
              },
              "help": {
                "markdown": "Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
                "text": "Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values."
              },
              "id": "codacy.tools-configs.java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request",
              "name": "codacy.tools-configs.java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected input from a HTTPServletRequest going into the environment variables of an 'exec' command.  Instead, call the command with user-supplied arguments by using the overloaded method with one String array as the argument. `exec({\"command\", \"arg1\", \"arg2\"})`."
              },
              "help": {
                "markdown": "Detected input from a HTTPServletRequest going into the environment variables of an 'exec' command.  Instead, call the command with user-supplied arguments by using the overloaded method with one String array as the argument. `exec({\"command\", \"arg1\", \"arg2\"})`.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
                "text": "Detected input from a HTTPServletRequest going into the environment variables of an 'exec' command.  Instead, call the command with user-supplied arguments by using the overloaded method with one String array as the argument. `exec({\"command\", \"arg1\", \"arg2\"})`."
              },
              "id": "codacy.tools-configs.java.lang.security.audit.tainted-env-from-http-request.tainted-env-from-http-request",
              "name": "codacy.tools-configs.java.lang.security.audit.tainted-env-from-http-request.tainted-env-from-http-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-454: External Initialization of Trusted Variables or Data Stores",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.tainted-env-from-http-request.tainted-env-from-http-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."
              },
              "help": {
                "markdown": "Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://sensei.securecodewarrior.com/recipes/scw%3Ajava%3ALDAP-injection](https://sensei.securecodewarrior.com/recipes/scw%3Ajava%3ALDAP-injection)\n",
                "text": "Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data."
              },
              "id": "codacy.tools-configs.java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request",
              "name": "codacy.tools-configs.java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."
              },
              "help": {
                "markdown": "Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n",
                "text": "Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."
              },
              "id": "codacy.tools-configs.java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request",
              "name": "codacy.tools-configs.java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-501: Trust Boundary Violation",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."
              },
              "help": {
                "markdown": "Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
                "text": "Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can."
              },
              "id": "codacy.tools-configs.java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request",
              "name": "codacy.tools-configs.java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Application redirects to a destination URL specified by a user-supplied parameter that is not validated. This could direct users to malicious locations. Consider using an allowlist to validate URLs."
              },
              "help": {
                "markdown": "Application redirects to a destination URL specified by a user-supplied parameter that is not validated. This could direct users to malicious locations. Consider using an allowlist to validate URLs.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://find-sec-bugs.github.io/bugs.htm#UNVALIDATED_REDIRECT)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n",
                "text": "Application redirects to a destination URL specified by a user-supplied parameter that is not validated. This could direct users to malicious locations. Consider using an allowlist to validate URLs."
              },
              "helpUri": "https://find-sec-bugs.github.io/bugs.htm#UNVALIDATED_REDIRECT",
              "id": "codacy.tools-configs.java.lang.security.audit.unvalidated-redirect.unvalidated-redirect",
              "name": "codacy.tools-configs.java.lang.security.audit.unvalidated-redirect.unvalidated-redirect",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.unvalidated-redirect.unvalidated-redirect"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(\"TLSv1.2\") for the best security."
              },
              "help": {
                "markdown": "An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(\"TLSv1.2\") for the best security.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://tools.ietf.org/html/rfc7568](https://tools.ietf.org/html/rfc7568)\n - [https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html](https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html)\n",
                "text": "An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(\"TLSv1.2\") for the best security."
              },
              "id": "codacy.tools-configs.java.lang.security.audit.weak-ssl-context.weak-ssl-context",
              "name": "codacy.tools-configs.java.lang.security.audit.weak-ssl-context.weak-ssl-context",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.weak-ssl-context.weak-ssl-context"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."
              },
              "help": {
                "markdown": "Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServerFaces.html](https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServerFaces.html)\n",
                "text": "Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."
              },
              "id": "codacy.tools-configs.java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer",
              "name": "codacy.tools-configs.java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "DOCTYPE declarations are enabled for $DBFACTORY. Without prohibiting external entity declarations, this is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false."
              },
              "help": {
                "markdown": "DOCTYPE declarations are enabled for $DBFACTORY. Without prohibiting external entity declarations, this is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://blog.sonarsource.com/secure-xml-processor](https://blog.sonarsource.com/secure-xml-processor)\n - [https://xerces.apache.org/xerces2-j/features.html](https://xerces.apache.org/xerces2-j/features.html)\n",
                "text": "DOCTYPE declarations are enabled for $DBFACTORY. Without prohibiting external entity declarations, this is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false."
              },
              "id": "codacy.tools-configs.java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-false.documentbuilderfactory-disallow-doctype-decl-false",
              "name": "codacy.tools-configs.java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-false.documentbuilderfactory-disallow-doctype-decl-false",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-611: Improper Restriction of XML External Entity Reference",
                  "HIGH CONFIDENCE",
                  "OWASP-A04:2017 - XML External Entities (XXE)",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-false.documentbuilderfactory-disallow-doctype-decl-false"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false."
              },
              "help": {
                "markdown": "DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://blog.sonarsource.com/secure-xml-processor](https://blog.sonarsource.com/secure-xml-processor)\n - [https://xerces.apache.org/xerces2-j/features.html](https://xerces.apache.org/xerces2-j/features.html)\n",
                "text": "DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false."
              },
              "id": "codacy.tools-configs.java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing",
              "name": "codacy.tools-configs.java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-611: Improper Restriction of XML External Entity Reference",
                  "HIGH CONFIDENCE",
                  "OWASP-A04:2017 - XML External Entities (XXE)",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "External entities are allowed for $DBFACTORY. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-general-entities\" to false."
              },
              "help": {
                "markdown": "External entities are allowed for $DBFACTORY. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-general-entities\" to false.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://blog.sonarsource.com/secure-xml-processor](https://blog.sonarsource.com/secure-xml-processor)\n",
                "text": "External entities are allowed for $DBFACTORY. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-general-entities\" to false."
              },
              "id": "codacy.tools-configs.java.lang.security.audit.xxe.documentbuilderfactory-external-general-entities-true.documentbuilderfactory-external-general-entities-true",
              "name": "codacy.tools-configs.java.lang.security.audit.xxe.documentbuilderfactory-external-general-entities-true.documentbuilderfactory-external-general-entities-true",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-611: Improper Restriction of XML External Entity Reference",
                  "HIGH CONFIDENCE",
                  "OWASP-A04:2017 - XML External Entities (XXE)",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.xxe.documentbuilderfactory-external-general-entities-true.documentbuilderfactory-external-general-entities-true"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "External entities are allowed for $DBFACTORY. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-parameter-entities\" to false."
              },
              "help": {
                "markdown": "External entities are allowed for $DBFACTORY. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-parameter-entities\" to false.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://blog.sonarsource.com/secure-xml-processor](https://blog.sonarsource.com/secure-xml-processor)\n",
                "text": "External entities are allowed for $DBFACTORY. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-parameter-entities\" to false."
              },
              "id": "codacy.tools-configs.java.lang.security.audit.xxe.documentbuilderfactory-external-parameter-entities-true.documentbuilderfactory-external-parameter-entities-true",
              "name": "codacy.tools-configs.java.lang.security.audit.xxe.documentbuilderfactory-external-parameter-entities-true.documentbuilderfactory-external-parameter-entities-true",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-611: Improper Restriction of XML External Entity Reference",
                  "HIGH CONFIDENCE",
                  "OWASP-A04:2017 - XML External Entities (XXE)",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.xxe.documentbuilderfactory-external-parameter-entities-true.documentbuilderfactory-external-parameter-entities-true"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features `http://xml.org/sax/features/external-general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The previous links are not meant to be clicked. They are the literal config key values that are supposed to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-sheets/java-xxe/#3a-documentbuilderfactory."
              },
              "help": {
                "markdown": "DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features `http://xml.org/sax/features/external-general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The previous links are not meant to be clicked. They are the literal config key values that are supposed to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-sheets/java-xxe/#3a-documentbuilderfactory.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://blog.sonarsource.com/secure-xml-processor](https://blog.sonarsource.com/secure-xml-processor)\n - [https://xerces.apache.org/xerces2-j/features.html](https://xerces.apache.org/xerces2-j/features.html)\n",
                "text": "DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features `http://xml.org/sax/features/external-general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The previous links are not meant to be clicked. They are the literal config key values that are supposed to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-sheets/java-xxe/#3a-documentbuilderfactory."
              },
              "id": "codacy.tools-configs.java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-decl-missing",
              "name": "codacy.tools-configs.java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-decl-missing",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-611: Improper Restriction of XML External Entity Reference",
                  "HIGH CONFIDENCE",
                  "OWASP-A04:2017 - XML External Entities (XXE)",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-decl-missing"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "DOCTYPE declarations are enabled for this TransformerFactory. This is vulnerable to XML external entity attacks. Disable this by setting the attributes \"accessExternalDTD\" and \"accessExternalStylesheet\" to \"\"."
              },
              "help": {
                "markdown": "DOCTYPE declarations are enabled for this TransformerFactory. This is vulnerable to XML external entity attacks. Disable this by setting the attributes \"accessExternalDTD\" and \"accessExternalStylesheet\" to \"\".\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://blog.sonarsource.com/secure-xml-processor](https://blog.sonarsource.com/secure-xml-processor)\n - [https://xerces.apache.org/xerces2-j/features.html](https://xerces.apache.org/xerces2-j/features.html)\n",
                "text": "DOCTYPE declarations are enabled for this TransformerFactory. This is vulnerable to XML external entity attacks. Disable this by setting the attributes \"accessExternalDTD\" and \"accessExternalStylesheet\" to \"\"."
              },
              "id": "codacy.tools-configs.java.lang.security.audit.xxe.transformerfactory-dtds-not-disabled.transformerfactory-dtds-not-disabled",
              "name": "codacy.tools-configs.java.lang.security.audit.xxe.transformerfactory-dtds-not-disabled.transformerfactory-dtds-not-disabled",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-611: Improper Restriction of XML External Entity Reference",
                  "HIGH CONFIDENCE",
                  "OWASP-A04:2017 - XML External Entities (XXE)",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.audit.xxe.transformerfactory-dtds-not-disabled.transformerfactory-dtds-not-disabled"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."
              },
              "help": {
                "markdown": "Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://find-sec-bugs.github.io/bugs.htm#PATH_TRAVERSAL_IN)\n - [https://www.owasp.org/index.php/Path_Traversal](https://www.owasp.org/index.php/Path_Traversal)\n",
                "text": "Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."
              },
              "helpUri": "https://find-sec-bugs.github.io/bugs.htm#PATH_TRAVERSAL_IN",
              "id": "codacy.tools-configs.java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal",
              "name": "codacy.tools-configs.java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "OWASP-A05:2017 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "JMS Object messages depend on Java Serialization for marshalling/unmarshalling of the message payload when ObjectMessage.getObject() is called. Deserialization of untrusted data can lead to security flaws; a remote attacker could via a crafted JMS ObjectMessage to execute arbitrary code with the permissions of the application listening/consuming JMS Messages. In this case, the JMS MessageListener consume an ObjectMessage type received inside the onMessage method, which may lead to arbitrary code execution when calling the $Y.getObject method."
              },
              "help": {
                "markdown": "JMS Object messages depend on Java Serialization for marshalling/unmarshalling of the message payload when ObjectMessage.getObject() is called. Deserialization of untrusted data can lead to security flaws; a remote attacker could via a crafted JMS ObjectMessage to execute arbitrary code with the permissions of the application listening/consuming JMS Messages. In this case, the JMS MessageListener consume an ObjectMessage type received inside the onMessage method, which may lead to arbitrary code execution when calling the $Y.getObject method.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.blackhat.com/docs/us-16/materials/us-16-Kaiser-Pwning-Your-Java-Messaging-With-Deserialization-Vulnerabilities-wp.pdf](https://www.blackhat.com/docs/us-16/materials/us-16-Kaiser-Pwning-Your-Java-Messaging-With-Deserialization-Vulnerabilities-wp.pdf)\n",
                "text": "JMS Object messages depend on Java Serialization for marshalling/unmarshalling of the message payload when ObjectMessage.getObject() is called. Deserialization of untrusted data can lead to security flaws; a remote attacker could via a crafted JMS ObjectMessage to execute arbitrary code with the permissions of the application listening/consuming JMS Messages. In this case, the JMS MessageListener consume an ObjectMessage type received inside the onMessage method, which may lead to arbitrary code execution when calling the $Y.getObject method."
              },
              "id": "codacy.tools-configs.java.lang.security.insecure-jms-deserialization.insecure-jms-deserialization",
              "name": "codacy.tools-configs.java.lang.security.insecure-jms-deserialization.insecure-jms-deserialization",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-502: Deserialization of Untrusted Data",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A08:2017 - Insecure Deserialization",
                  "OWASP-A08:2021 - Software and Data Integrity Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.insecure-jms-deserialization.insecure-jms-deserialization"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "When using Jackson to marshall/unmarshall JSON to Java objects, enabling default typing is dangerous and can lead to RCE. If an attacker can control `$JSON` it might be possible to provide a malicious JSON which can be used to exploit unsecure deserialization. In order to prevent this issue, avoid to enable default typing (globally or by using \"Per-class\" annotations) and avoid using `Object` and other dangerous types for member variable declaration which creating classes for Jackson based deserialization."
              },
              "help": {
                "markdown": "When using Jackson to marshall/unmarshall JSON to Java objects, enabling default typing is dangerous and can lead to RCE. If an attacker can control `$JSON` it might be possible to provide a malicious JSON which can be used to exploit unsecure deserialization. In order to prevent this issue, avoid to enable default typing (globally or by using \"Per-class\" annotations) and avoid using `Object` and other dangerous types for member variable declaration which creating classes for Jackson based deserialization.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://swapneildash.medium.com/understanding-insecure-implementation-of-jackson-deserialization-7b3d409d2038](https://swapneildash.medium.com/understanding-insecure-implementation-of-jackson-deserialization-7b3d409d2038)\n - [https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062](https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [https://adamcaudill.com/2017/10/04/exploiting-jackson-rce-cve-2017-7525/](https://adamcaudill.com/2017/10/04/exploiting-jackson-rce-cve-2017-7525/)\n",
                "text": "When using Jackson to marshall/unmarshall JSON to Java objects, enabling default typing is dangerous and can lead to RCE. If an attacker can control `$JSON` it might be possible to provide a malicious JSON which can be used to exploit unsecure deserialization. In order to prevent this issue, avoid to enable default typing (globally or by using \"Per-class\" annotations) and avoid using `Object` and other dangerous types for member variable declaration which creating classes for Jackson based deserialization."
              },
              "id": "codacy.tools-configs.java.lang.security.jackson-unsafe-deserialization.jackson-unsafe-deserialization",
              "name": "codacy.tools-configs.java.lang.security.jackson-unsafe-deserialization.jackson-unsafe-deserialization",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-502: Deserialization of Untrusted Data",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A8:2017 Insecure Deserialization",
                  "OWASP-A8:2021 Software and Data Integrity Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.jackson-unsafe-deserialization.jackson-unsafe-deserialization"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Cross-site scripting detected in HttpServletResponse writer with variable '$VAR'. User input was detected going directly from the HttpServletRequest into output. Ensure your data is properly encoded using org.owasp.encoder.Encode.forHtml: 'Encode.forHtml($VAR)'."
              },
              "help": {
                "markdown": "Cross-site scripting detected in HttpServletResponse writer with variable '$VAR'. User input was detected going directly from the HttpServletRequest into output. Ensure your data is properly encoded using org.owasp.encoder.Encode.forHtml: 'Encode.forHtml($VAR)'.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://find-sec-bugs.github.io/bugs.htm#XSS_SERVLET)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
                "text": "Cross-site scripting detected in HttpServletResponse writer with variable '$VAR'. User input was detected going directly from the HttpServletRequest into output. Ensure your data is properly encoded using org.owasp.encoder.Encode.forHtml: 'Encode.forHtml($VAR)'."
              },
              "helpUri": "https://find-sec-bugs.github.io/bugs.htm#XSS_SERVLET",
              "id": "codacy.tools-configs.java.lang.security.servletresponse-writer-xss.servletresponse-writer-xss",
              "name": "codacy.tools-configs.java.lang.security.servletresponse-writer-xss.servletresponse-writer-xss",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.servletresponse-writer-xss.servletresponse-writer-xss"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "XML external entities are not explicitly disabled for this XMLInputFactory. This could be vulnerable to XML external entity vulnerabilities. Explicitly disable external entities by setting \"javax.xml.stream.isSupportingExternalEntities\" to false."
              },
              "help": {
                "markdown": "XML external entities are not explicitly disabled for this XMLInputFactory. This could be vulnerable to XML external entity vulnerabilities. Explicitly disable external entities by setting \"javax.xml.stream.isSupportingExternalEntities\" to false.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://www.blackhat.com/docs/us-15/materials/us-15-Wang-FileCry-The-New-Age-Of-XXE-java-wp.pdf](https://www.blackhat.com/docs/us-15/materials/us-15-Wang-FileCry-The-New-Age-Of-XXE-java-wp.pdf)\n - [https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#xmlinputfactory-a-stax-parser](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#xmlinputfactory-a-stax-parser)\n",
                "text": "XML external entities are not explicitly disabled for this XMLInputFactory. This could be vulnerable to XML external entity vulnerabilities. Explicitly disable external entities by setting \"javax.xml.stream.isSupportingExternalEntities\" to false."
              },
              "id": "codacy.tools-configs.java.lang.security.xmlinputfactory-possible-xxe.xmlinputfactory-possible-xxe",
              "name": "codacy.tools-configs.java.lang.security.xmlinputfactory-possible-xxe.xmlinputfactory-possible-xxe",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-611: Improper Restriction of XML External Entity Reference",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A04:2017 - XML External Entities (XXE)",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.lang.security.xmlinputfactory-possible-xxe.xmlinputfactory-possible-xxe"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Spring Boot Actuator is fully enabled. This exposes sensitive endpoints such as /actuator/env, /actuator/logfile, /actuator/heapdump and others. Unless you have Spring Security enabled or another means to protect these endpoints, this functionality is available without authentication, causing a severe security risk."
              },
              "help": {
                "markdown": "Spring Boot Actuator is fully enabled. This exposes sensitive endpoints such as /actuator/env, /actuator/logfile, /actuator/heapdump and others. Unless you have Spring Security enabled or another means to protect these endpoints, this functionality is available without authentication, causing a severe security risk.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints-exposing-endpoints](https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints-exposing-endpoints)\n - [https://medium.com/walmartglobaltech/perils-of-spring-boot-actuators-misconfiguration-185c43a0f785](https://medium.com/walmartglobaltech/perils-of-spring-boot-actuators-misconfiguration-185c43a0f785)\n - [https://blog.maass.xyz/spring-actuator-security-part-1-stealing-secrets-using-spring-actuators](https://blog.maass.xyz/spring-actuator-security-part-1-stealing-secrets-using-spring-actuators)\n",
                "text": "Spring Boot Actuator is fully enabled. This exposes sensitive endpoints such as /actuator/env, /actuator/logfile, /actuator/heapdump and others. Unless you have Spring Security enabled or another means to protect these endpoints, this functionality is available without authentication, causing a severe security risk."
              },
              "id": "codacy.tools-configs.java.spring.security.audit.spring-actuator-fully-enabled-yaml.spring-actuator-fully-enabled-yaml",
              "name": "codacy.tools-configs.java.spring.security.audit.spring-actuator-fully-enabled-yaml.spring-actuator-fully-enabled-yaml",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.spring.security.audit.spring-actuator-fully-enabled-yaml.spring-actuator-fully-enabled-yaml"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Spring Boot Actuator is fully enabled. This exposes sensitive endpoints such as /actuator/env, /actuator/logfile, /actuator/heapdump and others. Unless you have Spring Security enabled or another means to protect these endpoints, this functionality is available without authentication, causing a significant security risk."
              },
              "help": {
                "markdown": "Spring Boot Actuator is fully enabled. This exposes sensitive endpoints such as /actuator/env, /actuator/logfile, /actuator/heapdump and others. Unless you have Spring Security enabled or another means to protect these endpoints, this functionality is available without authentication, causing a significant security risk.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints-exposing-endpoints](https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints-exposing-endpoints)\n - [https://medium.com/walmartglobaltech/perils-of-spring-boot-actuators-misconfiguration-185c43a0f785](https://medium.com/walmartglobaltech/perils-of-spring-boot-actuators-misconfiguration-185c43a0f785)\n - [https://blog.maass.xyz/spring-actuator-security-part-1-stealing-secrets-using-spring-actuators](https://blog.maass.xyz/spring-actuator-security-part-1-stealing-secrets-using-spring-actuators)\n",
                "text": "Spring Boot Actuator is fully enabled. This exposes sensitive endpoints such as /actuator/env, /actuator/logfile, /actuator/heapdump and others. Unless you have Spring Security enabled or another means to protect these endpoints, this functionality is available without authentication, causing a significant security risk."
              },
              "id": "codacy.tools-configs.java.spring.security.audit.spring-actuator-fully-enabled.spring-actuator-fully-enabled",
              "name": "codacy.tools-configs.java.spring.security.audit.spring-actuator-fully-enabled.spring-actuator-fully-enabled",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.spring.security.audit.spring-actuator-fully-enabled.spring-actuator-fully-enabled"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Spring Boot Actuator \"$ACTUATOR\" is enabled. Depending on the actuator, this can pose a significant security risk. Please double-check if the actuator is needed and properly secured."
              },
              "help": {
                "markdown": "Spring Boot Actuator \"$ACTUATOR\" is enabled. Depending on the actuator, this can pose a significant security risk. Please double-check if the actuator is needed and properly secured.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints-exposing-endpoints](https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints-exposing-endpoints)\n - [https://medium.com/walmartglobaltech/perils-of-spring-boot-actuators-misconfiguration-185c43a0f785](https://medium.com/walmartglobaltech/perils-of-spring-boot-actuators-misconfiguration-185c43a0f785)\n - [https://blog.maass.xyz/spring-actuator-security-part-1-stealing-secrets-using-spring-actuators](https://blog.maass.xyz/spring-actuator-security-part-1-stealing-secrets-using-spring-actuators)\n",
                "text": "Spring Boot Actuator \"$ACTUATOR\" is enabled. Depending on the actuator, this can pose a significant security risk. Please double-check if the actuator is needed and properly secured."
              },
              "id": "codacy.tools-configs.java.spring.security.audit.spring-actuator-non-health-enabled-yaml.spring-actuator-dangerous-endpoints-enabled-yaml",
              "name": "codacy.tools-configs.java.spring.security.audit.spring-actuator-non-health-enabled-yaml.spring-actuator-dangerous-endpoints-enabled-yaml",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.spring.security.audit.spring-actuator-non-health-enabled-yaml.spring-actuator-dangerous-endpoints-enabled-yaml"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Spring Boot Actuators \"$...ACTUATORS\" are enabled. Depending on the actuators, this can pose a significant security risk. Please double-check if the actuators are needed and properly secured."
              },
              "help": {
                "markdown": "Spring Boot Actuators \"$...ACTUATORS\" are enabled. Depending on the actuators, this can pose a significant security risk. Please double-check if the actuators are needed and properly secured.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints-exposing-endpoints](https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints-exposing-endpoints)\n - [https://medium.com/walmartglobaltech/perils-of-spring-boot-actuators-misconfiguration-185c43a0f785](https://medium.com/walmartglobaltech/perils-of-spring-boot-actuators-misconfiguration-185c43a0f785)\n - [https://blog.maass.xyz/spring-actuator-security-part-1-stealing-secrets-using-spring-actuators](https://blog.maass.xyz/spring-actuator-security-part-1-stealing-secrets-using-spring-actuators)\n",
                "text": "Spring Boot Actuators \"$...ACTUATORS\" are enabled. Depending on the actuators, this can pose a significant security risk. Please double-check if the actuators are needed and properly secured."
              },
              "id": "codacy.tools-configs.java.spring.security.audit.spring-actuator-non-health-enabled.spring-actuator-dangerous-endpoints-enabled",
              "name": "codacy.tools-configs.java.spring.security.audit.spring-actuator-non-health-enabled.spring-actuator-dangerous-endpoints-enabled",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.spring.security.audit.spring-actuator-non-health-enabled.spring-actuator-dangerous-endpoints-enabled"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected a string argument from a public method contract in a raw SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."
              },
              "help": {
                "markdown": "Detected a string argument from a public method contract in a raw SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
                "text": "Detected a string argument from a public method contract in a raw SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'."
              },
              "id": "codacy.tools-configs.java.spring.security.audit.spring-sqli.spring-sqli",
              "name": "codacy.tools-configs.java.spring.security.audit.spring-sqli.spring-sqli",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.spring.security.audit.spring-sqli.spring-sqli"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Application redirects a user to a destination URL specified by a user supplied parameter that is not validated."
              },
              "help": {
                "markdown": "Application redirects a user to a destination URL specified by a user supplied parameter that is not validated.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://find-sec-bugs.github.io/bugs.htm#UNVALIDATED_REDIRECT)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n",
                "text": "Application redirects a user to a destination URL specified by a user supplied parameter that is not validated."
              },
              "helpUri": "https://find-sec-bugs.github.io/bugs.htm#UNVALIDATED_REDIRECT",
              "id": "codacy.tools-configs.java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect",
              "name": "codacy.tools-configs.java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."
              },
              "help": {
                "markdown": "Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/www-community/attacks/Path_Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
                "text": "Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."
              },
              "id": "codacy.tools-configs.java.spring.security.injection.tainted-file-path.tainted-file-path",
              "name": "codacy.tools-configs.java.spring.security.injection.tainted-file-path.tainted-file-path",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-23: Relative Path Traversal",
                  "HIGH CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.spring.security.injection.tainted-file-path.tainted-file-path"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data."
              },
              "help": {
                "markdown": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n",
                "text": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data."
              },
              "id": "codacy.tools-configs.java.spring.security.injection.tainted-html-string.tainted-html-string",
              "name": "codacy.tools-configs.java.spring.security.injection.tainted-html-string.tainted-html-string",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.spring.security.injection.tainted-html-string.tainted-html-string"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library."
              },
              "help": {
                "markdown": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html](https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html)\n",
                "text": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library."
              },
              "id": "codacy.tools-configs.java.spring.security.injection.tainted-sql-string.tainted-sql-string",
              "name": "codacy.tools-configs.java.spring.security.injection.tainted-sql-string.tainted-sql-string",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.spring.security.injection.tainted-sql-string.tainted-sql-string"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected user input entering a method which executes a system command. This could result in a command injection vulnerability, which allows an attacker to inject an arbitrary system command onto the server. The attacker could download malware onto or steal data from the server. Instead, use ProcessBuilder, separating the command into individual arguments, like this: `new ProcessBuilder(\"ls\", \"-al\", targetDirectory)`. Further, make sure you hardcode or allowlist the actual command so that attackers can't run arbitrary commands."
              },
              "help": {
                "markdown": "Detected user input entering a method which executes a system command. This could result in a command injection vulnerability, which allows an attacker to inject an arbitrary system command onto the server. The attacker could download malware onto or steal data from the server. Instead, use ProcessBuilder, separating the command into individual arguments, like this: `new ProcessBuilder(\"ls\", \"-al\", targetDirectory)`. Further, make sure you hardcode or allowlist the actual command so that attackers can't run arbitrary commands.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.stackhawk.com/blog/command-injection-java/](https://www.stackhawk.com/blog/command-injection-java/)\n - [https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)\n - [https://github.com/github/codeql/blob/main/java/ql/src/Security/CWE/CWE-078/ExecUnescaped.java](https://github.com/github/codeql/blob/main/java/ql/src/Security/CWE/CWE-078/ExecUnescaped.java)\n",
                "text": "Detected user input entering a method which executes a system command. This could result in a command injection vulnerability, which allows an attacker to inject an arbitrary system command onto the server. The attacker could download malware onto or steal data from the server. Instead, use ProcessBuilder, separating the command into individual arguments, like this: `new ProcessBuilder(\"ls\", \"-al\", targetDirectory)`. Further, make sure you hardcode or allowlist the actual command so that attackers can't run arbitrary commands."
              },
              "id": "codacy.tools-configs.java.spring.security.injection.tainted-system-command.tainted-system-command",
              "name": "codacy.tools-configs.java.spring.security.injection.tainted-system-command.tainted-system-command",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "HIGH CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.spring.security.injection.tainted-system-command.tainted-system-command"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, hardcode the correct host, or ensure that the user data can only affect the path or parameters."
              },
              "help": {
                "markdown": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, hardcode the correct host, or ensure that the user data can only affect the path or parameters.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)\n",
                "text": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, hardcode the correct host, or ensure that the user data can only affect the path or parameters."
              },
              "id": "codacy.tools-configs.java.spring.security.injection.tainted-url-host.tainted-url-host",
              "name": "codacy.tools-configs.java.spring.security.injection.tainted-url-host.tainted-url-host",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-918: Server-Side Request Forgery (SSRF)",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A10:2021 - Server-Side Request Forgery (SSRF)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.java.spring.security.injection.tainted-url-host.tainted-url-host"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "This application sets the `jdk.tls.client.protocols` system property to\ninclude insecure TLS or SSL versions (SSLv3, TLSv1, TLSv1.1), which are\ndeprecated due to serious security vulnerabilities like POODLE attacks and\nsusceptibility to man-in-the-middle attacks. Continuing to use these\nprotocols can expose data to interception or manipulation. \n\nTo mitigate the issue, upgrade to TLSv1.2 or higher, which provide stronger \nencryption and improved security. Refrain from using any SSL versions as they \nare entirely deprecated.\n\nSecure Code Example:\n```\npublic void safe() {\n  java.lang.System.setProperty(\"jdk.tls.client.protocols\", \"TLSv1.3\");\n}\n```\n"
              },
              "help": {
                "markdown": "This application sets the `jdk.tls.client.protocols` system property to\ninclude insecure TLS or SSL versions (SSLv3, TLSv1, TLSv1.1), which are\ndeprecated due to serious security vulnerabilities like POODLE attacks and\nsusceptibility to man-in-the-middle attacks. Continuing to use these\nprotocols can expose data to interception or manipulation. \n\nTo mitigate the issue, upgrade to TLSv1.2 or higher, which provide stronger \nencryption and improved security. Refrain from using any SSL versions as they \nare entirely deprecated.\n\nSecure Code Example:\n```\npublic void safe() {\n  java.lang.System.setProperty(\"jdk.tls.client.protocols\", \"TLSv1.3\");\n}\n```\n\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://stackoverflow.com/questions/26504653/is-it-possible-to-disable-sslv3-for-all-java-applications](https://stackoverflow.com/questions/26504653/is-it-possible-to-disable-sslv3-for-all-java-applications)\n",
                "text": "This application sets the `jdk.tls.client.protocols` system property to\ninclude insecure TLS or SSL versions (SSLv3, TLSv1, TLSv1.1), which are\ndeprecated due to serious security vulnerabilities like POODLE attacks and\nsusceptibility to man-in-the-middle attacks. Continuing to use these\nprotocols can expose data to interception or manipulation. \n\nTo mitigate the issue, upgrade to TLSv1.2 or higher, which provide stronger \nencryption and improved security. Refrain from using any SSL versions as they \nare entirely deprecated.\n\nSecure Code Example:\n```\npublic void safe() {\n  java.lang.System.setProperty(\"jdk.tls.client.protocols\", \"TLSv1.3\");\n}\n```\n"
              },
              "id": "codacy.tools-configs.java_crypto_rule-DisallowOldTLSVersion",
              "name": "codacy.tools-configs.java_crypto_rule-DisallowOldTLSVersion",
              "properties": {
                "precision": "very-high",
                "security-severity": "MEDIUM",
                "tags": [
                  "CWE-326",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021-Cryptographic Failures",
                  "OWASP-A3:2017-Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Inadequate encryption strength"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected an HTTP request sent via HttpURLConnection or URLConnection.\nThis could lead to sensitive information being sent over an insecure \nchannel, as HTTP does not encrypt data. Transmitting data over HTTP \nexposes it to potential interception by attackers, risking data \nintegrity and confidentiality. Using HTTP for transmitting sensitive \ndata such as passwords, personal information, or financial details can \nlead to information disclosure.\n\nTo mitigate the issue, switch to HTTPS to ensure all data transmitted \nis securely encrypted. This helps protect against eavesdropping and \nman-in-the-middle attacks. Modify the URL in your code from HTTP to \nHTTPS and ensure the server supports HTTPS.\n\nSecure Code Example:\n```\nprivate static void safe() {\n    try {\n        URL url = new URL(\"https://example.com/api/data\"); // Changed to HTTPS\n        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n        con.setRequestMethod(\"GET\");\n\n        int status = con.getResponseCode();\n        if (status == HttpURLConnection.HTTP_OK) { \n            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n            String inputLine;\n            StringBuilder response = new StringBuilder();\n            while ((inputLine = in.readLine()) != null) {\n                response.append(inputLine);\n            }\n            in.close();\n            System.out.println(\"Response: \" + response.toString());\n        } else {\n            System.out.println(\"HTTP error code: \" + status);\n        }\n        con.disconnect();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n```\n"
              },
              "help": {
                "markdown": "Detected an HTTP request sent via HttpURLConnection or URLConnection.\nThis could lead to sensitive information being sent over an insecure \nchannel, as HTTP does not encrypt data. Transmitting data over HTTP \nexposes it to potential interception by attackers, risking data \nintegrity and confidentiality. Using HTTP for transmitting sensitive \ndata such as passwords, personal information, or financial details can \nlead to information disclosure.\n\nTo mitigate the issue, switch to HTTPS to ensure all data transmitted \nis securely encrypted. This helps protect against eavesdropping and \nman-in-the-middle attacks. Modify the URL in your code from HTTP to \nHTTPS and ensure the server supports HTTPS.\n\nSecure Code Example:\n```\nprivate static void safe() {\n    try {\n        URL url = new URL(\"https://example.com/api/data\"); // Changed to HTTPS\n        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n        con.setRequestMethod(\"GET\");\n\n        int status = con.getResponseCode();\n        if (status == HttpURLConnection.HTTP_OK) { \n            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n            String inputLine;\n            StringBuilder response = new StringBuilder();\n            while ((inputLine = in.readLine()) != null) {\n                response.append(inputLine);\n            }\n            in.close();\n            System.out.println(\"Response: \" + response.toString());\n        } else {\n            System.out.println(\"HTTP error code: \" + status);\n        }\n        con.disconnect();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n```\n\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URLConnection.html](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URLConnection.html)\n - [https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URL.html#openConnection()](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URL.html#openConnection())\n",
                "text": "Detected an HTTP request sent via HttpURLConnection or URLConnection.\nThis could lead to sensitive information being sent over an insecure \nchannel, as HTTP does not encrypt data. Transmitting data over HTTP \nexposes it to potential interception by attackers, risking data \nintegrity and confidentiality. Using HTTP for transmitting sensitive \ndata such as passwords, personal information, or financial details can \nlead to information disclosure.\n\nTo mitigate the issue, switch to HTTPS to ensure all data transmitted \nis securely encrypted. This helps protect against eavesdropping and \nman-in-the-middle attacks. Modify the URL in your code from HTTP to \nHTTPS and ensure the server supports HTTPS.\n\nSecure Code Example:\n```\nprivate static void safe() {\n    try {\n        URL url = new URL(\"https://example.com/api/data\"); // Changed to HTTPS\n        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n        con.setRequestMethod(\"GET\");\n\n        int status = con.getResponseCode();\n        if (status == HttpURLConnection.HTTP_OK) { \n            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n            String inputLine;\n            StringBuilder response = new StringBuilder();\n            while ((inputLine = in.readLine()) != null) {\n                response.append(inputLine);\n            }\n            in.close();\n            System.out.println(\"Response: \" + response.toString());\n        } else {\n            System.out.println(\"HTTP error code: \" + status);\n        }\n        con.disconnect();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n```\n"
              },
              "id": "codacy.tools-configs.java_crypto_rule-HTTPUrlConnectionHTTPRequest",
              "name": "codacy.tools-configs.java_crypto_rule-HTTPUrlConnectionHTTPRequest",
              "properties": {
                "precision": "very-high",
                "security-severity": "MEDIUM",
                "tags": [
                  "CWE-319",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021-Cryptographic Failures",
                  "OWASP-A3:2017-Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Cleartext transmission of sensitive information"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected an HTTP GET request sent via Apache HTTP Components. Sending data\nover HTTP can expose sensitive information to interception or modification\nby attackers, as HTTP does not encrypt the data transmitted. It is critical\nto use HTTPS, which encrypts the communication, to protect the confidentiality\nand integrity of data in transit.\n\nTo mitigate the issue, ensure all data transmitted between the client and \nserver is sent over HTTPS. Update all HTTP URLs to HTTPS and configure your \nserver to redirect HTTP requests to HTTPS. Additionally, implement HSTS \n(HTTP Strict Transport Security) to enforce secure connections.\nSecure Code Example:\n```\nprivate static void safe() {\n  CloseableHttpClient httpclient = HttpClients.createDefault();\n  CloseableHttpResponse response = httpclient.execute(new HttpPost(\"https://example.com\"));\n}\n```\n"
              },
              "help": {
                "markdown": "Detected an HTTP GET request sent via Apache HTTP Components. Sending data\nover HTTP can expose sensitive information to interception or modification\nby attackers, as HTTP does not encrypt the data transmitted. It is critical\nto use HTTPS, which encrypts the communication, to protect the confidentiality\nand integrity of data in transit.\n\nTo mitigate the issue, ensure all data transmitted between the client and \nserver is sent over HTTPS. Update all HTTP URLs to HTTPS and configure your \nserver to redirect HTTP requests to HTTPS. Additionally, implement HSTS \n(HTTP Strict Transport Security) to enforce secure connections.\nSecure Code Example:\n```\nprivate static void safe() {\n  CloseableHttpClient httpclient = HttpClients.createDefault();\n  CloseableHttpResponse response = httpclient.execute(new HttpPost(\"https://example.com\"));\n}\n```\n\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://hc.apache.org/httpcomponents-client-ga/quickstart.html](https://hc.apache.org/httpcomponents-client-ga/quickstart.html)\n",
                "text": "Detected an HTTP GET request sent via Apache HTTP Components. Sending data\nover HTTP can expose sensitive information to interception or modification\nby attackers, as HTTP does not encrypt the data transmitted. It is critical\nto use HTTPS, which encrypts the communication, to protect the confidentiality\nand integrity of data in transit.\n\nTo mitigate the issue, ensure all data transmitted between the client and \nserver is sent over HTTPS. Update all HTTP URLs to HTTPS and configure your \nserver to redirect HTTP requests to HTTPS. Additionally, implement HSTS \n(HTTP Strict Transport Security) to enforce secure connections.\nSecure Code Example:\n```\nprivate static void safe() {\n  CloseableHttpClient httpclient = HttpClients.createDefault();\n  CloseableHttpResponse response = httpclient.execute(new HttpPost(\"https://example.com\"));\n}\n```\n"
              },
              "id": "codacy.tools-configs.java_crypto_rule-HttpComponentsRequest",
              "name": "codacy.tools-configs.java_crypto_rule-HttpComponentsRequest",
              "properties": {
                "precision": "very-high",
                "security-severity": "MEDIUM",
                "tags": [
                  "CWE-319",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021-Cryptographic Failures",
                  "OWASP-A3:2017-Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Cleartext transmission of sensitive information"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected an HTTP GET request sent via HttpGet. Sending data over HTTP can\nexpose sensitive information to interception or modification by attackers,\nas HTTP does not encrypt the data transmitted. It is critical to use\nHTTPS, which encrypts the communication, to protect the confidentiality\nand integrity of data in transit.\n\nTo mitigate the issue, ensure all data transmitted between the client and \nserver is sent over HTTPS. Update all HTTP URLs to HTTPS and configure your \nserver to redirect HTTP requests to HTTPS. Additionally, implement HSTS \n(HTTP Strict Transport Security) to enforce secure connections.\n\nSecure Code Example:\n```\nprivate static void safe() throws IOException {\n  HttpGet httpGet = new HttpGet(\"https://example.com\");\n  HttpClients.createDefault().execute(httpGet);\n}\n```\n"
              },
              "help": {
                "markdown": "Detected an HTTP GET request sent via HttpGet. Sending data over HTTP can\nexpose sensitive information to interception or modification by attackers,\nas HTTP does not encrypt the data transmitted. It is critical to use\nHTTPS, which encrypts the communication, to protect the confidentiality\nand integrity of data in transit.\n\nTo mitigate the issue, ensure all data transmitted between the client and \nserver is sent over HTTPS. Update all HTTP URLs to HTTPS and configure your \nserver to redirect HTTP requests to HTTPS. Additionally, implement HSTS \n(HTTP Strict Transport Security) to enforce secure connections.\n\nSecure Code Example:\n```\nprivate static void safe() throws IOException {\n  HttpGet httpGet = new HttpGet(\"https://example.com\");\n  HttpClients.createDefault().execute(httpGet);\n}\n```\n\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URLConnection.html](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URLConnection.html)\n - [https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URL.html#openConnection()](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URL.html#openConnection())\n",
                "text": "Detected an HTTP GET request sent via HttpGet. Sending data over HTTP can\nexpose sensitive information to interception or modification by attackers,\nas HTTP does not encrypt the data transmitted. It is critical to use\nHTTPS, which encrypts the communication, to protect the confidentiality\nand integrity of data in transit.\n\nTo mitigate the issue, ensure all data transmitted between the client and \nserver is sent over HTTPS. Update all HTTP URLs to HTTPS and configure your \nserver to redirect HTTP requests to HTTPS. Additionally, implement HSTS \n(HTTP Strict Transport Security) to enforce secure connections.\n\nSecure Code Example:\n```\nprivate static void safe() throws IOException {\n  HttpGet httpGet = new HttpGet(\"https://example.com\");\n  HttpClients.createDefault().execute(httpGet);\n}\n```\n"
              },
              "id": "codacy.tools-configs.java_crypto_rule-HttpGetHTTPRequest",
              "name": "codacy.tools-configs.java_crypto_rule-HttpGetHTTPRequest",
              "properties": {
                "precision": "very-high",
                "security-severity": "MEDIUM",
                "tags": [
                  "CWE-319",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021-Cryptographic Failures",
                  "OWASP-A3:2017-Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Cleartext transmission of sensitive information"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "This pattern detects configurations where the Spring Integration FTP plugin \nis used to set up connections to FTP servers. FTP is an insecure protocol \nthat transmits data, including potentially sensitive information, in plaintext. \nThis can expose personal identifiable information (PII) or other sensitive data \nto interception by attackers during transmission. \n\nTo mitigate the vulnerability, switch to a secure protocol such as SFTP or FTPS \nthat encrypts the connection to prevent data exposure. Ensure that any method \nused to set the host for an FTP session does not use plaintext FTP. \n\nSecure Code Example:\n```\npublic SessionFactory\u003cFTPFile\u003e safe(FtpSessionFactoryProperties properties) {\n  DefaultFtpSessionFactory ftpSessionFactory = new DefaultFtpSessionFactory();\n  ftpSessionFactory.setHost(\"sftp://example.com\");\n  ftpSessionFactory.setPort(properties.getPort());\n  ftpSessionFactory.setUsername(properties.getUsername());\n  ftpSessionFactory.setPassword(properties.getPassword());\n  ftpSessionFactory.setClientMode(properties.getClientMode().getMode());\n  return ftpSessionFactory;\n}\n```\n"
              },
              "help": {
                "markdown": "This pattern detects configurations where the Spring Integration FTP plugin \nis used to set up connections to FTP servers. FTP is an insecure protocol \nthat transmits data, including potentially sensitive information, in plaintext. \nThis can expose personal identifiable information (PII) or other sensitive data \nto interception by attackers during transmission. \n\nTo mitigate the vulnerability, switch to a secure protocol such as SFTP or FTPS \nthat encrypts the connection to prevent data exposure. Ensure that any method \nused to set the host for an FTP session does not use plaintext FTP. \n\nSecure Code Example:\n```\npublic SessionFactory\u003cFTPFile\u003e safe(FtpSessionFactoryProperties properties) {\n  DefaultFtpSessionFactory ftpSessionFactory = new DefaultFtpSessionFactory();\n  ftpSessionFactory.setHost(\"sftp://example.com\");\n  ftpSessionFactory.setPort(properties.getPort());\n  ftpSessionFactory.setUsername(properties.getUsername());\n  ftpSessionFactory.setPassword(properties.getPassword());\n  ftpSessionFactory.setClientMode(properties.getClientMode().getMode());\n  return ftpSessionFactory;\n}\n```\n\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.spring.io/spring-integration/api/org/springframework/integration/ftp/session/AbstractFtpSessionFactory.html#setClientMode-int-](https://docs.spring.io/spring-integration/api/org/springframework/integration/ftp/session/AbstractFtpSessionFactory.html#setClientMode-int-)\n",
                "text": "This pattern detects configurations where the Spring Integration FTP plugin \nis used to set up connections to FTP servers. FTP is an insecure protocol \nthat transmits data, including potentially sensitive information, in plaintext. \nThis can expose personal identifiable information (PII) or other sensitive data \nto interception by attackers during transmission. \n\nTo mitigate the vulnerability, switch to a secure protocol such as SFTP or FTPS \nthat encrypts the connection to prevent data exposure. Ensure that any method \nused to set the host for an FTP session does not use plaintext FTP. \n\nSecure Code Example:\n```\npublic SessionFactory\u003cFTPFile\u003e safe(FtpSessionFactoryProperties properties) {\n  DefaultFtpSessionFactory ftpSessionFactory = new DefaultFtpSessionFactory();\n  ftpSessionFactory.setHost(\"sftp://example.com\");\n  ftpSessionFactory.setPort(properties.getPort());\n  ftpSessionFactory.setUsername(properties.getUsername());\n  ftpSessionFactory.setPassword(properties.getPassword());\n  ftpSessionFactory.setClientMode(properties.getClientMode().getMode());\n  return ftpSessionFactory;\n}\n```\n"
              },
              "id": "codacy.tools-configs.java_crypto_rule-SpringFTPRequest",
              "name": "codacy.tools-configs.java_crypto_rule-SpringFTPRequest",
              "properties": {
                "precision": "very-high",
                "security-severity": "MEDIUM",
                "tags": [
                  "CWE-319",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021-Cryptographic Failures",
                  "OWASP-A3:2017-Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Cleartext transmission of sensitive information"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "This rule detects instances where Java Spring's RestTemplate API sends \nrequests to non-secure (http://) URLs. Sending data over HTTP is vulnerable \nas it does not use TLS encryption, exposing the data to interception, \nmodification, or redirection by attackers. \n\nTo mitigate this vulnerability, modify the request URLs to use HTTPS instead, \nwhich ensures that the data is encrypted during transit and prevents from\nMITM attacks. \n\nSecure Code Example:\n```\npublic void safe(Object obj) throws Exception {\n  RestTemplate restTemplate = new RestTemplate();\n  restTemplate.put(URI.create(\"https://example.com\"), obj);\n}\n```  \n"
              },
              "help": {
                "markdown": "This rule detects instances where Java Spring's RestTemplate API sends \nrequests to non-secure (http://) URLs. Sending data over HTTP is vulnerable \nas it does not use TLS encryption, exposing the data to interception, \nmodification, or redirection by attackers. \n\nTo mitigate this vulnerability, modify the request URLs to use HTTPS instead, \nwhich ensures that the data is encrypted during transit and prevents from\nMITM attacks. \n\nSecure Code Example:\n```\npublic void safe(Object obj) throws Exception {\n  RestTemplate restTemplate = new RestTemplate();\n  restTemplate.put(URI.create(\"https://example.com\"), obj);\n}\n```  \n\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html#delete-java.lang.String-java.util.Map-](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html#delete-java.lang.String-java.util.Map-)\n - [https://www.baeldung.com/rest-template](https://www.baeldung.com/rest-template)\n",
                "text": "This rule detects instances where Java Spring's RestTemplate API sends \nrequests to non-secure (http://) URLs. Sending data over HTTP is vulnerable \nas it does not use TLS encryption, exposing the data to interception, \nmodification, or redirection by attackers. \n\nTo mitigate this vulnerability, modify the request URLs to use HTTPS instead, \nwhich ensures that the data is encrypted during transit and prevents from\nMITM attacks. \n\nSecure Code Example:\n```\npublic void safe(Object obj) throws Exception {\n  RestTemplate restTemplate = new RestTemplate();\n  restTemplate.put(URI.create(\"https://example.com\"), obj);\n}\n```  \n"
              },
              "id": "codacy.tools-configs.java_crypto_rule-SpringHTTPRequestRestTemplate",
              "name": "codacy.tools-configs.java_crypto_rule-SpringHTTPRequestRestTemplate",
              "properties": {
                "precision": "very-high",
                "security-severity": "MEDIUM",
                "tags": [
                  "CWE-319",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021-Cryptographic Failures",
                  "OWASP-A3:2017-Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Cleartext transmission of sensitive information"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "This code enables unsafe renegotiation in SSL/TLS connections, which is\nvulnerable to man-in-the-middle attacks. In such attacks, an attacker\ncould inject chosen plaintext at the beginning of the secure\ncommunication, potentially compromising the security of data transmission. If \nexploited, this vulnerability can lead to unauthorized access to sensitive \ndata, data manipulation, and potentially full system compromise depending on \nthe data and operations protected by the TLS session.\n\nTo mitigate this vulnerability, disable unsafe renegotiation in the Java \napplication. Ensure that only secure renegotiation is allowed by setting the \nsystem property `sun.security.ssl.allowUnsafeRenegotiation` to `false`. \n\nSecure code example:\n```\npublic void safe() {\n  java.lang.System.setProperty(\"sun.security.ssl.allowUnsafeRenegotiation\", false);\n}\n```\n"
              },
              "help": {
                "markdown": "This code enables unsafe renegotiation in SSL/TLS connections, which is\nvulnerable to man-in-the-middle attacks. In such attacks, an attacker\ncould inject chosen plaintext at the beginning of the secure\ncommunication, potentially compromising the security of data transmission. If \nexploited, this vulnerability can lead to unauthorized access to sensitive \ndata, data manipulation, and potentially full system compromise depending on \nthe data and operations protected by the TLS session.\n\nTo mitigate this vulnerability, disable unsafe renegotiation in the Java \napplication. Ensure that only secure renegotiation is allowed by setting the \nsystem property `sun.security.ssl.allowUnsafeRenegotiation` to `false`. \n\nSecure code example:\n```\npublic void safe() {\n  java.lang.System.setProperty(\"sun.security.ssl.allowUnsafeRenegotiation\", false);\n}\n```\n\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.oracle.com/java/technologies/javase/tlsreadme.html](https://www.oracle.com/java/technologies/javase/tlsreadme.html)\n",
                "text": "This code enables unsafe renegotiation in SSL/TLS connections, which is\nvulnerable to man-in-the-middle attacks. In such attacks, an attacker\ncould inject chosen plaintext at the beginning of the secure\ncommunication, potentially compromising the security of data transmission. If \nexploited, this vulnerability can lead to unauthorized access to sensitive \ndata, data manipulation, and potentially full system compromise depending on \nthe data and operations protected by the TLS session.\n\nTo mitigate this vulnerability, disable unsafe renegotiation in the Java \napplication. Ensure that only secure renegotiation is allowed by setting the \nsystem property `sun.security.ssl.allowUnsafeRenegotiation` to `false`. \n\nSecure code example:\n```\npublic void safe() {\n  java.lang.System.setProperty(\"sun.security.ssl.allowUnsafeRenegotiation\", false);\n}\n```\n"
              },
              "id": "codacy.tools-configs.java_crypto_rule-TLSUnsafeRenegotiation",
              "name": "codacy.tools-configs.java_crypto_rule-TLSUnsafeRenegotiation",
              "properties": {
                "precision": "very-high",
                "security-severity": "MEDIUM",
                "tags": [
                  "CWE-319",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021-Cryptographic Failures",
                  "OWASP-A3:2017-Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Cleartext transmission of sensitive information"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Checks for attempts to connect through telnet. Telnet is an outdated\nprotocol that transmits all data, including sensitive information like\npasswords, in clear text. This exposes it to interception and\neavesdropping on unsecured networks.\n\nTo mitigate this issue, replace Telnet usage with more secure protocols \nsuch as SSH (Secure Shell), which provides encrypted communication. Use \nthe SSH functionality provided by libraries like JSch or Apache MINA SSHD \nfor secure data transmission.\n\nSecure Code Example:\n```\nimport com.jcraft.jsch.JSch;\nimport com.jcraft.jsch.Session;\n\npublic class SecureConnector {\n    public static void main(String[] args) {\n        try {\n            JSch jsch = new JSch();\n            Session session = jsch.getSession(\"username\", \"hostname\", 22);\n            session.setPassword(\"password\");\n            session.setConfig(\"StrictHostKeyChecking\", \"no\");\n            session.connect();\n            System.out.println(\"Connected securely.\");\n        } catch (Exception e) {\n            System.err.println(\"Secure connection failed: \" + e.getMessage());\n        }\n    }\n}\n```\n"
              },
              "help": {
                "markdown": "Checks for attempts to connect through telnet. Telnet is an outdated\nprotocol that transmits all data, including sensitive information like\npasswords, in clear text. This exposes it to interception and\neavesdropping on unsecured networks.\n\nTo mitigate this issue, replace Telnet usage with more secure protocols \nsuch as SSH (Secure Shell), which provides encrypted communication. Use \nthe SSH functionality provided by libraries like JSch or Apache MINA SSHD \nfor secure data transmission.\n\nSecure Code Example:\n```\nimport com.jcraft.jsch.JSch;\nimport com.jcraft.jsch.Session;\n\npublic class SecureConnector {\n    public static void main(String[] args) {\n        try {\n            JSch jsch = new JSch();\n            Session session = jsch.getSession(\"username\", \"hostname\", 22);\n            session.setPassword(\"password\");\n            session.setConfig(\"StrictHostKeyChecking\", \"no\");\n            session.connect();\n            System.out.println(\"Connected securely.\");\n        } catch (Exception e) {\n            System.err.println(\"Secure connection failed: \" + e.getMessage());\n        }\n    }\n}\n```\n\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://commons.apache.org/proper/commons-net/javadocs/api-3.6/org/apache/commons/net/telnet/TelnetClient.html](https://commons.apache.org/proper/commons-net/javadocs/api-3.6/org/apache/commons/net/telnet/TelnetClient.html)\n",
                "text": "Checks for attempts to connect through telnet. Telnet is an outdated\nprotocol that transmits all data, including sensitive information like\npasswords, in clear text. This exposes it to interception and\neavesdropping on unsecured networks.\n\nTo mitigate this issue, replace Telnet usage with more secure protocols \nsuch as SSH (Secure Shell), which provides encrypted communication. Use \nthe SSH functionality provided by libraries like JSch or Apache MINA SSHD \nfor secure data transmission.\n\nSecure Code Example:\n```\nimport com.jcraft.jsch.JSch;\nimport com.jcraft.jsch.Session;\n\npublic class SecureConnector {\n    public static void main(String[] args) {\n        try {\n            JSch jsch = new JSch();\n            Session session = jsch.getSession(\"username\", \"hostname\", 22);\n            session.setPassword(\"password\");\n            session.setConfig(\"StrictHostKeyChecking\", \"no\");\n            session.connect();\n            System.out.println(\"Connected securely.\");\n        } catch (Exception e) {\n            System.err.println(\"Secure connection failed: \" + e.getMessage());\n        }\n    }\n}\n```\n"
              },
              "id": "codacy.tools-configs.java_crypto_rule-TelnetRequest",
              "name": "codacy.tools-configs.java_crypto_rule-TelnetRequest",
              "properties": {
                "precision": "very-high",
                "security-severity": "MEDIUM",
                "tags": [
                  "CWE-319",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021-Cryptographic Failures",
                  "OWASP-A3:2017-Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Cleartext transmission of sensitive information"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "This application uses the Unirest library to send\nnetwork requests to URLs starting with 'http://'. Communicating over HTTP\nis considered insecure because it does not encrypt traffic with TLS\n(Transport Layer Security), exposing data to potential interception or\nmanipulation by attackers.\n\nTo mitigate the issue, modify the request URL to begin with 'https://' \ninstead of 'http://'. Using HTTPS ensures that the data is encrypted and \nsecure during transmission. Review all instances where HTTP is used and \nupdate them to use HTTPS to prevent security risks.\n\nSecure Code Example:\n```\nimport kong.unirest.core.Unirest;\n\npublic void safe() {\n  Unirest.get(\"https://httpbin.org\")\n      .queryString(\"fruit\", \"apple\")\n      .queryString(\"droid\", \"R2D2\")\n      .asString();\n}\n```\n"
              },
              "help": {
                "markdown": "This application uses the Unirest library to send\nnetwork requests to URLs starting with 'http://'. Communicating over HTTP\nis considered insecure because it does not encrypt traffic with TLS\n(Transport Layer Security), exposing data to potential interception or\nmanipulation by attackers.\n\nTo mitigate the issue, modify the request URL to begin with 'https://' \ninstead of 'http://'. Using HTTPS ensures that the data is encrypted and \nsecure during transmission. Review all instances where HTTP is used and \nupdate them to use HTTPS to prevent security risks.\n\nSecure Code Example:\n```\nimport kong.unirest.core.Unirest;\n\npublic void safe() {\n  Unirest.get(\"https://httpbin.org\")\n      .queryString(\"fruit\", \"apple\")\n      .queryString(\"droid\", \"R2D2\")\n      .asString();\n}\n```\n\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://kong.github.io/unirest-java/#requests](https://kong.github.io/unirest-java/#requests)\n",
                "text": "This application uses the Unirest library to send\nnetwork requests to URLs starting with 'http://'. Communicating over HTTP\nis considered insecure because it does not encrypt traffic with TLS\n(Transport Layer Security), exposing data to potential interception or\nmanipulation by attackers.\n\nTo mitigate the issue, modify the request URL to begin with 'https://' \ninstead of 'http://'. Using HTTPS ensures that the data is encrypted and \nsecure during transmission. Review all instances where HTTP is used and \nupdate them to use HTTPS to prevent security risks.\n\nSecure Code Example:\n```\nimport kong.unirest.core.Unirest;\n\npublic void safe() {\n  Unirest.get(\"https://httpbin.org\")\n      .queryString(\"fruit\", \"apple\")\n      .queryString(\"droid\", \"R2D2\")\n      .asString();\n}\n```\n"
              },
              "id": "codacy.tools-configs.java_crypto_rule-UnirestHTTPRequest",
              "name": "codacy.tools-configs.java_crypto_rule-UnirestHTTPRequest",
              "properties": {
                "precision": "very-high",
                "security-severity": "MEDIUM",
                "tags": [
                  "CWE-319",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021-Cryptographic Failures",
                  "OWASP-A3:2017-Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Cleartext transmission of sensitive information"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Use of RC2, a deprecated cryptographic algorithm vulnerable to related-key\nattacks, was detected. Modern cryptographic standards recommend the\nadoption of algorithms that integrate message integrity to ensure the\nciphertext remains unaltered.\n\nTo mitigate the issue, use any of the below algorithms instead:\n1. `ChaCha20Poly1305` - Preferred for its simplicity and speed, suitable for \nenvironments where cryptographic acceleration is absent.\n2. `AES-256-GCM` - Highly recommended when hardware support is available, \ndespite being somewhat slower than `ChaCha20Poly1305`. It is crucial to avoid \nnonce reuse with AES-256-GCM to prevent security compromises.\n\nSecure code example using `ChaCha20Poly1305` in Java:\n```\npublic void encryptAndDecrypt() throws Exception {\n    SecureRandom random = new SecureRandom();\n    byte[] secretKey = new byte[32];  // 256-bit key\n    byte[] nonce = new byte[12];      // 96-bit nonce\n    random.nextBytes(secretKey);\n    random.nextBytes(nonce);\n\n    Cipher cipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n    SecretKeySpec keySpec = new SecretKeySpec(secretKey, \"ChaCha20\");\n    GCMParameterSpec spec = new GCMParameterSpec(128, nonce);\n\n    cipher.init(Cipher.ENCRYPT_MODE, keySpec, spec);\n    byte[] plaintext = \"Secret text\".getBytes(StandardCharsets.UTF_8);\n    byte[] ciphertext = cipher.doFinal(plaintext);\n    System.out.println(\"Encrypted: \" + Base64.getEncoder().encodeToString(ciphertext));\n\n    cipher.init(Cipher.DECRYPT_MODE, keySpec, spec);\n    byte[] decrypted = cipher.doFinal(ciphertext);\n    System.out.println(\"Decrypted: \" + new String(decrypted, StandardCharsets.UTF_8));\n}\n```\nFor more on Java Cryptography, refer:\nhttps://docs.oracle.com/en/java/javase/15/security/java-cryptography-architecture-jca-reference-guide.html\n"
              },
              "help": {
                "markdown": "Use of RC2, a deprecated cryptographic algorithm vulnerable to related-key\nattacks, was detected. Modern cryptographic standards recommend the\nadoption of algorithms that integrate message integrity to ensure the\nciphertext remains unaltered.\n\nTo mitigate the issue, use any of the below algorithms instead:\n1. `ChaCha20Poly1305` - Preferred for its simplicity and speed, suitable for \nenvironments where cryptographic acceleration is absent.\n2. `AES-256-GCM` - Highly recommended when hardware support is available, \ndespite being somewhat slower than `ChaCha20Poly1305`. It is crucial to avoid \nnonce reuse with AES-256-GCM to prevent security compromises.\n\nSecure code example using `ChaCha20Poly1305` in Java:\n```\npublic void encryptAndDecrypt() throws Exception {\n    SecureRandom random = new SecureRandom();\n    byte[] secretKey = new byte[32];  // 256-bit key\n    byte[] nonce = new byte[12];      // 96-bit nonce\n    random.nextBytes(secretKey);\n    random.nextBytes(nonce);\n\n    Cipher cipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n    SecretKeySpec keySpec = new SecretKeySpec(secretKey, \"ChaCha20\");\n    GCMParameterSpec spec = new GCMParameterSpec(128, nonce);\n\n    cipher.init(Cipher.ENCRYPT_MODE, keySpec, spec);\n    byte[] plaintext = \"Secret text\".getBytes(StandardCharsets.UTF_8);\n    byte[] ciphertext = cipher.doFinal(plaintext);\n    System.out.println(\"Encrypted: \" + Base64.getEncoder().encodeToString(ciphertext));\n\n    cipher.init(Cipher.DECRYPT_MODE, keySpec, spec);\n    byte[] decrypted = cipher.doFinal(ciphertext);\n    System.out.println(\"Decrypted: \" + new String(decrypted, StandardCharsets.UTF_8));\n}\n```\nFor more on Java Cryptography, refer:\nhttps://docs.oracle.com/en/java/javase/15/security/java-cryptography-architecture-jca-reference-guide.html\n\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Use of RC2, a deprecated cryptographic algorithm vulnerable to related-key\nattacks, was detected. Modern cryptographic standards recommend the\nadoption of algorithms that integrate message integrity to ensure the\nciphertext remains unaltered.\n\nTo mitigate the issue, use any of the below algorithms instead:\n1. `ChaCha20Poly1305` - Preferred for its simplicity and speed, suitable for \nenvironments where cryptographic acceleration is absent.\n2. `AES-256-GCM` - Highly recommended when hardware support is available, \ndespite being somewhat slower than `ChaCha20Poly1305`. It is crucial to avoid \nnonce reuse with AES-256-GCM to prevent security compromises.\n\nSecure code example using `ChaCha20Poly1305` in Java:\n```\npublic void encryptAndDecrypt() throws Exception {\n    SecureRandom random = new SecureRandom();\n    byte[] secretKey = new byte[32];  // 256-bit key\n    byte[] nonce = new byte[12];      // 96-bit nonce\n    random.nextBytes(secretKey);\n    random.nextBytes(nonce);\n\n    Cipher cipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n    SecretKeySpec keySpec = new SecretKeySpec(secretKey, \"ChaCha20\");\n    GCMParameterSpec spec = new GCMParameterSpec(128, nonce);\n\n    cipher.init(Cipher.ENCRYPT_MODE, keySpec, spec);\n    byte[] plaintext = \"Secret text\".getBytes(StandardCharsets.UTF_8);\n    byte[] ciphertext = cipher.doFinal(plaintext);\n    System.out.println(\"Encrypted: \" + Base64.getEncoder().encodeToString(ciphertext));\n\n    cipher.init(Cipher.DECRYPT_MODE, keySpec, spec);\n    byte[] decrypted = cipher.doFinal(ciphertext);\n    System.out.println(\"Decrypted: \" + new String(decrypted, StandardCharsets.UTF_8));\n}\n```\nFor more on Java Cryptography, refer:\nhttps://docs.oracle.com/en/java/javase/15/security/java-cryptography-architecture-jca-reference-guide.html\n"
              },
              "id": "codacy.tools-configs.java_crypto_rule-UseOfRC2",
              "name": "codacy.tools-configs.java_crypto_rule-UseOfRC2",
              "properties": {
                "precision": "very-high",
                "security-severity": "MEDIUM",
                "tags": [
                  "CWE-327",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021-Cryptographic Failures",
                  "OWASP-A3:2017-Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Use of a broken or risky cryptographic algorithm"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Use of RC4 was detected. RC4 is vulnerable to several types of attacks,\nincluding stream cipher attacks where attackers can recover plaintexts by\nanalyzing a large number of encrypted messages, and bit-flipping attacks\nthat can alter messages without knowing the encryption key.\n\nTo mitigate the issue, use any of the below algorithms instead:\n1. `ChaCha20Poly1305` - Preferred for its simplicity and speed, suitable for \nenvironments where cryptographic acceleration is absent.\n2. `AES-256-GCM` - Highly recommended when hardware support is available, \ndespite being somewhat slower than `ChaCha20Poly1305`. It is crucial to avoid \nnonce reuse with AES-256-GCM to prevent security compromises.\n\nSecure code example using `ChaCha20Poly1305` in Java:\n```\npublic void encryptAndDecrypt() throws Exception {\n    SecureRandom random = new SecureRandom();\n    byte[] secretKey = new byte[32];  // 256-bit key\n    byte[] nonce = new byte[12];      // 96-bit nonce\n    random.nextBytes(secretKey);\n    random.nextBytes(nonce);\n\n    Cipher cipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n    SecretKeySpec keySpec = new SecretKeySpec(secretKey, \"ChaCha20\");\n    GCMParameterSpec spec = new GCMParameterSpec(128, nonce);\n\n    cipher.init(Cipher.ENCRYPT_MODE, keySpec, spec);\n    byte[] plaintext = \"Secret text\".getBytes(StandardCharsets.UTF_8);\n    byte[] ciphertext = cipher.doFinal(plaintext);\n    System.out.println(\"Encrypted: \" + Base64.getEncoder().encodeToString(ciphertext));\n\n    cipher.init(Cipher.DECRYPT_MODE, keySpec, spec);\n    byte[] decrypted = cipher.doFinal(ciphertext);\n    System.out.println(\"Decrypted: \" + new String(decrypted, StandardCharsets.UTF_8));\n}\n```\nFor more information, refer:\nhttps://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions\n"
              },
              "help": {
                "markdown": "Use of RC4 was detected. RC4 is vulnerable to several types of attacks,\nincluding stream cipher attacks where attackers can recover plaintexts by\nanalyzing a large number of encrypted messages, and bit-flipping attacks\nthat can alter messages without knowing the encryption key.\n\nTo mitigate the issue, use any of the below algorithms instead:\n1. `ChaCha20Poly1305` - Preferred for its simplicity and speed, suitable for \nenvironments where cryptographic acceleration is absent.\n2. `AES-256-GCM` - Highly recommended when hardware support is available, \ndespite being somewhat slower than `ChaCha20Poly1305`. It is crucial to avoid \nnonce reuse with AES-256-GCM to prevent security compromises.\n\nSecure code example using `ChaCha20Poly1305` in Java:\n```\npublic void encryptAndDecrypt() throws Exception {\n    SecureRandom random = new SecureRandom();\n    byte[] secretKey = new byte[32];  // 256-bit key\n    byte[] nonce = new byte[12];      // 96-bit nonce\n    random.nextBytes(secretKey);\n    random.nextBytes(nonce);\n\n    Cipher cipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n    SecretKeySpec keySpec = new SecretKeySpec(secretKey, \"ChaCha20\");\n    GCMParameterSpec spec = new GCMParameterSpec(128, nonce);\n\n    cipher.init(Cipher.ENCRYPT_MODE, keySpec, spec);\n    byte[] plaintext = \"Secret text\".getBytes(StandardCharsets.UTF_8);\n    byte[] ciphertext = cipher.doFinal(plaintext);\n    System.out.println(\"Encrypted: \" + Base64.getEncoder().encodeToString(ciphertext));\n\n    cipher.init(Cipher.DECRYPT_MODE, keySpec, spec);\n    byte[] decrypted = cipher.doFinal(ciphertext);\n    System.out.println(\"Decrypted: \" + new String(decrypted, StandardCharsets.UTF_8));\n}\n```\nFor more information, refer:\nhttps://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions\n\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n - [https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html](https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html)\n",
                "text": "Use of RC4 was detected. RC4 is vulnerable to several types of attacks,\nincluding stream cipher attacks where attackers can recover plaintexts by\nanalyzing a large number of encrypted messages, and bit-flipping attacks\nthat can alter messages without knowing the encryption key.\n\nTo mitigate the issue, use any of the below algorithms instead:\n1. `ChaCha20Poly1305` - Preferred for its simplicity and speed, suitable for \nenvironments where cryptographic acceleration is absent.\n2. `AES-256-GCM` - Highly recommended when hardware support is available, \ndespite being somewhat slower than `ChaCha20Poly1305`. It is crucial to avoid \nnonce reuse with AES-256-GCM to prevent security compromises.\n\nSecure code example using `ChaCha20Poly1305` in Java:\n```\npublic void encryptAndDecrypt() throws Exception {\n    SecureRandom random = new SecureRandom();\n    byte[] secretKey = new byte[32];  // 256-bit key\n    byte[] nonce = new byte[12];      // 96-bit nonce\n    random.nextBytes(secretKey);\n    random.nextBytes(nonce);\n\n    Cipher cipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n    SecretKeySpec keySpec = new SecretKeySpec(secretKey, \"ChaCha20\");\n    GCMParameterSpec spec = new GCMParameterSpec(128, nonce);\n\n    cipher.init(Cipher.ENCRYPT_MODE, keySpec, spec);\n    byte[] plaintext = \"Secret text\".getBytes(StandardCharsets.UTF_8);\n    byte[] ciphertext = cipher.doFinal(plaintext);\n    System.out.println(\"Encrypted: \" + Base64.getEncoder().encodeToString(ciphertext));\n\n    cipher.init(Cipher.DECRYPT_MODE, keySpec, spec);\n    byte[] decrypted = cipher.doFinal(ciphertext);\n    System.out.println(\"Decrypted: \" + new String(decrypted, StandardCharsets.UTF_8));\n}\n```\nFor more information, refer:\nhttps://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions\n"
              },
              "id": "codacy.tools-configs.java_crypto_rule-UseOfRC4",
              "name": "codacy.tools-configs.java_crypto_rule-UseOfRC4",
              "properties": {
                "precision": "very-high",
                "security-severity": "MEDIUM",
                "tags": [
                  "CWE-327",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021-Cryptographic Failures",
                  "OWASP-A3:2017-Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Use of a broken or risky cryptographic algorithm"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Call '.verify()' before using the token."
              },
              "help": {
                "markdown": "Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Call '.verify()' before using the token.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/)\n - [https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures](https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures)\n",
                "text": "Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Call '.verify()' before using the token."
              },
              "helpUri": "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/",
              "id": "codacy.tools-configs.java_crypto_rule_JwtDecodeWithoutVerify",
              "name": "codacy.tools-configs.java_crypto_rule_JwtDecodeWithoutVerify",
              "properties": {
                "precision": "very-high",
                "security-severity": "MEDIUM",
                "tags": [
                  "CWE-347",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A08:2021-Software and Data Integrity Failures",
                  "OWASP-A8:2017-Insecure Deserialization",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Improper verification of cryptographic signature"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Deserialization of untrusted JMS ObjectMessage can lead to arbitrary \ncode execution. This vulnerability occurs when `ObjectMessage.getObject()` \nis called to deserialize the payload of an ObjectMessage, potentially \nallowing remote attackers to execute arbitrary code with the permissions \nof the JMS MessageListener application. \n\nTo mitigate the issue, avoid deserialization of untrusted data and \nconsider alternative message formats or explicit whitelisting of \nallowable classes for deserialization.\n\nTo implement allowlisting, override the ObjectInputStream#resolveClass() \nmethod to limit deserialization to allowed classes only. This prevents \ndeserialization of any class except those explicitly permitted, such as \nin the following example that restricts deserialization to the Bicycle \nclass only:\n\n```\n// Code from https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html\npublic class LookAheadObjectInputStream extends ObjectInputStream {\n    public LookAheadObjectInputStream(InputStream inputStream) throws IOException {\n        super(inputStream);\n    }\n    /**\n    * Only deserialize instances of our expected Bicycle class\n    */\n    @Override\n    protected Class\u003c?\u003e resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n        if (!desc.getName().equals(Bicycle.class.getName())) {\n            throw new InvalidClassException(\"Unauthorized deserialization attempt\", desc.getName());\n        }\n        return super.resolveClass(desc);\n    }\n}\n```\n"
              },
              "help": {
                "markdown": "Deserialization of untrusted JMS ObjectMessage can lead to arbitrary \ncode execution. This vulnerability occurs when `ObjectMessage.getObject()` \nis called to deserialize the payload of an ObjectMessage, potentially \nallowing remote attackers to execute arbitrary code with the permissions \nof the JMS MessageListener application. \n\nTo mitigate the issue, avoid deserialization of untrusted data and \nconsider alternative message formats or explicit whitelisting of \nallowable classes for deserialization.\n\nTo implement allowlisting, override the ObjectInputStream#resolveClass() \nmethod to limit deserialization to allowed classes only. This prevents \ndeserialization of any class except those explicitly permitted, such as \nin the following example that restricts deserialization to the Bicycle \nclass only:\n\n```\n// Code from https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html\npublic class LookAheadObjectInputStream extends ObjectInputStream {\n    public LookAheadObjectInputStream(InputStream inputStream) throws IOException {\n        super(inputStream);\n    }\n    /**\n    * Only deserialize instances of our expected Bicycle class\n    */\n    @Override\n    protected Class\u003c?\u003e resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n        if (!desc.getName().equals(Bicycle.class.getName())) {\n            throw new InvalidClassException(\"Unauthorized deserialization attempt\", desc.getName());\n        }\n        return super.resolveClass(desc);\n    }\n}\n```\n\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.blackhat.com/docs/us-16/materials/us-16-Kaiser-Pwning-Your-Java-Messaging-With-Deserialization-Vulnerabilities-wp.pdf](https://www.blackhat.com/docs/us-16/materials/us-16-Kaiser-Pwning-Your-Java-Messaging-With-Deserialization-Vulnerabilities-wp.pdf)\n",
                "text": "Deserialization of untrusted JMS ObjectMessage can lead to arbitrary \ncode execution. This vulnerability occurs when `ObjectMessage.getObject()` \nis called to deserialize the payload of an ObjectMessage, potentially \nallowing remote attackers to execute arbitrary code with the permissions \nof the JMS MessageListener application. \n\nTo mitigate the issue, avoid deserialization of untrusted data and \nconsider alternative message formats or explicit whitelisting of \nallowable classes for deserialization.\n\nTo implement allowlisting, override the ObjectInputStream#resolveClass() \nmethod to limit deserialization to allowed classes only. This prevents \ndeserialization of any class except those explicitly permitted, such as \nin the following example that restricts deserialization to the Bicycle \nclass only:\n\n```\n// Code from https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html\npublic class LookAheadObjectInputStream extends ObjectInputStream {\n    public LookAheadObjectInputStream(InputStream inputStream) throws IOException {\n        super(inputStream);\n    }\n    /**\n    * Only deserialize instances of our expected Bicycle class\n    */\n    @Override\n    protected Class\u003c?\u003e resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n        if (!desc.getName().equals(Bicycle.class.getName())) {\n            throw new InvalidClassException(\"Unauthorized deserialization attempt\", desc.getName());\n        }\n        return super.resolveClass(desc);\n    }\n}\n```\n"
              },
              "id": "codacy.tools-configs.java_deserialization_rule-InsecureJmsDeserialization",
              "name": "codacy.tools-configs.java_deserialization_rule-InsecureJmsDeserialization",
              "properties": {
                "precision": "very-high",
                "security-severity": "High",
                "tags": [
                  "CWE-502",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A08:2021-Software and Data Integrity Failures",
                  "OWASP-A8:2017-Insecure Deserialization",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Deserialization of untrusted data"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "User data flows into the host portion of this manually-constructed URL.\nThis could allow an attacker to send data to their own server, potentially\nexposing sensitive data such as cookies or authorization information sent\nwith this request. They could also probe internal servers or other\nresources that the server running this code can access. (This is called\nserver-side request forgery, or SSRF.) Do not allow arbitrary hosts.\nInstead, create an allowlist for approved hosts hardcode the correct host,\nor ensure that the user data can only affect the path or parameters.\n\nExample of using allowlist:\n```\nArrayList\u003cString\u003e allowlist = (ArrayList\u003cString\u003e)\n    Arrays.asList(new String[] { \"https://example.com/api/1\", \"https://example.com/api/2\", \"https://example.com/api/3\"});\n\nif(allowlist.contains(url)){\n  ...\n}\n```\n"
              },
              "help": {
                "markdown": "User data flows into the host portion of this manually-constructed URL.\nThis could allow an attacker to send data to their own server, potentially\nexposing sensitive data such as cookies or authorization information sent\nwith this request. They could also probe internal servers or other\nresources that the server running this code can access. (This is called\nserver-side request forgery, or SSRF.) Do not allow arbitrary hosts.\nInstead, create an allowlist for approved hosts hardcode the correct host,\nor ensure that the user data can only affect the path or parameters.\n\nExample of using allowlist:\n```\nArrayList\u003cString\u003e allowlist = (ArrayList\u003cString\u003e)\n    Arrays.asList(new String[] { \"https://example.com/api/1\", \"https://example.com/api/2\", \"https://example.com/api/3\"});\n\nif(allowlist.contains(url)){\n  ...\n}\n```\n\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)\n",
                "text": "User data flows into the host portion of this manually-constructed URL.\nThis could allow an attacker to send data to their own server, potentially\nexposing sensitive data such as cookies or authorization information sent\nwith this request. They could also probe internal servers or other\nresources that the server running this code can access. (This is called\nserver-side request forgery, or SSRF.) Do not allow arbitrary hosts.\nInstead, create an allowlist for approved hosts hardcode the correct host,\nor ensure that the user data can only affect the path or parameters.\n\nExample of using allowlist:\n```\nArrayList\u003cString\u003e allowlist = (ArrayList\u003cString\u003e)\n    Arrays.asList(new String[] { \"https://example.com/api/1\", \"https://example.com/api/2\", \"https://example.com/api/3\"});\n\nif(allowlist.contains(url)){\n  ...\n}\n```\n"
              },
              "id": "codacy.tools-configs.java_endpoint_rule-ManuallyConstructedURLs",
              "name": "codacy.tools-configs.java_endpoint_rule-ManuallyConstructedURLs",
              "properties": {
                "precision": "very-high",
                "security-severity": "CRITICAL",
                "tags": [
                  "CWE-918",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A10:2021-Server-Side Request Forgery",
                  "OWASP-A1:2017-Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Detect manually constructed URLs"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected a potential path traversal. A malicious actor could control\nthe location of this file, to include going backwards in the directory\nwith '../'. \n\nTo address this, ensure that user-controlled variables in file\npaths are sanitized. You may also consider using a utility method such as\norg.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file\nname from the path.\n\nExample code using FilenameUtils.getName(...)\n\n```\npublic void ok(HttpServletRequest request, HttpServletResponse response)\n        throws ServletException, IOException {\n    String image = request.getParameter(\"image\");\n    File file = new File(\"static/images/\", FilenameUtils.getName(image));\n\n    if (!file.exists()) {\n        log.info(image + \" could not be created.\");\n        response.sendError();\n    }\n\n    response.sendRedirect(\"/index.html\");\n}\n```\n"
              },
              "help": {
                "markdown": "Detected a potential path traversal. A malicious actor could control\nthe location of this file, to include going backwards in the directory\nwith '../'. \n\nTo address this, ensure that user-controlled variables in file\npaths are sanitized. You may also consider using a utility method such as\norg.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file\nname from the path.\n\nExample code using FilenameUtils.getName(...)\n\n```\npublic void ok(HttpServletRequest request, HttpServletResponse response)\n        throws ServletException, IOException {\n    String image = request.getParameter(\"image\");\n    File file = new File(\"static/images/\", FilenameUtils.getName(image));\n\n    if (!file.exists()) {\n        log.info(image + \" could not be created.\");\n        response.sendError();\n    }\n\n    response.sendRedirect(\"/index.html\");\n}\n```\n\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://find-sec-bugs.github.io/bugs.htm#PATH_TRAVERSAL_IN)\n - [https://www.owasp.org/index.php/Path_Traversal](https://www.owasp.org/index.php/Path_Traversal)\n",
                "text": "Detected a potential path traversal. A malicious actor could control\nthe location of this file, to include going backwards in the directory\nwith '../'. \n\nTo address this, ensure that user-controlled variables in file\npaths are sanitized. You may also consider using a utility method such as\norg.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file\nname from the path.\n\nExample code using FilenameUtils.getName(...)\n\n```\npublic void ok(HttpServletRequest request, HttpServletResponse response)\n        throws ServletException, IOException {\n    String image = request.getParameter(\"image\");\n    File file = new File(\"static/images/\", FilenameUtils.getName(image));\n\n    if (!file.exists()) {\n        log.info(image + \" could not be created.\");\n        response.sendError();\n    }\n\n    response.sendRedirect(\"/index.html\");\n}\n```\n"
              },
              "helpUri": "https://find-sec-bugs.github.io/bugs.htm#PATH_TRAVERSAL_IN",
              "id": "codacy.tools-configs.java_file_rule_rule-FilePathTraversalHttpServlet",
              "name": "codacy.tools-configs.java_file_rule_rule-FilePathTraversalHttpServlet",
              "properties": {
                "precision": "very-high",
                "security-severity": "CRITICAL",
                "tags": [
                  "CWE-22",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021-Broken Access Control",
                  "OWASP-A5:2017-Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected input from a HTTPServletRequest going into the environment\nvariables of an 'exec' command. The user input is passed directly to\nthe Runtime.exec() function to set an environment variable. This allows \nmalicious input from the user to modify the command that will be executed.\nTo remediate this, do not pass user input directly to Runtime.exec().\nValidate any user input before using it to set environment variables \nor command arguments. Consider using an allow list of allowed values\nrather than a deny list. If dynamic commands must be constructed, use\na map to look up valid values based on user input instead of using \nthe input directly.\nExample of safely executing an OS command:\n```\npublic void doPost(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n  response.setContentType(\"text/html;charset=UTF-8\");\n\n  String param = \"\";\n  if (request.getHeader(\"UserDefined\") != null) {\n      param = request.getHeader(\"UserDefined\");\n  }\n\n  param = java.net.URLDecoder.decode(param, \"UTF-8\");\n  String cmd = \"/bin/cmd\";\n\n  String[] allowList = {\"FOO=true\",\"FOO=false\",\"BAR=true\", \"BAR=false\"}\n  if(Arrays.asList(allowList).contains(param)){\n      String[] argsEnv = {param};\n  }\n  \n  Runtime r = Runtime.getRuntime();\n\n  try {\n      Process p = r.exec(cmd, argsEnv);\n      printOSCommandResults(p, response);        \n  } catch (IOException e) {\n      System.out.println(\"Problem executing command\");\n      response.getWriter()\n              .println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(e.getMessage()));\n      return;\n  }\n```\n"
              },
              "help": {
                "markdown": "Detected input from a HTTPServletRequest going into the environment\nvariables of an 'exec' command. The user input is passed directly to\nthe Runtime.exec() function to set an environment variable. This allows \nmalicious input from the user to modify the command that will be executed.\nTo remediate this, do not pass user input directly to Runtime.exec().\nValidate any user input before using it to set environment variables \nor command arguments. Consider using an allow list of allowed values\nrather than a deny list. If dynamic commands must be constructed, use\na map to look up valid values based on user input instead of using \nthe input directly.\nExample of safely executing an OS command:\n```\npublic void doPost(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n  response.setContentType(\"text/html;charset=UTF-8\");\n\n  String param = \"\";\n  if (request.getHeader(\"UserDefined\") != null) {\n      param = request.getHeader(\"UserDefined\");\n  }\n\n  param = java.net.URLDecoder.decode(param, \"UTF-8\");\n  String cmd = \"/bin/cmd\";\n\n  String[] allowList = {\"FOO=true\",\"FOO=false\",\"BAR=true\", \"BAR=false\"}\n  if(Arrays.asList(allowList).contains(param)){\n      String[] argsEnv = {param};\n  }\n  \n  Runtime r = Runtime.getRuntime();\n\n  try {\n      Process p = r.exec(cmd, argsEnv);\n      printOSCommandResults(p, response);        \n  } catch (IOException e) {\n      System.out.println(\"Problem executing command\");\n      response.getWriter()\n              .println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(e.getMessage()));\n      return;\n  }\n```\n\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
                "text": "Detected input from a HTTPServletRequest going into the environment\nvariables of an 'exec' command. The user input is passed directly to\nthe Runtime.exec() function to set an environment variable. This allows \nmalicious input from the user to modify the command that will be executed.\nTo remediate this, do not pass user input directly to Runtime.exec().\nValidate any user input before using it to set environment variables \nor command arguments. Consider using an allow list of allowed values\nrather than a deny list. If dynamic commands must be constructed, use\na map to look up valid values based on user input instead of using \nthe input directly.\nExample of safely executing an OS command:\n```\npublic void doPost(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n  response.setContentType(\"text/html;charset=UTF-8\");\n\n  String param = \"\";\n  if (request.getHeader(\"UserDefined\") != null) {\n      param = request.getHeader(\"UserDefined\");\n  }\n\n  param = java.net.URLDecoder.decode(param, \"UTF-8\");\n  String cmd = \"/bin/cmd\";\n\n  String[] allowList = {\"FOO=true\",\"FOO=false\",\"BAR=true\", \"BAR=false\"}\n  if(Arrays.asList(allowList).contains(param)){\n      String[] argsEnv = {param};\n  }\n  \n  Runtime r = Runtime.getRuntime();\n\n  try {\n      Process p = r.exec(cmd, argsEnv);\n      printOSCommandResults(p, response);        \n  } catch (IOException e) {\n      System.out.println(\"Problem executing command\");\n      response.getWriter()\n              .println(org.owasp.esapi.ESAPI.encoder().encodeForHTML(e.getMessage()));\n      return;\n  }\n```\n"
              },
              "id": "codacy.tools-configs.java_inject_rule-EnvInjection",
              "name": "codacy.tools-configs.java_inject_rule-EnvInjection",
              "properties": {
                "precision": "very-high",
                "security-severity": "HIGH",
                "tags": [
                  "CWE-78",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021-Injection",
                  "OWASP-A1:2017-Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Improper neutralization of special elements used in an OS command ('OS Command Injection')"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The application was found to permit the `RuntimePermission` of `createClassLoader`,\n`ReflectPermission` of `suppressAccessChecks`, or both.\n\nBy granting the `RuntimePermission` of `createClassLoader`, a compromised application\ncould instantiate their own class loaders and load arbitrary classes.\n\nBy granting the `ReflectPermission` of `suppressAccessChecks` an application will no longer\ncheck Java language access checks on fields and methods of a class. This will effectively\ngrant access to protected and private members.\n\nFor more information on `RuntimePermission` see:\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/RuntimePermission.html\n\nFor more information on `ReflectPermission` see:\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/reflect/ReflectPermission.html\n"
              },
              "help": {
                "markdown": "The application was found to permit the `RuntimePermission` of `createClassLoader`,\n`ReflectPermission` of `suppressAccessChecks`, or both.\n\nBy granting the `RuntimePermission` of `createClassLoader`, a compromised application\ncould instantiate their own class loaders and load arbitrary classes.\n\nBy granting the `ReflectPermission` of `suppressAccessChecks` an application will no longer\ncheck Java language access checks on fields and methods of a class. This will effectively\ngrant access to protected and private members.\n\nFor more information on `RuntimePermission` see:\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/RuntimePermission.html\n\nFor more information on `ReflectPermission` see:\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/reflect/ReflectPermission.html\n",
                "text": "The application was found to permit the `RuntimePermission` of `createClassLoader`,\n`ReflectPermission` of `suppressAccessChecks`, or both.\n\nBy granting the `RuntimePermission` of `createClassLoader`, a compromised application\ncould instantiate their own class loaders and load arbitrary classes.\n\nBy granting the `ReflectPermission` of `suppressAccessChecks` an application will no longer\ncheck Java language access checks on fields and methods of a class. This will effectively\ngrant access to protected and private members.\n\nFor more information on `RuntimePermission` see:\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/RuntimePermission.html\n\nFor more information on `ReflectPermission` see:\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/reflect/ReflectPermission.html\n"
              },
              "id": "codacy.tools-configs.java_perm_rule-DangerousPermissions",
              "name": "codacy.tools-configs.java_perm_rule-DangerousPermissions",
              "properties": {
                "precision": "very-high",
                "security-severity": "Medium",
                "tags": [
                  "CWE-732",
                  "HIGH CONFIDENCE",
                  "OWASP-A01:2021-Broken Access Control",
                  "OWASP-A5:2017-Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Incorrect permission assignment for critical resource"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The application was found setting file permissions to overly permissive values. Consider\nusing the following values if the application user is the only process to access\nthe file:\n\n- `r--` - read only access to the file\n- `w--` - write only access to the file\n- `rw-` - read/write access to the file\n\nExample setting read/write permissions for only the owner of a `Path`:\n```\n// Get a reference to the path\nPath path = Paths.get(\"/tmp/somefile\");\n// Create a PosixFilePermission set from java.nio.file.attribute\nSet\u003cPosixFilePermission\u003e permissions =\njava.nio.file.attribute.PosixFilePermissions.fromString(\"rw-------\");\n// Set the permissions\njava.nio.file.Files.setPosixFilePermissions(path, permissions);\n```\n\nFor all other values please see:\nhttps://en.wikipedia.org/wiki/File-system_permissions#Symbolic_notation\n"
              },
              "help": {
                "markdown": "The application was found setting file permissions to overly permissive values. Consider\nusing the following values if the application user is the only process to access\nthe file:\n\n- `r--` - read only access to the file\n- `w--` - write only access to the file\n- `rw-` - read/write access to the file\n\nExample setting read/write permissions for only the owner of a `Path`:\n```\n// Get a reference to the path\nPath path = Paths.get(\"/tmp/somefile\");\n// Create a PosixFilePermission set from java.nio.file.attribute\nSet\u003cPosixFilePermission\u003e permissions =\njava.nio.file.attribute.PosixFilePermissions.fromString(\"rw-------\");\n// Set the permissions\njava.nio.file.Files.setPosixFilePermissions(path, permissions);\n```\n\nFor all other values please see:\nhttps://en.wikipedia.org/wiki/File-system_permissions#Symbolic_notation\n",
                "text": "The application was found setting file permissions to overly permissive values. Consider\nusing the following values if the application user is the only process to access\nthe file:\n\n- `r--` - read only access to the file\n- `w--` - write only access to the file\n- `rw-` - read/write access to the file\n\nExample setting read/write permissions for only the owner of a `Path`:\n```\n// Get a reference to the path\nPath path = Paths.get(\"/tmp/somefile\");\n// Create a PosixFilePermission set from java.nio.file.attribute\nSet\u003cPosixFilePermission\u003e permissions =\njava.nio.file.attribute.PosixFilePermissions.fromString(\"rw-------\");\n// Set the permissions\njava.nio.file.Files.setPosixFilePermissions(path, permissions);\n```\n\nFor all other values please see:\nhttps://en.wikipedia.org/wiki/File-system_permissions#Symbolic_notation\n"
              },
              "id": "codacy.tools-configs.java_perm_rule-OverlyPermissiveFilePermissionInline",
              "name": "codacy.tools-configs.java_perm_rule-OverlyPermissiveFilePermissionInline",
              "properties": {
                "precision": "very-high",
                "security-severity": "Medium",
                "tags": [
                  "CWE-732",
                  "HIGH CONFIDENCE",
                  "OWASP-A01:2021-Broken Access Control",
                  "OWASP-A5:2017-Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Incorrect permission assignment for critical resource"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The application is using `Integer.toHexString` on a digest array buffer which\nmay lead to an incorrect version of values.\n\nConsider using the `java.util.HexFormat` object introduced in Java 17. For older Java applications\nconsider using the `javax.xml.bind.DatatypeConverter`.\n\nExample using `HexFormat` to create a human-readable string:\n```\n// Create a MessageDigest using the SHA-384 algorithm\nMessageDigest sha384Digest = MessageDigest.getInstance(\"SHA-384\");\n// Call update with your data\nsha384Digest.update(\"some input\".getBytes(StandardCharsets.UTF_8));\n// Only call digest once all data has been fed into the update sha384digest instance\nbyte[] output = sha384Digest.digest();\n// Create a JDK 17 HexFormat object\nHexFormat hex = HexFormat.of();\n// Use formatHex on the byte array to create a string (note that alphabet characters are\nlowercase)\nString hexString = hex.formatHex(output);\n```\n\nFor more information on DatatypeConverter see:\nhttps://docs.oracle.com/javase/9/docs/api/javax/xml/bind/DatatypeConverter.html#printHexBinary-byte:A-\n"
              },
              "help": {
                "markdown": "The application is using `Integer.toHexString` on a digest array buffer which\nmay lead to an incorrect version of values.\n\nConsider using the `java.util.HexFormat` object introduced in Java 17. For older Java applications\nconsider using the `javax.xml.bind.DatatypeConverter`.\n\nExample using `HexFormat` to create a human-readable string:\n```\n// Create a MessageDigest using the SHA-384 algorithm\nMessageDigest sha384Digest = MessageDigest.getInstance(\"SHA-384\");\n// Call update with your data\nsha384Digest.update(\"some input\".getBytes(StandardCharsets.UTF_8));\n// Only call digest once all data has been fed into the update sha384digest instance\nbyte[] output = sha384Digest.digest();\n// Create a JDK 17 HexFormat object\nHexFormat hex = HexFormat.of();\n// Use formatHex on the byte array to create a string (note that alphabet characters are\nlowercase)\nString hexString = hex.formatHex(output);\n```\n\nFor more information on DatatypeConverter see:\nhttps://docs.oracle.com/javase/9/docs/api/javax/xml/bind/DatatypeConverter.html#printHexBinary-byte:A-\n",
                "text": "The application is using `Integer.toHexString` on a digest array buffer which\nmay lead to an incorrect version of values.\n\nConsider using the `java.util.HexFormat` object introduced in Java 17. For older Java applications\nconsider using the `javax.xml.bind.DatatypeConverter`.\n\nExample using `HexFormat` to create a human-readable string:\n```\n// Create a MessageDigest using the SHA-384 algorithm\nMessageDigest sha384Digest = MessageDigest.getInstance(\"SHA-384\");\n// Call update with your data\nsha384Digest.update(\"some input\".getBytes(StandardCharsets.UTF_8));\n// Only call digest once all data has been fed into the update sha384digest instance\nbyte[] output = sha384Digest.digest();\n// Create a JDK 17 HexFormat object\nHexFormat hex = HexFormat.of();\n// Use formatHex on the byte array to create a string (note that alphabet characters are\nlowercase)\nString hexString = hex.formatHex(output);\n```\n\nFor more information on DatatypeConverter see:\nhttps://docs.oracle.com/javase/9/docs/api/javax/xml/bind/DatatypeConverter.html#printHexBinary-byte:A-\n"
              },
              "id": "codacy.tools-configs.java_strings_rule-BadHexConversion",
              "name": "codacy.tools-configs.java_strings_rule-BadHexConversion",
              "properties": {
                "precision": "very-high",
                "security-severity": "Info",
                "tags": [
                  "CWE-704",
                  "HIGH CONFIDENCE",
                  "OWASP-A05:2021-Security Misconfiguration",
                  "OWASP-A6:2017-Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Incorrect type conversion or cast"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "The application allows user input to control format string parameters. By passing invalid\nformat\nstring specifiers an adversary could cause the application to throw exceptions or possibly\nleak\ninternal information depending on application logic.\n\nNever allow user-supplied input to be used to create a format string. Replace all format\nstring\narguments with hardcoded format strings containing the necessary specifiers.\n\nExample of using `String.format` safely:\n```\n// Get untrusted user input\nString userInput = request.getParameter(\"someInput\");\n// Ensure that user input is not included in the first argument to String.format\nString.format(\"Hardcoded string expecting a string: %s\", userInput);\n// ...\n```\n"
              },
              "help": {
                "markdown": "The application allows user input to control format string parameters. By passing invalid\nformat\nstring specifiers an adversary could cause the application to throw exceptions or possibly\nleak\ninternal information depending on application logic.\n\nNever allow user-supplied input to be used to create a format string. Replace all format\nstring\narguments with hardcoded format strings containing the necessary specifiers.\n\nExample of using `String.format` safely:\n```\n// Get untrusted user input\nString userInput = request.getParameter(\"someInput\");\n// Ensure that user input is not included in the first argument to String.format\nString.format(\"Hardcoded string expecting a string: %s\", userInput);\n// ...\n```\n",
                "text": "The application allows user input to control format string parameters. By passing invalid\nformat\nstring specifiers an adversary could cause the application to throw exceptions or possibly\nleak\ninternal information depending on application logic.\n\nNever allow user-supplied input to be used to create a format string. Replace all format\nstring\narguments with hardcoded format strings containing the necessary specifiers.\n\nExample of using `String.format` safely:\n```\n// Get untrusted user input\nString userInput = request.getParameter(\"someInput\");\n// Ensure that user input is not included in the first argument to String.format\nString.format(\"Hardcoded string expecting a string: %s\", userInput);\n// ...\n```\n"
              },
              "id": "codacy.tools-configs.java_strings_rule-FormatStringManipulation",
              "name": "codacy.tools-configs.java_strings_rule-FormatStringManipulation",
              "properties": {
                "precision": "very-high",
                "security-severity": "Medium",
                "tags": [
                  "CWE-134",
                  "HIGH CONFIDENCE",
                  "OWASP-A03:2021-Injection",
                  "OWASP-A1:2017-Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Use of externally-controlled format string"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The application was found matching a variable during a regular expression\npattern match, and then calling string modification functions after validation has occurred.\nThis is usually indicative of a poor input validation strategy as an adversary may attempt to\nexploit the removal of characters.\n\nFor example a common mistake in attempting to remove path characters to protect against path\ntraversal is to match '../' and then remove any matches. However, if an adversary were to\ninclude in their input: '....//' then the `replace`  method would replace the first `../` but\ncause the leading `..` and trailing `/` to join into the final string of `../`, effectively\nbypassing the check.\n\nTo remediate this issue always perform string modifications before any validation of a string.\nIt is strongly recommended that strings be encoded instead of replaced or removed prior to\nvalidation.\n\n\nExample replaces `..` before validation. Do note this is still not a recommended method for\nprotecting against directory traversal, always use randomly generated IDs or filenames instead:\n```\n// This is ONLY for demonstration purpose, never use untrusted input\n// in paths, always use randomly generated filenames or IDs.\nString input = \"test../....//dir\";\n// Use replaceAll _not_ replace\ninput = input.replaceAll(\"\\\\.\\\\.\", \"\");\n// Input would be test///dir at this point\n// Create a pattern to match on\nPattern pattern = Pattern.compile(\"\\\\.\\\\.\");\n// Create a matcher\nMatcher match = pattern.matcher(input);\n// Call find to see if .. is still in our string\nif (match.find()) {\n    throw new Exception(\".. detected\");\n}\n// Use the input (but do not modify the string)\nSystem.out.println(input + \" safe\");\n```\n\nFor more information see Carnegie Mellon University's Secure Coding Guide:\nhttps://wiki.sei.cmu.edu/confluence/display/java/IDS11-J.+Perform+any+string+modifications+before+validation\n\n"
              },
              "help": {
                "markdown": "The application was found matching a variable during a regular expression\npattern match, and then calling string modification functions after validation has occurred.\nThis is usually indicative of a poor input validation strategy as an adversary may attempt to\nexploit the removal of characters.\n\nFor example a common mistake in attempting to remove path characters to protect against path\ntraversal is to match '../' and then remove any matches. However, if an adversary were to\ninclude in their input: '....//' then the `replace`  method would replace the first `../` but\ncause the leading `..` and trailing `/` to join into the final string of `../`, effectively\nbypassing the check.\n\nTo remediate this issue always perform string modifications before any validation of a string.\nIt is strongly recommended that strings be encoded instead of replaced or removed prior to\nvalidation.\n\n\nExample replaces `..` before validation. Do note this is still not a recommended method for\nprotecting against directory traversal, always use randomly generated IDs or filenames instead:\n```\n// This is ONLY for demonstration purpose, never use untrusted input\n// in paths, always use randomly generated filenames or IDs.\nString input = \"test../....//dir\";\n// Use replaceAll _not_ replace\ninput = input.replaceAll(\"\\\\.\\\\.\", \"\");\n// Input would be test///dir at this point\n// Create a pattern to match on\nPattern pattern = Pattern.compile(\"\\\\.\\\\.\");\n// Create a matcher\nMatcher match = pattern.matcher(input);\n// Call find to see if .. is still in our string\nif (match.find()) {\n    throw new Exception(\".. detected\");\n}\n// Use the input (but do not modify the string)\nSystem.out.println(input + \" safe\");\n```\n\nFor more information see Carnegie Mellon University's Secure Coding Guide:\nhttps://wiki.sei.cmu.edu/confluence/display/java/IDS11-J.+Perform+any+string+modifications+before+validation\n\n",
                "text": "The application was found matching a variable during a regular expression\npattern match, and then calling string modification functions after validation has occurred.\nThis is usually indicative of a poor input validation strategy as an adversary may attempt to\nexploit the removal of characters.\n\nFor example a common mistake in attempting to remove path characters to protect against path\ntraversal is to match '../' and then remove any matches. However, if an adversary were to\ninclude in their input: '....//' then the `replace`  method would replace the first `../` but\ncause the leading `..` and trailing `/` to join into the final string of `../`, effectively\nbypassing the check.\n\nTo remediate this issue always perform string modifications before any validation of a string.\nIt is strongly recommended that strings be encoded instead of replaced or removed prior to\nvalidation.\n\n\nExample replaces `..` before validation. Do note this is still not a recommended method for\nprotecting against directory traversal, always use randomly generated IDs or filenames instead:\n```\n// This is ONLY for demonstration purpose, never use untrusted input\n// in paths, always use randomly generated filenames or IDs.\nString input = \"test../....//dir\";\n// Use replaceAll _not_ replace\ninput = input.replaceAll(\"\\\\.\\\\.\", \"\");\n// Input would be test///dir at this point\n// Create a pattern to match on\nPattern pattern = Pattern.compile(\"\\\\.\\\\.\");\n// Create a matcher\nMatcher match = pattern.matcher(input);\n// Call find to see if .. is still in our string\nif (match.find()) {\n    throw new Exception(\".. detected\");\n}\n// Use the input (but do not modify the string)\nSystem.out.println(input + \" safe\");\n```\n\nFor more information see Carnegie Mellon University's Secure Coding Guide:\nhttps://wiki.sei.cmu.edu/confluence/display/java/IDS11-J.+Perform+any+string+modifications+before+validation\n\n"
              },
              "id": "codacy.tools-configs.java_strings_rule-ModifyAfterValidation",
              "name": "codacy.tools-configs.java_strings_rule-ModifyAfterValidation",
              "properties": {
                "precision": "very-high",
                "security-severity": "Info",
                "tags": [
                  "CWE-182",
                  "HIGH CONFIDENCE",
                  "OWASP-A03:2021-Injection",
                  "OWASP-A1:2017-Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Collapse of data into unsafe value"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The application was found matching a variable during a regular expression\npattern match, and then calling a Unicode normalize function after validation has occurred.\nThis is usually indicative of a poor input validation strategy as an adversary may attempt to\nexploit the normalization process.\n\nTo remediate this issue, always perform Unicode normalization before any validation of a\nstring.\n\nExample of normalizing a string before validation:\n```\n// User input possibly containing malicious unicode\nString userInput = \"\\uFE64\" + \"tag\" + \"\\uFE65\";\n// Normalize the input\nuserInput = Normalizer.normalize(userInput, Normalizer.Form.NFKC);\n// Compile our regex pattern looking for \u003c or \u003e characters\nPattern pattern = Pattern.compile(\"[\u003c\u003e]\");\n// Create a matcher from the userInput\nMatcher matcher = pattern.matcher(userInput);\n// See if the matcher matches\nif (matcher.find()) {\n    // It did so throw an error\n    throw new Exception(\"found banned characters in input\");\n}\n```\n\nFor more information see Carnegie Mellon University's Secure Coding Guide:\nhttps://wiki.sei.cmu.edu/confluence/display/java/IDS01-J.+Normalize+strings+before+validating+them\n"
              },
              "help": {
                "markdown": "The application was found matching a variable during a regular expression\npattern match, and then calling a Unicode normalize function after validation has occurred.\nThis is usually indicative of a poor input validation strategy as an adversary may attempt to\nexploit the normalization process.\n\nTo remediate this issue, always perform Unicode normalization before any validation of a\nstring.\n\nExample of normalizing a string before validation:\n```\n// User input possibly containing malicious unicode\nString userInput = \"\\uFE64\" + \"tag\" + \"\\uFE65\";\n// Normalize the input\nuserInput = Normalizer.normalize(userInput, Normalizer.Form.NFKC);\n// Compile our regex pattern looking for \u003c or \u003e characters\nPattern pattern = Pattern.compile(\"[\u003c\u003e]\");\n// Create a matcher from the userInput\nMatcher matcher = pattern.matcher(userInput);\n// See if the matcher matches\nif (matcher.find()) {\n    // It did so throw an error\n    throw new Exception(\"found banned characters in input\");\n}\n```\n\nFor more information see Carnegie Mellon University's Secure Coding Guide:\nhttps://wiki.sei.cmu.edu/confluence/display/java/IDS01-J.+Normalize+strings+before+validating+them\n",
                "text": "The application was found matching a variable during a regular expression\npattern match, and then calling a Unicode normalize function after validation has occurred.\nThis is usually indicative of a poor input validation strategy as an adversary may attempt to\nexploit the normalization process.\n\nTo remediate this issue, always perform Unicode normalization before any validation of a\nstring.\n\nExample of normalizing a string before validation:\n```\n// User input possibly containing malicious unicode\nString userInput = \"\\uFE64\" + \"tag\" + \"\\uFE65\";\n// Normalize the input\nuserInput = Normalizer.normalize(userInput, Normalizer.Form.NFKC);\n// Compile our regex pattern looking for \u003c or \u003e characters\nPattern pattern = Pattern.compile(\"[\u003c\u003e]\");\n// Create a matcher from the userInput\nMatcher matcher = pattern.matcher(userInput);\n// See if the matcher matches\nif (matcher.find()) {\n    // It did so throw an error\n    throw new Exception(\"found banned characters in input\");\n}\n```\n\nFor more information see Carnegie Mellon University's Secure Coding Guide:\nhttps://wiki.sei.cmu.edu/confluence/display/java/IDS01-J.+Normalize+strings+before+validating+them\n"
              },
              "id": "codacy.tools-configs.java_strings_rule-NormalizeAfterValidation",
              "name": "codacy.tools-configs.java_strings_rule-NormalizeAfterValidation",
              "properties": {
                "precision": "very-high",
                "security-severity": "Info",
                "tags": [
                  "CWE-180",
                  "HIGH CONFIDENCE",
                  "OWASP-A03:2021-Injection",
                  "OWASP-A1:2017-Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Incorrect behavior order: validate before canonicalize"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "DOCTYPE declarations are enabled for $DBFACTORY. Without prohibiting\nexternal entity declarations, this is vulnerable to XML external entity\nattacks. In an XXE attack, an attacker can exploit the processing of external \nentity references within an XML document to access internal files, conduct \ndenial-of-service attacks, or SSRF (Server Side Request Forgery), potentially \nleading to sensitive information disclosure or system compromise.\n\nTo mitigate this vulnerability, disable this by setting the feature\n\"http://apache.org/xml/features/disallow-doctype-decl\" to true.\nAlternatively, allow DOCTYPE declarations and only prohibit external\nentities declarations. This can be done by setting the features\n\"http://xml.org/sax/features/external-general-entities\" and\n\"http://xml.org/sax/features/external-parameter-entities\" to false.\n\nSecure Code Example: \n``` \npublic void GoodXMLInputFactory() throws  ParserConfigurationException {\n  DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n  dbf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n} \n```\n"
              },
              "help": {
                "markdown": "DOCTYPE declarations are enabled for $DBFACTORY. Without prohibiting\nexternal entity declarations, this is vulnerable to XML external entity\nattacks. In an XXE attack, an attacker can exploit the processing of external \nentity references within an XML document to access internal files, conduct \ndenial-of-service attacks, or SSRF (Server Side Request Forgery), potentially \nleading to sensitive information disclosure or system compromise.\n\nTo mitigate this vulnerability, disable this by setting the feature\n\"http://apache.org/xml/features/disallow-doctype-decl\" to true.\nAlternatively, allow DOCTYPE declarations and only prohibit external\nentities declarations. This can be done by setting the features\n\"http://xml.org/sax/features/external-general-entities\" and\n\"http://xml.org/sax/features/external-parameter-entities\" to false.\n\nSecure Code Example: \n``` \npublic void GoodXMLInputFactory() throws  ParserConfigurationException {\n  DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n  dbf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n} \n```\n\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://blog.sonarsource.com/secure-xml-processor](https://blog.sonarsource.com/secure-xml-processor)\n - [https://xerces.apache.org/xerces2-j/features.html](https://xerces.apache.org/xerces2-j/features.html)\n",
                "text": "DOCTYPE declarations are enabled for $DBFACTORY. Without prohibiting\nexternal entity declarations, this is vulnerable to XML external entity\nattacks. In an XXE attack, an attacker can exploit the processing of external \nentity references within an XML document to access internal files, conduct \ndenial-of-service attacks, or SSRF (Server Side Request Forgery), potentially \nleading to sensitive information disclosure or system compromise.\n\nTo mitigate this vulnerability, disable this by setting the feature\n\"http://apache.org/xml/features/disallow-doctype-decl\" to true.\nAlternatively, allow DOCTYPE declarations and only prohibit external\nentities declarations. This can be done by setting the features\n\"http://xml.org/sax/features/external-general-entities\" and\n\"http://xml.org/sax/features/external-parameter-entities\" to false.\n\nSecure Code Example: \n``` \npublic void GoodXMLInputFactory() throws  ParserConfigurationException {\n  DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n  dbf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n} \n```\n"
              },
              "id": "codacy.tools-configs.java_xxe_rule-DisallowDoctypeDeclFalse",
              "name": "codacy.tools-configs.java_xxe_rule-DisallowDoctypeDeclFalse",
              "properties": {
                "precision": "very-high",
                "security-severity": "MEDIUM",
                "tags": [
                  "CWE-611",
                  "HIGH CONFIDENCE",
                  "OWASP-A05:2021-Security Misconfiguration",
                  "OWASP-A4:2017-XML External Entities (XXE)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Improper restriction of XML external entity reference"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "DOCTYPE declarations are enabled for this DocumentBuilderFactory. Enabling \nDOCTYPE declarations without proper restrictions can make your application \nvulnerable to XML External Entity (XXE) attacks. \nIn an XXE attack, an attacker can exploit the processing of external entity \nreferences within an XML document to access internal files, conduct \ndenial-of-service attacks, or SSRF (Server Side Request Forgery), potentially \nleading to sensitive information disclosure or system compromise. \n\nTo mitigate this vulnerability, disable this by setting the\nfeature \"http://apache.org/xml/features/disallow-doctype-decl\" to true.\nAlternatively, allow DOCTYPE declarations and only prohibit external\nentities declarations. This can be done by setting the features\n\"http://xml.org/sax/features/external-general-entities\" and\n\"http://xml.org/sax/features/external-parameter-entities\" to false.\n\nSecure Code Example (You can do either of the following):\n```\npublic void GoodDocumentBuilderFactory() throws  ParserConfigurationException {\n  DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n  dbf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n  dbf.newDocumentBuilder();\n}\n\npublic void GoodDocumentBuilderFactory2() throws  ParserConfigurationException {\n  DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n  dbf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n  dbf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n  dbf.newDocumentBuilder();\n}\n```\n"
              },
              "help": {
                "markdown": "DOCTYPE declarations are enabled for this DocumentBuilderFactory. Enabling \nDOCTYPE declarations without proper restrictions can make your application \nvulnerable to XML External Entity (XXE) attacks. \nIn an XXE attack, an attacker can exploit the processing of external entity \nreferences within an XML document to access internal files, conduct \ndenial-of-service attacks, or SSRF (Server Side Request Forgery), potentially \nleading to sensitive information disclosure or system compromise. \n\nTo mitigate this vulnerability, disable this by setting the\nfeature \"http://apache.org/xml/features/disallow-doctype-decl\" to true.\nAlternatively, allow DOCTYPE declarations and only prohibit external\nentities declarations. This can be done by setting the features\n\"http://xml.org/sax/features/external-general-entities\" and\n\"http://xml.org/sax/features/external-parameter-entities\" to false.\n\nSecure Code Example (You can do either of the following):\n```\npublic void GoodDocumentBuilderFactory() throws  ParserConfigurationException {\n  DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n  dbf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n  dbf.newDocumentBuilder();\n}\n\npublic void GoodDocumentBuilderFactory2() throws  ParserConfigurationException {\n  DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n  dbf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n  dbf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n  dbf.newDocumentBuilder();\n}\n```\n\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://semgrep.dev/blog/2022/xml-security-in-java](https://semgrep.dev/blog/2022/xml-security-in-java)\n - [https://semgrep.dev/docs/cheat-sheets/java-xxe/](https://semgrep.dev/docs/cheat-sheets/java-xxe/)\n - [https://blog.sonarsource.com/secure-xml-processor](https://blog.sonarsource.com/secure-xml-processor)\n - [https://xerces.apache.org/xerces2-j/features.html](https://xerces.apache.org/xerces2-j/features.html)\n",
                "text": "DOCTYPE declarations are enabled for this DocumentBuilderFactory. Enabling \nDOCTYPE declarations without proper restrictions can make your application \nvulnerable to XML External Entity (XXE) attacks. \nIn an XXE attack, an attacker can exploit the processing of external entity \nreferences within an XML document to access internal files, conduct \ndenial-of-service attacks, or SSRF (Server Side Request Forgery), potentially \nleading to sensitive information disclosure or system compromise. \n\nTo mitigate this vulnerability, disable this by setting the\nfeature \"http://apache.org/xml/features/disallow-doctype-decl\" to true.\nAlternatively, allow DOCTYPE declarations and only prohibit external\nentities declarations. This can be done by setting the features\n\"http://xml.org/sax/features/external-general-entities\" and\n\"http://xml.org/sax/features/external-parameter-entities\" to false.\n\nSecure Code Example (You can do either of the following):\n```\npublic void GoodDocumentBuilderFactory() throws  ParserConfigurationException {\n  DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n  dbf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n  dbf.newDocumentBuilder();\n}\n\npublic void GoodDocumentBuilderFactory2() throws  ParserConfigurationException {\n  DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n  dbf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n  dbf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n  dbf.newDocumentBuilder();\n}\n```\n"
              },
              "id": "codacy.tools-configs.java_xxe_rule-DocumentBuilderFactoryDisallowDoctypeDeclMissing",
              "name": "codacy.tools-configs.java_xxe_rule-DocumentBuilderFactoryDisallowDoctypeDeclMissing",
              "properties": {
                "precision": "very-high",
                "security-severity": "MEDIUM",
                "tags": [
                  "CWE-611",
                  "HIGH CONFIDENCE",
                  "OWASP-A05:2021-Security Misconfiguration",
                  "OWASP-A4:2017-XML External Entities (XXE)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Improper restriction of XML external entity reference"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Use of angular.element can lead to XSS if user-input is treated as part of the HTML element within `$SINK`. It is recommended to contextually output encode user-input, before inserting into `$SINK`. If the HTML needs to be preserved it is recommended to sanitize the input using $sce.getTrustedHTML or $sanitize."
              },
              "help": {
                "markdown": "Use of angular.element can lead to XSS if user-input is treated as part of the HTML element within `$SINK`. It is recommended to contextually output encode user-input, before inserting into `$SINK`. If the HTML needs to be preserved it is recommended to sanitize the input using $sce.getTrustedHTML or $sanitize.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.angularjs.org/api/ng/function/angular.element](https://docs.angularjs.org/api/ng/function/angular.element)\n - [https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf](https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf)\n",
                "text": "Use of angular.element can lead to XSS if user-input is treated as part of the HTML element within `$SINK`. It is recommended to contextually output encode user-input, before inserting into `$SINK`. If the HTML needs to be preserved it is recommended to sanitize the input using $sce.getTrustedHTML or $sanitize."
              },
              "id": "codacy.tools-configs.javascript.angular.security.detect-angular-element-taint.detect-angular-element-taint",
              "name": "codacy.tools-configs.javascript.angular.security.detect-angular-element-taint.detect-angular-element-taint",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.angular.security.detect-angular-element-taint.detect-angular-element-taint"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "$sceProvider is set to false. Disabling Strict Contextual escaping (SCE) in an AngularJS application could provide additional attack surface for XSS vulnerabilities."
              },
              "help": {
                "markdown": "$sceProvider is set to false. Disabling Strict Contextual escaping (SCE) in an AngularJS application could provide additional attack surface for XSS vulnerabilities.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.angularjs.org/api/ng/service/$sce](https://docs.angularjs.org/api/ng/service/$sce)\n - [https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf](https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf)\n",
                "text": "$sceProvider is set to false. Disabling Strict Contextual escaping (SCE) in an AngularJS application could provide additional attack surface for XSS vulnerabilities."
              },
              "id": "codacy.tools-configs.javascript.angular.security.detect-angular-sce-disabled.detect-angular-sce-disabled",
              "name": "codacy.tools-configs.javascript.angular.security.detect-angular-sce-disabled.detect-angular-sce-disabled",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "HIGH CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.angular.security.detect-angular-sce-disabled.detect-angular-sce-disabled"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The use of $sce.trustAs can be dangerous if unsanitized user input flows through this API."
              },
              "help": {
                "markdown": "The use of $sce.trustAs can be dangerous if unsanitized user input flows through this API.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.angularjs.org/api/ng/service/$sce](https://docs.angularjs.org/api/ng/service/$sce)\n - [https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf](https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf)\n",
                "text": "The use of $sce.trustAs can be dangerous if unsanitized user input flows through this API."
              },
              "id": "codacy.tools-configs.javascript.angular.security.detect-angular-trust-as-method.detect-angular-trust-as-method",
              "name": "codacy.tools-configs.javascript.angular.security.detect-angular-trust-as-method.detect-angular-trust-as-method",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.angular.security.detect-angular-trust-as-method.detect-angular-trust-as-method"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Prefer Argon2id where possible. Per RFC9016, section 4 IETF recommends selecting Argon2id unless you can guarantee an adversary has no direct access to the computing environment."
              },
              "help": {
                "markdown": "Prefer Argon2id where possible. Per RFC9016, section 4 IETF recommends selecting Argon2id unless you can guarantee an adversary has no direct access to the computing environment.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)\n - [https://eprint.iacr.org/2016/759.pdf](https://eprint.iacr.org/2016/759.pdf)\n - [https://www.cs.tau.ac.il/~tromer/papers/cache-joc-20090619.pdf](https://www.cs.tau.ac.il/~tromer/papers/cache-joc-20090619.pdf)\n - [https://datatracker.ietf.org/doc/html/rfc9106#section-4](https://datatracker.ietf.org/doc/html/rfc9106#section-4)\n",
                "text": "Prefer Argon2id where possible. Per RFC9016, section 4 IETF recommends selecting Argon2id unless you can guarantee an adversary has no direct access to the computing environment."
              },
              "id": "codacy.tools-configs.javascript.argon2.security.unsafe-argon2-config.unsafe-argon2-config",
              "name": "codacy.tools-configs.javascript.argon2.security.unsafe-argon2-config.unsafe-argon2-config",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-916: Use of Password Hash With Insufficient Computational Effort",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.argon2.security.unsafe-argon2-config.unsafe-argon2-config"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Allowing spawning arbitrary programs or running shell processes with arbitrary arguments may end up in a command injection vulnerability. Try to avoid non-literal values for the command string. If it is not possible, then do not let running arbitrary commands, use a white list for inputs."
              },
              "help": {
                "markdown": "Allowing spawning arbitrary programs or running shell processes with arbitrary arguments may end up in a command injection vulnerability. Try to avoid non-literal values for the command string. If it is not possible, then do not let running arbitrary commands, use a white list for inputs.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
                "text": "Allowing spawning arbitrary programs or running shell processes with arbitrary arguments may end up in a command injection vulnerability. Try to avoid non-literal values for the command string. If it is not possible, then do not let running arbitrary commands, use a white list for inputs."
              },
              "id": "codacy.tools-configs.javascript.aws-lambda.security.detect-child-process.detect-child-process",
              "name": "codacy.tools-configs.javascript.aws-lambda.security.detect-child-process.detect-child-process",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.aws-lambda.security.detect-child-process.detect-child-process"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected DynamoDB query params that are tainted by `$EVENT` object. This could lead to NoSQL injection if the variable is user-controlled and not properly sanitized. Explicitly assign query params instead of passing data from `$EVENT` directly to DynamoDB client."
              },
              "help": {
                "markdown": "Detected DynamoDB query params that are tainted by `$EVENT` object. This could lead to NoSQL injection if the variable is user-controlled and not properly sanitized. Explicitly assign query params instead of passing data from `$EVENT` directly to DynamoDB client.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
                "text": "Detected DynamoDB query params that are tainted by `$EVENT` object. This could lead to NoSQL injection if the variable is user-controlled and not properly sanitized. Explicitly assign query params instead of passing data from `$EVENT` directly to DynamoDB client."
              },
              "id": "codacy.tools-configs.javascript.aws-lambda.security.dynamodb-request-object.dynamodb-request-object",
              "name": "codacy.tools-configs.javascript.aws-lambda.security.dynamodb-request-object.dynamodb-request-object",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-943: Improper Neutralization of Special Elements in Data Query Logic",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.aws-lambda.security.dynamodb-request-object.dynamodb-request-object"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `knex.raw('SELECT $1 from table', [userinput])`"
              },
              "help": {
                "markdown": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `knex.raw('SELECT $1 from table', [userinput])`\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://knexjs.org/#Builder-fromRaw](https://knexjs.org/#Builder-fromRaw)\n - [https://knexjs.org/#Builder-whereRaw](https://knexjs.org/#Builder-whereRaw)\n",
                "text": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `knex.raw('SELECT $1 from table', [userinput])`"
              },
              "id": "codacy.tools-configs.javascript.aws-lambda.security.knex-sqli.knex-sqli",
              "name": "codacy.tools-configs.javascript.aws-lambda.security.knex-sqli.knex-sqli",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.aws-lambda.security.knex-sqli.knex-sqli"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `connection.query('SELECT $1 from table', [userinput])`"
              },
              "help": {
                "markdown": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `connection.query('SELECT $1 from table', [userinput])`\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.npmjs.com/package/mysql2](https://www.npmjs.com/package/mysql2)\n",
                "text": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `connection.query('SELECT $1 from table', [userinput])`"
              },
              "id": "codacy.tools-configs.javascript.aws-lambda.security.mysql-sqli.mysql-sqli",
              "name": "codacy.tools-configs.javascript.aws-lambda.security.mysql-sqli.mysql-sqli",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.aws-lambda.security.mysql-sqli.mysql-sqli"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `connection.query('SELECT $1 from table', [userinput])`"
              },
              "help": {
                "markdown": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `connection.query('SELECT $1 from table', [userinput])`\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://node-postgres.com/features/queries](https://node-postgres.com/features/queries)\n",
                "text": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `connection.query('SELECT $1 from table', [userinput])`"
              },
              "id": "codacy.tools-configs.javascript.aws-lambda.security.pg-sqli.pg-sqli",
              "name": "codacy.tools-configs.javascript.aws-lambda.security.pg-sqli.pg-sqli",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.aws-lambda.security.pg-sqli.pg-sqli"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `sequelize.query('SELECT * FROM projects WHERE status = ?', { replacements: ['active'], type: QueryTypes.SELECT });`"
              },
              "help": {
                "markdown": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `sequelize.query('SELECT * FROM projects WHERE status = ?', { replacements: ['active'], type: QueryTypes.SELECT });`\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://sequelize.org/master/manual/raw-queries.html](https://sequelize.org/master/manual/raw-queries.html)\n",
                "text": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `sequelize.query('SELECT * FROM projects WHERE status = ?', { replacements: ['active'], type: QueryTypes.SELECT });`"
              },
              "id": "codacy.tools-configs.javascript.aws-lambda.security.sequelize-sqli.sequelize-sqli",
              "name": "codacy.tools-configs.javascript.aws-lambda.security.sequelize-sqli.sequelize-sqli",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.aws-lambda.security.sequelize-sqli.sequelize-sqli"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected user input flowing into an HTML response. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data."
              },
              "help": {
                "markdown": "Detected user input flowing into an HTML response. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
                "text": "Detected user input flowing into an HTML response. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data."
              },
              "id": "codacy.tools-configs.javascript.aws-lambda.security.tainted-html-response.tainted-html-response",
              "name": "codacy.tools-configs.javascript.aws-lambda.security.tainted-html-response.tainted-html-response",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.aws-lambda.security.tainted-html-response.tainted-html-response"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates which will safely render HTML instead."
              },
              "help": {
                "markdown": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates which will safely render HTML instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
                "text": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates which will safely render HTML instead."
              },
              "id": "codacy.tools-configs.javascript.aws-lambda.security.tainted-html-string.tainted-html-string",
              "name": "codacy.tools-configs.javascript.aws-lambda.security.tainted-html-string.tainted-html-string",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.aws-lambda.security.tainted-html-string.tainted-html-string"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."
              },
              "help": {
                "markdown": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/www-community/attacks/SQL_Injection](https://owasp.org/www-community/attacks/SQL_Injection)\n",
                "text": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."
              },
              "id": "codacy.tools-configs.javascript.aws-lambda.security.tainted-sql-string.tainted-sql-string",
              "name": "codacy.tools-configs.javascript.aws-lambda.security.tainted-sql-string.tainted-sql-string",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.aws-lambda.security.tainted-sql-string.tainted-sql-string"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "The `vm` module enables compiling and running code within V8 Virtual Machine contexts. The `vm` module is not a security mechanism. Do not use it to run untrusted code. If code passed to `vm` functions is controlled by user input it could result in command injection. Do not let user input in `vm` functions."
              },
              "help": {
                "markdown": "The `vm` module enables compiling and running code within V8 Virtual Machine contexts. The `vm` module is not a security mechanism. Do not use it to run untrusted code. If code passed to `vm` functions is controlled by user input it could result in command injection. Do not let user input in `vm` functions.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
                "text": "The `vm` module enables compiling and running code within V8 Virtual Machine contexts. The `vm` module is not a security mechanism. Do not use it to run untrusted code. If code passed to `vm` functions is controlled by user input it could result in command injection. Do not let user input in `vm` functions."
              },
              "id": "codacy.tools-configs.javascript.aws-lambda.security.vm-runincontext-injection.vm-runincontext-injection",
              "name": "codacy.tools-configs.javascript.aws-lambda.security.vm-runincontext-injection.vm-runincontext-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-94: Improper Control of Generation of Code ('Code Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.aws-lambda.security.vm-runincontext-injection.vm-runincontext-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The application accepts potentially user-controlled input `$PROP` which can control the location of the current window context. This can lead two types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript URIs. It is recommended to validate user-controllable input before allowing it to control the redirection."
              },
              "help": {
                "markdown": "The application accepts potentially user-controlled input `$PROP` which can control the location of the current window context. This can lead two types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript URIs. It is recommended to validate user-controllable input before allowing it to control the redirection.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)\n",
                "text": "The application accepts potentially user-controlled input `$PROP` which can control the location of the current window context. This can lead two types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript URIs. It is recommended to validate user-controllable input before allowing it to control the redirection."
              },
              "id": "codacy.tools-configs.javascript.browser.security.open-redirect.js-open-redirect",
              "name": "codacy.tools-configs.javascript.browser.security.open-redirect.js-open-redirect",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')",
                  "HIGH CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.browser.security.open-redirect.js-open-redirect"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "User controlled data in a HTML string may result in XSS"
              },
              "help": {
                "markdown": "User controlled data in a HTML string may result in XSS\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/www-community/attacks/xss/](https://owasp.org/www-community/attacks/xss/)\n",
                "text": "User controlled data in a HTML string may result in XSS"
              },
              "id": "codacy.tools-configs.javascript.browser.security.raw-html-concat.raw-html-concat",
              "name": "codacy.tools-configs.javascript.browser.security.raw-html-concat.raw-html-concat",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.browser.security.raw-html-concat.raw-html-concat"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The target origin of the window.postMessage() API is set to \"*\". This could allow for information disclosure due to the possibility of any origin allowed to receive the message."
              },
              "help": {
                "markdown": "The target origin of the window.postMessage() API is set to \"*\". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures](https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures)\n",
                "text": "The target origin of the window.postMessage() API is set to \"*\". This could allow for information disclosure due to the possibility of any origin allowed to receive the message."
              },
              "id": "codacy.tools-configs.javascript.browser.security.wildcard-postmessage-configuration.wildcard-postmessage-configuration",
              "name": "codacy.tools-configs.javascript.browser.security.wildcard-postmessage-configuration.wildcard-postmessage-configuration",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-345: Insufficient Verification of Data Authenticity",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A08:2021 - Software and Data Integrity Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.browser.security.wildcard-postmessage-configuration.wildcard-postmessage-configuration"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "If unverified user data can reach the `compileScript` method it can result in Server-Side Request Forgery vulnerabilities"
              },
              "help": {
                "markdown": "If unverified user data can reach the `compileScript` method it can result in Server-Side Request Forgery vulnerabilities\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://github.com/cyrus-and/chrome-remote-interface](https://github.com/cyrus-and/chrome-remote-interface)\n",
                "text": "If unverified user data can reach the `compileScript` method it can result in Server-Side Request Forgery vulnerabilities"
              },
              "id": "codacy.tools-configs.javascript.chrome-remote-interface.security.audit.chrome-remote-interface-compilescript-injection.chrome-remote-interface-compilescript-injection",
              "name": "codacy.tools-configs.javascript.chrome-remote-interface.security.audit.chrome-remote-interface-compilescript-injection.chrome-remote-interface-compilescript-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-918: Server-Side Request Forgery (SSRF)",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A10:2021 - Server-Side Request Forgery (SSRF)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.chrome-remote-interface.security.audit.chrome-remote-interface-compilescript-injection.chrome-remote-interface-compilescript-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected non-literal calls to Deno.run(). This could lead to a command injection vulnerability."
              },
              "help": {
                "markdown": "Detected non-literal calls to Deno.run(). This could lead to a command injection vulnerability.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://deno.land/manual/examples/subprocess#simple-example](https://deno.land/manual/examples/subprocess#simple-example)\n",
                "text": "Detected non-literal calls to Deno.run(). This could lead to a command injection vulnerability."
              },
              "id": "codacy.tools-configs.javascript.deno.security.audit.deno-dangerous-run.deno-dangerous-run",
              "name": "codacy.tools-configs.javascript.deno.security.audit.deno-dangerous-run.deno-dangerous-run",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.deno.security.audit.deno-dangerous-run.deno-dangerous-run"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource."
              },
              "help": {
                "markdown": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.npmjs.com/package/serve-index](https://www.npmjs.com/package/serve-index)\n - [https://www.acunetix.com/blog/articles/directory-listing-information-disclosure/](https://www.acunetix.com/blog/articles/directory-listing-information-disclosure/)\n",
                "text": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource."
              },
              "id": "codacy.tools-configs.javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
              "name": "codacy.tools-configs.javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-548: Exposure of Information Through Directory Listing",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "OWASP-A06:2017 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Don’t use the default session cookie name Using the default session cookie name can open your app to attacks. The security issue posed is similar to X-Powered-By: a potential attacker can use it to fingerprint the server and target attacks accordingly."
              },
              "help": {
                "markdown": "Don’t use the default session cookie name Using the default session cookie name can open your app to attacks. The security issue posed is similar to X-Powered-By: a potential attacker can use it to fingerprint the server and target attacks accordingly.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://expressjs.com/en/advanced/best-practice-security.html)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n",
                "text": "Don’t use the default session cookie name Using the default session cookie name can open your app to attacks. The security issue posed is similar to X-Powered-By: a potential attacker can use it to fingerprint the server and target attacks accordingly."
              },
              "helpUri": "https://expressjs.com/en/advanced/best-practice-security.html",
              "id": "codacy.tools-configs.javascript.express.security.audit.express-cookie-settings.express-cookie-session-default-name",
              "name": "codacy.tools-configs.javascript.express.security.audit.express-cookie-settings.express-cookie-session-default-name",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-522: Insufficiently Protected Credentials",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2017 - Broken Authentication",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.audit.express-cookie-settings.express-cookie-session-default-name"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next."
              },
              "help": {
                "markdown": "Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://expressjs.com/en/advanced/best-practice-security.html)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n",
                "text": "Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next."
              },
              "helpUri": "https://expressjs.com/en/advanced/best-practice-security.html",
              "id": "codacy.tools-configs.javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-domain",
              "name": "codacy.tools-configs.javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-domain",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-522: Insufficiently Protected Credentials",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2017 - Broken Authentication",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-domain"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Default session middleware settings: `expires` not set. Use it to set expiration date for persistent cookies."
              },
              "help": {
                "markdown": "Default session middleware settings: `expires` not set. Use it to set expiration date for persistent cookies.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://expressjs.com/en/advanced/best-practice-security.html)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n",
                "text": "Default session middleware settings: `expires` not set. Use it to set expiration date for persistent cookies."
              },
              "helpUri": "https://expressjs.com/en/advanced/best-practice-security.html",
              "id": "codacy.tools-configs.javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-expires",
              "name": "codacy.tools-configs.javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-expires",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-522: Insufficiently Protected Credentials",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2017 - Broken Authentication",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-expires"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Default session middleware settings: `httpOnly` not set. It ensures the cookie is sent only over HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks."
              },
              "help": {
                "markdown": "Default session middleware settings: `httpOnly` not set. It ensures the cookie is sent only over HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://expressjs.com/en/advanced/best-practice-security.html)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n",
                "text": "Default session middleware settings: `httpOnly` not set. It ensures the cookie is sent only over HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks."
              },
              "helpUri": "https://expressjs.com/en/advanced/best-practice-security.html",
              "id": "codacy.tools-configs.javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-httponly",
              "name": "codacy.tools-configs.javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-httponly",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-522: Insufficiently Protected Credentials",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2017 - Broken Authentication",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-httponly"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request."
              },
              "help": {
                "markdown": "Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://expressjs.com/en/advanced/best-practice-security.html)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n",
                "text": "Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request."
              },
              "helpUri": "https://expressjs.com/en/advanced/best-practice-security.html",
              "id": "codacy.tools-configs.javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-path",
              "name": "codacy.tools-configs.javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-path",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-522: Insufficiently Protected Credentials",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2017 - Broken Authentication",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-path"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Default session middleware settings: `secure` not set. It ensures the browser only sends the cookie over HTTPS."
              },
              "help": {
                "markdown": "Default session middleware settings: `secure` not set. It ensures the browser only sends the cookie over HTTPS.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://expressjs.com/en/advanced/best-practice-security.html)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n",
                "text": "Default session middleware settings: `secure` not set. It ensures the browser only sends the cookie over HTTPS."
              },
              "helpUri": "https://expressjs.com/en/advanced/best-practice-security.html",
              "id": "codacy.tools-configs.javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-secure",
              "name": "codacy.tools-configs.javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-secure",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-522: Insufficiently Protected Credentials",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2017 - Broken Authentication",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-secure"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "No token revoking configured for `express-jwt`. A leaked token could still be used and unable to be revoked. Consider using function as the `isRevoked` option."
              },
              "help": {
                "markdown": "No token revoking configured for `express-jwt`. A leaked token could still be used and unable to be revoked. Consider using function as the `isRevoked` option.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/security/expirejwt.md)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n",
                "text": "No token revoking configured for `express-jwt`. A leaked token could still be used and unable to be revoked. Consider using function as the `isRevoked` option."
              },
              "helpUri": "https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/security/expirejwt.md",
              "id": "codacy.tools-configs.javascript.express.security.audit.express-jwt-not-revoked.express-jwt-not-revoked",
              "name": "codacy.tools-configs.javascript.express.security.audit.express-jwt-not-revoked.express-jwt-not-revoked",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-522: Insufficiently Protected Credentials",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2017 - Broken Authentication",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.audit.express-jwt-not-revoked.express-jwt-not-revoked"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "The libxml library processes user-input with the `noent` attribute is set to `true` which can lead to being vulnerable to XML External Entities (XXE) type attacks. It is recommended to set `noent` to `false` when using this feature to ensure you are protected."
              },
              "help": {
                "markdown": "The libxml library processes user-input with the `noent` attribute is set to `true` which can lead to being vulnerable to XML External Entities (XXE) type attacks. It is recommended to set `noent` to `false` when using this feature to ensure you are protected.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)\n",
                "text": "The libxml library processes user-input with the `noent` attribute is set to `true` which can lead to being vulnerable to XML External Entities (XXE) type attacks. It is recommended to set `noent` to `false` when using this feature to ensure you are protected."
              },
              "id": "codacy.tools-configs.javascript.express.security.audit.express-libxml-noent.express-libxml-noent",
              "name": "codacy.tools-configs.javascript.express.security.audit.express-libxml-noent.express-libxml-noent",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-611: Improper Restriction of XML External Entity Reference",
                  "HIGH CONFIDENCE",
                  "OWASP-A04:2017 - XML External Entities (XXE)",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.audit.express-libxml-noent.express-libxml-noent"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The application redirects to a URL specified by user-supplied input `$REQ` that is not validated. This could redirect users to malicious locations. Consider using an allow-list approach to validate URLs, or warn users they are being redirected to a third-party website."
              },
              "help": {
                "markdown": "The application redirects to a URL specified by user-supplied input `$REQ` that is not validated. This could redirect users to malicious locations. Consider using an allow-list approach to validate URLs, or warn users they are being redirected to a third-party website.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)\n",
                "text": "The application redirects to a URL specified by user-supplied input `$REQ` that is not validated. This could redirect users to malicious locations. Consider using an allow-list approach to validate URLs, or warn users they are being redirected to a third-party website."
              },
              "id": "codacy.tools-configs.javascript.express.security.audit.express-open-redirect.express-open-redirect",
              "name": "codacy.tools-configs.javascript.express.security.audit.express-open-redirect.express-open-redirect",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')",
                  "HIGH CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.audit.express-open-redirect.express-open-redirect"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Possible writing outside of the destination, make sure that the target path is nested in the intended destination"
              },
              "help": {
                "markdown": "Possible writing outside of the destination, make sure that the target path is nested in the intended destination\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/www-community/attacks/Path_Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
                "text": "Possible writing outside of the destination, make sure that the target path is nested in the intended destination"
              },
              "id": "codacy.tools-configs.javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal",
              "name": "codacy.tools-configs.javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "OWASP-A05:2017 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing."
              },
              "help": {
                "markdown": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html)\n",
                "text": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing."
              },
              "id": "codacy.tools-configs.javascript.express.security.audit.express-res-sendfile.express-res-sendfile",
              "name": "codacy.tools-configs.javascript.express.security.audit.express-res-sendfile.express-res-sendfile",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-73: External Control of File Name or Path",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.audit.express-res-sendfile.express-res-sendfile"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
              },
              "help": {
                "markdown": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n",
                "text": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
              },
              "id": "codacy.tools-configs.javascript.express.security.audit.express-session-hardcoded-secret.express-session-hardcoded-secret",
              "name": "codacy.tools-configs.javascript.express.security.audit.express-session-hardcoded-secret.express-session-hardcoded-secret",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-798: Use of Hard-coded Credentials",
                  "HIGH CONFIDENCE",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.audit.express-session-hardcoded-secret.express-session-hardcoded-secret"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The following request $REQUEST.$METHOD() was found to be crafted from user-input `$REQ` which can lead to Server-Side Request Forgery (SSRF) vulnerabilities. It is recommended where possible to not allow user-input to craft the base request, but to be treated as part of the path or query parameter. When user-input is necessary to craft the request, it is recommeneded to follow OWASP best practices to prevent abuse. "
              },
              "help": {
                "markdown": "The following request $REQUEST.$METHOD() was found to be crafted from user-input `$REQ` which can lead to Server-Side Request Forgery (SSRF) vulnerabilities. It is recommended where possible to not allow user-input to craft the base request, but to be treated as part of the path or query parameter. When user-input is necessary to craft the request, it is recommeneded to follow OWASP best practices to prevent abuse. \n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)\n",
                "text": "The following request $REQUEST.$METHOD() was found to be crafted from user-input `$REQ` which can lead to Server-Side Request Forgery (SSRF) vulnerabilities. It is recommended where possible to not allow user-input to craft the base request, but to be treated as part of the path or query parameter. When user-input is necessary to craft the request, it is recommeneded to follow OWASP best practices to prevent abuse. "
              },
              "id": "codacy.tools-configs.javascript.express.security.audit.express-ssrf.express-ssrf",
              "name": "codacy.tools-configs.javascript.express.security.audit.express-ssrf.express-ssrf",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-918: Server-Side Request Forgery (SSRF)",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A10:2021 - Server-Side Request Forgery (SSRF)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.audit.express-ssrf.express-ssrf"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The following function call $SER.$FUNC accepts user controlled data which can result in Remote Code Execution (RCE) through Object Deserialization. It is recommended to use secure data processing alternatives such as JSON.parse() and Buffer.from()."
              },
              "help": {
                "markdown": "The following function call $SER.$FUNC accepts user controlled data which can result in Remote Code Execution (RCE) through Object Deserialization. It is recommended to use secure data processing alternatives such as JSON.parse() and Buffer.from().\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\n",
                "text": "The following function call $SER.$FUNC accepts user controlled data which can result in Remote Code Execution (RCE) through Object Deserialization. It is recommended to use secure data processing alternatives such as JSON.parse() and Buffer.from()."
              },
              "id": "codacy.tools-configs.javascript.express.security.audit.express-third-party-object-deserialization.express-third-party-object-deserialization",
              "name": "codacy.tools-configs.javascript.express.security.audit.express-third-party-object-deserialization.express-third-party-object-deserialization",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-502: Deserialization of Untrusted Data",
                  "HIGH CONFIDENCE",
                  "OWASP-A08:2017 - Insecure Deserialization",
                  "OWASP-A08:2021 - Software and Data Integrity Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.audit.express-third-party-object-deserialization.express-third-party-object-deserialization"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Xml Parser is used inside Request Event. Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities"
              },
              "help": {
                "markdown": "Xml Parser is used inside Request Event. Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.npmjs.com/package/xml2json](https://www.npmjs.com/package/xml2json)\n",
                "text": "Xml Parser is used inside Request Event. Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities"
              },
              "id": "codacy.tools-configs.javascript.express.security.audit.express-xml2json-xxe-event.express-xml2json-xxe-event",
              "name": "codacy.tools-configs.javascript.express.security.audit.express-xml2json-xxe-event.express-xml2json-xxe-event",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-611: Improper Restriction of XML External Entity Reference",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A04:2017 - XML External Entities (XXE)",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.audit.express-xml2json-xxe-event.express-xml2json-xxe-event"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "User controllable data `$REQ` enters `$RES.render(...)` this can lead to the loading of other HTML/templating pages that they may not be authorized to render. An attacker may attempt to use directory traversal techniques e.g. `../folder/index` to access other HTML pages on the file system. Where possible, do not allow users to define what should be  loaded in $RES.render or use an allow list for the existing application."
              },
              "help": {
                "markdown": "User controllable data `$REQ` enters `$RES.render(...)` this can lead to the loading of other HTML/templating pages that they may not be authorized to render. An attacker may attempt to use directory traversal techniques e.g. `../folder/index` to access other HTML pages on the file system. Where possible, do not allow users to define what should be  loaded in $RES.render or use an allow list for the existing application.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [http://expressjs.com/en/4x/api.html#res.render](http://expressjs.com/en/4x/api.html#res.render)\n",
                "text": "User controllable data `$REQ` enters `$RES.render(...)` this can lead to the loading of other HTML/templating pages that they may not be authorized to render. An attacker may attempt to use directory traversal techniques e.g. `../folder/index` to access other HTML pages on the file system. Where possible, do not allow users to define what should be  loaded in $RES.render or use an allow list for the existing application."
              },
              "id": "codacy.tools-configs.javascript.express.security.audit.res-render-injection.res-render-injection",
              "name": "codacy.tools-configs.javascript.express.security.audit.res-render-injection.res-render-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-706: Use of Incorrectly-Resolved Name or Reference",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.audit.res-render-injection.res-render-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML."
              },
              "help": {
                "markdown": "Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n",
                "text": "Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML."
              },
              "id": "codacy.tools-configs.javascript.express.security.audit.xss.direct-response-write.direct-response-write",
              "name": "codacy.tools-configs.javascript.express.security.audit.xss.direct-response-write.direct-response-write",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.audit.xss.direct-response-write.direct-response-write"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "By letting user input control CORS parameters, there is a risk that software does not properly verify that the source of data or communication is valid. Use literal values for CORS settings."
              },
              "help": {
                "markdown": "By letting user input control CORS parameters, there is a risk that software does not properly verify that the source of data or communication is valid. Use literal values for CORS settings.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)\n",
                "text": "By letting user input control CORS parameters, there is a risk that software does not properly verify that the source of data or communication is valid. Use literal values for CORS settings."
              },
              "id": "codacy.tools-configs.javascript.express.security.cors-misconfiguration.cors-misconfiguration",
              "name": "codacy.tools-configs.javascript.express.security.cors-misconfiguration.cors-misconfiguration",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-346: Origin Validation Error",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.cors-misconfiguration.cors-misconfiguration"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities."
              },
              "help": {
                "markdown": "Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://github.com/astro/node-expat](https://github.com/astro/node-expat)\n",
                "text": "Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities."
              },
              "id": "codacy.tools-configs.javascript.express.security.express-expat-xxe.express-expat-xxe",
              "name": "codacy.tools-configs.javascript.express.security.express-expat-xxe.express-expat-xxe",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-611: Improper Restriction of XML External Entity Reference",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A04:2017 - XML External Entities (XXE)",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.express-expat-xxe.express-expat-xxe"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "User data from `$REQ` is being compiled into the template, which can lead to a Server Side Template Injection (SSTI) vulnerability."
              },
              "help": {
                "markdown": "User data from `$REQ` is being compiled into the template, which can lead to a Server Side Template Injection (SSTI) vulnerability.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html)\n",
                "text": "User data from `$REQ` is being compiled into the template, which can lead to a Server Side Template Injection (SSTI) vulnerability."
              },
              "id": "codacy.tools-configs.javascript.express.security.express-insecure-template-usage.express-insecure-template-usage",
              "name": "codacy.tools-configs.javascript.express.security.express-insecure-template-usage.express-insecure-template-usage",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-1336: Improper Neutralization of Special Elements Used in a Template Engine",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.express-insecure-template-usage.express-insecure-template-usage"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
              },
              "help": {
                "markdown": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n",
                "text": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
              },
              "id": "codacy.tools-configs.javascript.express.security.express-jwt-hardcoded-secret.express-jwt-hardcoded-secret",
              "name": "codacy.tools-configs.javascript.express.security.express-jwt-hardcoded-secret.express-jwt-hardcoded-secret",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-798: Use of Hard-coded Credentials",
                  "HIGH CONFIDENCE",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.express-jwt-hardcoded-secret.express-jwt-hardcoded-secret"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery vulnerabilities"
              },
              "help": {
                "markdown": "If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery vulnerabilities\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://phantomjs.org/page-automation.html](https://phantomjs.org/page-automation.html)\n",
                "text": "If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery vulnerabilities"
              },
              "id": "codacy.tools-configs.javascript.express.security.express-phantom-injection.express-phantom-injection",
              "name": "codacy.tools-configs.javascript.express.security.express-phantom-injection.express-phantom-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-918: Server-Side Request Forgery (SSRF)",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A10:2021 - Server-Side Request Forgery (SSRF)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.express-phantom-injection.express-phantom-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "If unverified user data can reach the `puppeteer` methods it can result in Server-Side Request Forgery vulnerabilities"
              },
              "help": {
                "markdown": "If unverified user data can reach the `puppeteer` methods it can result in Server-Side Request Forgery vulnerabilities\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://pptr.dev/api/puppeteer.page](https://pptr.dev/api/puppeteer.page)\n",
                "text": "If unverified user data can reach the `puppeteer` methods it can result in Server-Side Request Forgery vulnerabilities"
              },
              "id": "codacy.tools-configs.javascript.express.security.express-puppeteer-injection.express-puppeteer-injection",
              "name": "codacy.tools-configs.javascript.express.security.express-puppeteer-injection.express-puppeteer-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-918: Server-Side Request Forgery (SSRF)",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A10:2021 - Server-Side Request Forgery (SSRF)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.express-puppeteer-injection.express-puppeteer-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Make sure that unverified user data can not reach `sandbox`."
              },
              "help": {
                "markdown": "Make sure that unverified user data can not reach `sandbox`.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html)\n",
                "text": "Make sure that unverified user data can not reach `sandbox`."
              },
              "id": "codacy.tools-configs.javascript.express.security.express-sandbox-injection.express-sandbox-code-injection",
              "name": "codacy.tools-configs.javascript.express.security.express-sandbox-injection.express-sandbox-code-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-94: Improper Control of Generation of Code ('Code Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.express-sandbox-injection.express-sandbox-code-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Make sure that unverified user data can not reach `$VM`."
              },
              "help": {
                "markdown": "Make sure that unverified user data can not reach `$VM`.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html)\n",
                "text": "Make sure that unverified user data can not reach `$VM`."
              },
              "id": "codacy.tools-configs.javascript.express.security.express-vm-injection.express-vm-injection",
              "name": "codacy.tools-configs.javascript.express.security.express-vm-injection.express-vm-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-94: Improper Control of Generation of Code ('Code Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.express-vm-injection.express-vm-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Make sure that unverified user data can not reach `vm2`."
              },
              "help": {
                "markdown": "Make sure that unverified user data can not reach `vm2`.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html)\n",
                "text": "Make sure that unverified user data can not reach `vm2`."
              },
              "id": "codacy.tools-configs.javascript.express.security.express-vm2-injection.express-vm2-injection",
              "name": "codacy.tools-configs.javascript.express.security.express-vm2-injection.express-vm2-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-94: Improper Control of Generation of Code ('Code Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.express-vm2-injection.express-vm2-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities"
              },
              "help": {
                "markdown": "Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.npmjs.com/package/xml2json](https://www.npmjs.com/package/xml2json)\n",
                "text": "Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities"
              },
              "id": "codacy.tools-configs.javascript.express.security.express-xml2json-xxe.express-xml2json-xxe",
              "name": "codacy.tools-configs.javascript.express.security.express-xml2json-xxe.express-xml2json-xxe",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-611: Improper Restriction of XML External Entity Reference",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A04:2017 - XML External Entities (XXE)",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.express-xml2json-xxe.express-xml2json-xxe"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "User data flows into the host portion of this manually-constructed HTML. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. Consider using a sanitization library such as DOMPurify to sanitize the HTML within."
              },
              "help": {
                "markdown": "User data flows into the host portion of this manually-constructed HTML. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. Consider using a sanitization library such as DOMPurify to sanitize the HTML within.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n",
                "text": "User data flows into the host portion of this manually-constructed HTML. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. Consider using a sanitization library such as DOMPurify to sanitize the HTML within."
              },
              "id": "codacy.tools-configs.javascript.express.security.injection.raw-html-format.raw-html-format",
              "name": "codacy.tools-configs.javascript.express.security.injection.raw-html-format.raw-html-format",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.injection.raw-html-format.raw-html-format"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."
              },
              "help": {
                "markdown": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/www-community/attacks/SQL_Injection](https://owasp.org/www-community/attacks/SQL_Injection)\n",
                "text": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."
              },
              "id": "codacy.tools-configs.javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
              "name": "codacy.tools-configs.javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.injection.tainted-sql-string.tainted-sql-string"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server."
              },
              "help": {
                "markdown": "If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://nodesecroadmap.fyi/chapter-1/threat-UIR.html)\n - [https://github.com/google/node-sec-roadmap/blob/master/chapter-2/dynamism.md#dynamism-when-you-need-it](https://github.com/google/node-sec-roadmap/blob/master/chapter-2/dynamism.md#dynamism-when-you-need-it)\n",
                "text": "If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server."
              },
              "helpUri": "https://nodesecroadmap.fyi/chapter-1/threat-UIR.html",
              "id": "codacy.tools-configs.javascript.express.security.require-request.require-request",
              "name": "codacy.tools-configs.javascript.express.security.require-request.require-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-706: Use of Incorrectly-Resolved Name or Reference",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.require-request.require-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "By letting user input control `X-Frame-Options` header, there is a risk that software does not properly verify whether or not a browser should be allowed to render a page in an `iframe`."
              },
              "help": {
                "markdown": "By letting user input control `X-Frame-Options` header, there is a risk that software does not properly verify whether or not a browser should be allowed to render a page in an `iframe`.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options)\n",
                "text": "By letting user input control `X-Frame-Options` header, there is a risk that software does not properly verify whether or not a browser should be allowed to render a page in an `iframe`."
              },
              "id": "codacy.tools-configs.javascript.express.security.x-frame-options-misconfiguration.x-frame-options-misconfiguration",
              "name": "codacy.tools-configs.javascript.express.security.x-frame-options-misconfiguration.x-frame-options-misconfiguration",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-451: User Interface (UI) Misrepresentation of Critical Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.express.security.x-frame-options-misconfiguration.x-frame-options-misconfiguration"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found an initialization of the Intercom Messenger that identifies a User, but does not specify a `user_hash`.This configuration allows users to impersonate one another. See the Intercom Identity Verification docs for more context https://www.intercom.com/help/en/articles/183-set-up-identity-verification-for-web-and-mobile"
              },
              "help": {
                "markdown": "Found an initialization of the Intercom Messenger that identifies a User, but does not specify a `user_hash`.This configuration allows users to impersonate one another. See the Intercom Identity Verification docs for more context https://www.intercom.com/help/en/articles/183-set-up-identity-verification-for-web-and-mobile\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.intercom.com/help/en/articles/183-set-up-identity-verification-for-web-and-mobile](https://www.intercom.com/help/en/articles/183-set-up-identity-verification-for-web-and-mobile)\n",
                "text": "Found an initialization of the Intercom Messenger that identifies a User, but does not specify a `user_hash`.This configuration allows users to impersonate one another. See the Intercom Identity Verification docs for more context https://www.intercom.com/help/en/articles/183-set-up-identity-verification-for-web-and-mobile"
              },
              "id": "codacy.tools-configs.javascript.intercom.security.audit.intercom-settings-user-identifier-without-user-hash.intercom-settings-user-identifier-without-user-hash",
              "name": "codacy.tools-configs.javascript.intercom.security.audit.intercom-settings-user-identifier-without-user-hash.intercom-settings-user-identifier-without-user-hash",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-287: Improper Authentication",
                  "MEDIUM CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.intercom.security.audit.intercom-settings-user-identifier-without-user-hash.intercom-settings-user-identifier-without-user-hash"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
              },
              "help": {
                "markdown": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n",
                "text": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
              },
              "id": "codacy.tools-configs.javascript.jose.security.jwt-hardcode.hardcoded-jwt-secret",
              "name": "codacy.tools-configs.javascript.jose.security.jwt-hardcode.hardcoded-jwt-secret",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-798: Use of Hard-coded Credentials",
                  "HIGH CONFIDENCE",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.jose.security.jwt-hardcode.hardcoded-jwt-secret"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."
              },
              "help": {
                "markdown": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."
              },
              "helpUri": "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/",
              "id": "codacy.tools-configs.javascript.jose.security.jwt-none-alg.jwt-none-alg",
              "name": "codacy.tools-configs.javascript.jose.security.jwt-none-alg.jwt-none-alg",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.jose.security.jwt-none-alg.jwt-none-alg"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
              },
              "help": {
                "markdown": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n",
                "text": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
              },
              "id": "codacy.tools-configs.javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret",
              "name": "codacy.tools-configs.javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-798: Use of Hard-coded Credentials",
                  "HIGH CONFIDENCE",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."
              },
              "help": {
                "markdown": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."
              },
              "helpUri": "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/",
              "id": "codacy.tools-configs.javascript.jsonwebtoken.security.jwt-none-alg.jwt-none-alg",
              "name": "codacy.tools-configs.javascript.jsonwebtoken.security.jwt-none-alg.jwt-none-alg",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.jsonwebtoken.security.jwt-none-alg.jwt-none-alg"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Set 'verify' to `true` before using the token."
              },
              "help": {
                "markdown": "Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Set 'verify' to `true` before using the token.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.npmjs.com/package/jwt-simple](https://www.npmjs.com/package/jwt-simple)\n - [https://cwe.mitre.org/data/definitions/287](https://cwe.mitre.org/data/definitions/287)\n - [https://cwe.mitre.org/data/definitions/345](https://cwe.mitre.org/data/definitions/345)\n - [https://cwe.mitre.org/data/definitions/347](https://cwe.mitre.org/data/definitions/347)\n",
                "text": "Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Set 'verify' to `true` before using the token."
              },
              "id": "codacy.tools-configs.javascript.jwt-simple.security.jwt-simple-noverify.jwt-simple-noverify",
              "name": "codacy.tools-configs.javascript.jwt-simple.security.jwt-simple-noverify.jwt-simple-noverify",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-287: Improper Authentication",
                  "CWE-345: Insufficient Verification of Data Authenticity",
                  "CWE-347: Improper Verification of Cryptographic Signature",
                  "HIGH CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.jwt-simple.security.jwt-simple-noverify.jwt-simple-noverify"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Found data from an Express or Next web request flowing to `eval`. If this data is user-controllable this can lead to execution of arbitrary system commands in the context of your application process. Avoid `eval` whenever possible."
              },
              "help": {
                "markdown": "Found data from an Express or Next web request flowing to `eval`. If this data is user-controllable this can lead to execution of arbitrary system commands in the context of your application process. Avoid `eval` whenever possible.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval)\n - [https://nodejs.org/api/child_process.html#child_processexeccommand-options-callback](https://nodejs.org/api/child_process.html#child_processexeccommand-options-callback)\n - [https://www.stackhawk.com/blog/nodejs-command-injection-examples-and-prevention/](https://www.stackhawk.com/blog/nodejs-command-injection-examples-and-prevention/)\n - [https://ckarande.gitbooks.io/owasp-nodegoat-tutorial/content/tutorial/a1_-_server_side_js_injection.html](https://ckarande.gitbooks.io/owasp-nodegoat-tutorial/content/tutorial/a1_-_server_side_js_injection.html)\n",
                "text": "Found data from an Express or Next web request flowing to `eval`. If this data is user-controllable this can lead to execution of arbitrary system commands in the context of your application process. Avoid `eval` whenever possible."
              },
              "id": "codacy.tools-configs.javascript.lang.security.audit.code-string-concat.code-string-concat",
              "name": "codacy.tools-configs.javascript.lang.security.audit.code-string-concat.code-string-concat",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                  "HIGH CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.lang.security.audit.code-string-concat.code-string-concat"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected SQL statement that is tainted by `$REQ` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements. An example of parameterized queries like so: `knex.raw('SELECT $1 from table', [userinput])` can help prevent SQLi."
              },
              "help": {
                "markdown": "Detected SQL statement that is tainted by `$REQ` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements. An example of parameterized queries like so: `knex.raw('SELECT $1 from table', [userinput])` can help prevent SQLi.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://knexjs.org/#Builder-fromRaw](https://knexjs.org/#Builder-fromRaw)\n - [https://knexjs.org/#Builder-whereRaw](https://knexjs.org/#Builder-whereRaw)\n - [https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
                "text": "Detected SQL statement that is tainted by `$REQ` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements. An example of parameterized queries like so: `knex.raw('SELECT $1 from table', [userinput])` can help prevent SQLi."
              },
              "id": "codacy.tools-configs.javascript.lang.security.audit.sqli.node-knex-sqli.node-knex-sqli",
              "name": "codacy.tools-configs.javascript.lang.security.audit.sqli.node-knex-sqli.node-knex-sqli",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.lang.security.audit.sqli.node-knex-sqli.node-knex-sqli"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected use of dynamic execution of JavaScript which may come from user-input, which can lead to Cross-Site-Scripting (XSS). Where possible avoid including user-input in functions which dynamically execute user-input."
              },
              "help": {
                "markdown": "Detected use of dynamic execution of JavaScript which may come from user-input, which can lead to Cross-Site-Scripting (XSS). Where possible avoid including user-input in functions which dynamically execute user-input.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-eval-with-expression.js)\n - [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!)\n",
                "text": "Detected use of dynamic execution of JavaScript which may come from user-input, which can lead to Cross-Site-Scripting (XSS). Where possible avoid including user-input in functions which dynamically execute user-input."
              },
              "helpUri": "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-eval-with-expression.js",
              "id": "codacy.tools-configs.javascript.lang.security.detect-eval-with-expression.detect-eval-with-expression",
              "name": "codacy.tools-configs.javascript.lang.security.detect-eval-with-expression.detect-eval-with-expression",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.lang.security.detect-eval-with-expression.detect-eval-with-expression"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
              },
              "help": {
                "markdown": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n",
                "text": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
              },
              "id": "codacy.tools-configs.javascript.passport-jwt.security.passport-hardcode.hardcoded-passport-secret",
              "name": "codacy.tools-configs.javascript.passport-jwt.security.passport-hardcode.hardcoded-passport-secret",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-798: Use of Hard-coded Credentials",
                  "HIGH CONFIDENCE",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.passport-jwt.security.passport-hardcode.hardcoded-passport-secret"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements."
              },
              "help": {
                "markdown": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements](https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements)\n",
                "text": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements."
              },
              "id": "codacy.tools-configs.javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
              "name": "codacy.tools-configs.javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "HIGH CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected public S3 bucket. This policy allows anyone to have some kind of access to the bucket. The exact level of access and types of actions allowed will depend on the configuration of bucket policy and ACLs. Please review the bucket configuration to make sure they are set with intended values."
              },
              "help": {
                "markdown": "Detected public S3 bucket. This policy allows anyone to have some kind of access to the bucket. The exact level of access and types of actions allowed will depend on the configuration of bucket policy and ACLs. Please review the bucket configuration to make sure they are set with intended values.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-block-public-access.html](https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-block-public-access.html)\n",
                "text": "Detected public S3 bucket. This policy allows anyone to have some kind of access to the bucket. The exact level of access and types of actions allowed will depend on the configuration of bucket policy and ACLs. Please review the bucket configuration to make sure they are set with intended values."
              },
              "id": "codacy.tools-configs.json.aws.security.public-s3-bucket.public-s3-bucket",
              "name": "codacy.tools-configs.json.aws.security.public-s3-bucket.public-s3-bucket",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-264: CWE CATEGORY: Permissions, Privileges, and Access Controls",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.json.aws.security.public-s3-bucket.public-s3-bucket"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected public S3 bucket policy. This policy allows anyone to access certain properties of or items in the bucket. Do not do this unless you will never have sensitive data inside the bucket."
              },
              "help": {
                "markdown": "Detected public S3 bucket policy. This policy allows anyone to access certain properties of or items in the bucket. Do not do this unless you will never have sensitive data inside the bucket.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteAccessPermissionsReqd.html](https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteAccessPermissionsReqd.html)\n",
                "text": "Detected public S3 bucket policy. This policy allows anyone to access certain properties of or items in the bucket. Do not do this unless you will never have sensitive data inside the bucket."
              },
              "id": "codacy.tools-configs.json.aws.security.public-s3-policy-statement.public-s3-policy-statement",
              "name": "codacy.tools-configs.json.aws.security.public-s3-policy-statement.public-s3-policy-statement",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-264: CWE CATEGORY: Permissions, Privileges, and Access Controls",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.json.aws.security.public-s3-policy-statement.public-s3-policy-statement"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected wildcard access granted to sts:AssumeRole. This means anyone with your AWS account ID and the name of the role can assume the role. Instead, limit to a specific identity in your account, like this: `arn:aws:iam::\u003caccount_id\u003e:root`."
              },
              "help": {
                "markdown": "Detected wildcard access granted to sts:AssumeRole. This means anyone with your AWS account ID and the name of the role can assume the role. Instead, limit to a specific identity in your account, like this: `arn:aws:iam::\u003caccount_id\u003e:root`.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://rhinosecuritylabs.com/aws/assume-worst-aws-assume-role-enumeration/](https://rhinosecuritylabs.com/aws/assume-worst-aws-assume-role-enumeration/)\n",
                "text": "Detected wildcard access granted to sts:AssumeRole. This means anyone with your AWS account ID and the name of the role can assume the role. Instead, limit to a specific identity in your account, like this: `arn:aws:iam::\u003caccount_id\u003e:root`."
              },
              "id": "codacy.tools-configs.json.aws.security.wildcard-assume-role.wildcard-assume-role",
              "name": "codacy.tools-configs.json.aws.security.wildcard-assume-role.wildcard-assume-role",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-250: Execution with Unnecessary Privileges",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "OWASP-A06:2017 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.json.aws.security.wildcard-assume-role.wildcard-assume-role"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected anonymous LDAP bind. This permits anonymous users to execute LDAP statements. Consider enforcing authentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html for more information."
              },
              "help": {
                "markdown": "Detected anonymous LDAP bind. This permits anonymous users to execute LDAP statements. Consider enforcing authentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html for more information.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://find-sec-bugs.github.io/bugs.htm#LDAP_ANONYMOUS)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n",
                "text": "Detected anonymous LDAP bind. This permits anonymous users to execute LDAP statements. Consider enforcing authentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html for more information."
              },
              "helpUri": "https://find-sec-bugs.github.io/bugs.htm#LDAP_ANONYMOUS",
              "id": "codacy.tools-configs.kotlin.lang.security.anonymous-ldap-bind.anonymous-ldap-bind",
              "name": "codacy.tools-configs.kotlin.lang.security.anonymous-ldap-bind.anonymous-ldap-bind",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-287: Improper Authentication",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2017 - Broken Authentication",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.kotlin.lang.security.anonymous-ldap-bind.anonymous-ldap-bind"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY."
              },
              "help": {
                "markdown": "Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://find-sec-bugs.github.io/bugs.htm#ECB_MODE)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY."
              },
              "helpUri": "https://find-sec-bugs.github.io/bugs.htm#ECB_MODE",
              "id": "codacy.tools-configs.kotlin.lang.security.ecb-cipher.ecb-cipher",
              "name": "codacy.tools-configs.kotlin.lang.security.ecb-cipher.ecb-cipher",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.kotlin.lang.security.ecb-cipher.ecb-cipher"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."
              },
              "help": {
                "markdown": "NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://find-sec-bugs.github.io/bugs.htm#NULL_CIPHER)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."
              },
              "helpUri": "https://find-sec-bugs.github.io/bugs.htm#NULL_CIPHER",
              "id": "codacy.tools-configs.kotlin.lang.security.no-null-cipher.no-null-cipher",
              "name": "codacy.tools-configs.kotlin.lang.security.no-null-cipher.no-null-cipher",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.kotlin.lang.security.no-null-cipher.no-null-cipher"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "help": {
                "markdown": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_MD5)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "helpUri": "https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_MD5",
              "id": "codacy.tools-configs.kotlin.lang.security.use-of-md5.use-of-md5",
              "name": "codacy.tools-configs.kotlin.lang.security.use-of-md5.use-of-md5",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-328: Use of Weak Hash",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.kotlin.lang.security.use-of-md5.use-of-md5"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "help": {
                "markdown": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_SHA1)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "helpUri": "https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_SHA1",
              "id": "codacy.tools-configs.kotlin.lang.security.use-of-sha1.use-of-sha1",
              "name": "codacy.tools-configs.kotlin.lang.security.use-of-sha1.use-of-sha1",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.kotlin.lang.security.use-of-sha1.use-of-sha1"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "RSA keys should be at least 2048 bits based on NIST recommendation."
              },
              "help": {
                "markdown": "RSA keys should be at least 2048 bits based on NIST recommendation.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://find-sec-bugs.github.io/bugs.htm#RSA_KEY_SIZE)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms)\n",
                "text": "RSA keys should be at least 2048 bits based on NIST recommendation."
              },
              "helpUri": "https://find-sec-bugs.github.io/bugs.htm#RSA_KEY_SIZE",
              "id": "codacy.tools-configs.kotlin.lang.security.weak-rsa.use-of-weak-rsa-key",
              "name": "codacy.tools-configs.kotlin.lang.security.weak-rsa.use-of-weak-rsa-key",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.kotlin.lang.security.weak-rsa.use-of-weak-rsa-key"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Do not grant dangerous combinations of permissions.\n"
              },
              "help": {
                "markdown": "Do not grant dangerous combinations of permissions.\n",
                "text": "Do not grant dangerous combinations of permissions.\n"
              },
              "id": "codacy.tools-configs.kotlin_perm_rule-DangerousPermissions",
              "name": "codacy.tools-configs.kotlin_perm_rule-DangerousPermissions",
              "properties": {
                "precision": "very-high",
                "security-severity": "MEDIUM",
                "tags": [
                  "CWE-277",
                  "HIGH CONFIDENCE",
                  "OWASP-A01:2021-Broken Access Control",
                  "OWASP-A5:2017-Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Insecure inherited permissions"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Overly permissive file permission\n"
              },
              "help": {
                "markdown": "Overly permissive file permission\n",
                "text": "Overly permissive file permission\n"
              },
              "id": "codacy.tools-configs.kotlin_perm_rule-OverlyPermissiveFilePermissionInline",
              "name": "codacy.tools-configs.kotlin_perm_rule-OverlyPermissiveFilePermissionInline",
              "properties": {
                "precision": "very-high",
                "security-severity": "MEDIUM",
                "tags": [
                  "CWE-732",
                  "HIGH CONFIDENCE",
                  "OWASP-A01:2021-Broken Access Control",
                  "OWASP-A5:2017-Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Incorrect permission assignment for critical resource"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "When converting a byte array containing a hash signature to a human readable string, a\nconversion mistake can be made if the array is read byte by byte.\n"
              },
              "help": {
                "markdown": "When converting a byte array containing a hash signature to a human readable string, a\nconversion mistake can be made if the array is read byte by byte.\n",
                "text": "When converting a byte array containing a hash signature to a human readable string, a\nconversion mistake can be made if the array is read byte by byte.\n"
              },
              "id": "codacy.tools-configs.kotlin_strings_rule-BadHexConversion",
              "name": "codacy.tools-configs.kotlin_strings_rule-BadHexConversion",
              "properties": {
                "precision": "very-high",
                "security-severity": "MEDIUM",
                "tags": [
                  "CWE-704",
                  "HIGH CONFIDENCE",
                  "OWASP-A05:2021-Security Misconfiguration",
                  "OWASP-A6:2017-Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Incorrect type conversion or cast"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Allowing user input to control format parameters could enable an attacker to cause exceptions\nto be thrown or leak information.Attackers may be able  to modify the format string argument,\nsuch that an exception is thrown. If this exception is left uncaught, it may crash the\napplication. Alternatively, if sensitive information is used within the unused arguments,\nattackers may change the format string to reveal this information.\n"
              },
              "help": {
                "markdown": "Allowing user input to control format parameters could enable an attacker to cause exceptions\nto be thrown or leak information.Attackers may be able  to modify the format string argument,\nsuch that an exception is thrown. If this exception is left uncaught, it may crash the\napplication. Alternatively, if sensitive information is used within the unused arguments,\nattackers may change the format string to reveal this information.\n",
                "text": "Allowing user input to control format parameters could enable an attacker to cause exceptions\nto be thrown or leak information.Attackers may be able  to modify the format string argument,\nsuch that an exception is thrown. If this exception is left uncaught, it may crash the\napplication. Alternatively, if sensitive information is used within the unused arguments,\nattackers may change the format string to reveal this information.\n"
              },
              "id": "codacy.tools-configs.kotlin_strings_rule-FormatStringManipulation",
              "name": "codacy.tools-configs.kotlin_strings_rule-FormatStringManipulation",
              "properties": {
                "precision": "very-high",
                "security-severity": "CRITICAL",
                "tags": [
                  "CWE-134",
                  "HIGH CONFIDENCE",
                  "OWASP-A03:2021-Injection",
                  "OWASP-A1:2017-Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Use of externally-controlled format string"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "CERT: IDS11-J. Perform any string modifications before validation\n"
              },
              "help": {
                "markdown": "CERT: IDS11-J. Perform any string modifications before validation\n",
                "text": "CERT: IDS11-J. Perform any string modifications before validation\n"
              },
              "id": "codacy.tools-configs.kotlin_strings_rule-ModifyAfterValidation",
              "name": "codacy.tools-configs.kotlin_strings_rule-ModifyAfterValidation",
              "properties": {
                "precision": "very-high",
                "security-severity": "MEDIUM",
                "tags": [
                  "CWE-182",
                  "HIGH CONFIDENCE",
                  "OWASP-A03:2021-Injection",
                  "OWASP-A1:2017-Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Collapse of data into unsafe value"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "IDS01-J. Normalize strings before validating them\n"
              },
              "help": {
                "markdown": "IDS01-J. Normalize strings before validating them\n",
                "text": "IDS01-J. Normalize strings before validating them\n"
              },
              "id": "codacy.tools-configs.kotlin_strings_rule-NormalizeAfterValidation",
              "name": "codacy.tools-configs.kotlin_strings_rule-NormalizeAfterValidation",
              "properties": {
                "precision": "very-high",
                "security-severity": "MEDIUM",
                "tags": [
                  "CWE-180",
                  "HIGH CONFIDENCE",
                  "OWASP-A03:2021-Injection",
                  "OWASP-A1:2017-Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Incorrect behavior order: validate before canonicalize"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "`$QUERY` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead."
              },
              "help": {
                "markdown": "`$QUERY` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/query-builder.html#security-safely-preventing-sql-injection](https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/query-builder.html#security-safely-preventing-sql-injection)\n - [https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
                "text": "`$QUERY` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead."
              },
              "id": "codacy.tools-configs.php.doctrine.security.audit.doctrine-orm-dangerous-query.doctrine-orm-dangerous-query",
              "name": "codacy.tools-configs.php.doctrine.security.audit.doctrine-orm-dangerous-query.doctrine-orm-dangerous-query",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.php.doctrine.security.audit.doctrine-orm-dangerous-query.doctrine-orm-dangerous-query"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Calling assert with user input is equivalent to eval'ing."
              },
              "help": {
                "markdown": "Calling assert with user input is equivalent to eval'ing.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.php.net/manual/en/function.assert](https://www.php.net/manual/en/function.assert)\n - [https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/AssertsSniff.php](https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/AssertsSniff.php)\n",
                "text": "Calling assert with user input is equivalent to eval'ing."
              },
              "id": "codacy.tools-configs.php.lang.security.assert-use.assert-use",
              "name": "codacy.tools-configs.php.lang.security.assert-use.assert-use",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                  "HIGH CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.php.lang.security.assert-use.assert-use"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The function base_convert uses 64-bit numbers internally, and does not correctly convert large numbers. It is not suitable for random tokens such as those used for session tokens or CSRF tokens."
              },
              "help": {
                "markdown": "The function base_convert uses 64-bit numbers internally, and does not correctly convert large numbers. It is not suitable for random tokens such as those used for session tokens or CSRF tokens.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.php.net/base_convert](https://www.php.net/base_convert)\n - [https://www.sjoerdlangkemper.nl/2017/03/15/dont-use-base-convert-on-random-tokens/](https://www.sjoerdlangkemper.nl/2017/03/15/dont-use-base-convert-on-random-tokens/)\n",
                "text": "The function base_convert uses 64-bit numbers internally, and does not correctly convert large numbers. It is not suitable for random tokens such as those used for session tokens or CSRF tokens."
              },
              "id": "codacy.tools-configs.php.lang.security.base-convert-loses-precision.base-convert-loses-precision",
              "name": "codacy.tools-configs.php.lang.security.base-convert-loses-precision.base-convert-loses-precision",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-190: Integer Overflow or Wraparound",
                  "HIGH CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.php.lang.security.base-convert-loses-precision.base-convert-loses-precision"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "SSL verification is disabled but should not be (currently CURLOPT_SSL_VERIFYPEER= $IS_VERIFIED)"
              },
              "help": {
                "markdown": "SSL verification is disabled but should not be (currently CURLOPT_SSL_VERIFYPEER= $IS_VERIFIED)\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.saotn.org/dont-turn-off-curlopt_ssl_verifypeer-fix-php-configuration/](https://www.saotn.org/dont-turn-off-curlopt_ssl_verifypeer-fix-php-configuration/)\n",
                "text": "SSL verification is disabled but should not be (currently CURLOPT_SSL_VERIFYPEER= $IS_VERIFIED)"
              },
              "id": "codacy.tools-configs.php.lang.security.curl-ssl-verifypeer-off.curl-ssl-verifypeer-off",
              "name": "codacy.tools-configs.php.lang.security.curl-ssl-verifypeer-off.curl-ssl-verifypeer-off",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.php.lang.security.curl-ssl-verifypeer-off.curl-ssl-verifypeer-off"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Do not call 'extract()' on user-controllable data. If you must, then you must also provide the EXTR_SKIP flag to prevent overwriting existing variables."
              },
              "help": {
                "markdown": "Do not call 'extract()' on user-controllable data. If you must, then you must also provide the EXTR_SKIP flag to prevent overwriting existing variables.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.php.net/manual/en/function.extract.php#refsect1-function.extract-notes](https://www.php.net/manual/en/function.extract.php#refsect1-function.extract-notes)\n",
                "text": "Do not call 'extract()' on user-controllable data. If you must, then you must also provide the EXTR_SKIP flag to prevent overwriting existing variables."
              },
              "id": "codacy.tools-configs.php.lang.security.deserialization.extract-user-data",
              "name": "codacy.tools-configs.php.lang.security.deserialization.extract-user-data",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-502: Deserialization of Untrusted Data",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A08:2017 - Insecure Deserialization",
                  "OWASP-A08:2021 - Software and Data Integrity Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.php.lang.security.deserialization.extract-user-data"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users."
              },
              "help": {
                "markdown": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.php.net/manual/en/function.htmlentities.php](https://www.php.net/manual/en/function.htmlentities.php)\n - [https://www.php.net/manual/en/reserved.variables.request.php](https://www.php.net/manual/en/reserved.variables.request.php)\n - [https://www.php.net/manual/en/reserved.variables.post.php](https://www.php.net/manual/en/reserved.variables.post.php)\n - [https://www.php.net/manual/en/reserved.variables.get.php](https://www.php.net/manual/en/reserved.variables.get.php)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n",
                "text": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users."
              },
              "id": "codacy.tools-configs.php.lang.security.injection.echoed-request.echoed-request",
              "name": "codacy.tools-configs.php.lang.security.injection.echoed-request.echoed-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.php.lang.security.injection.echoed-request.echoed-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "`Printing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users."
              },
              "help": {
                "markdown": "`Printing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.php.net/manual/en/function.htmlentities.php](https://www.php.net/manual/en/function.htmlentities.php)\n - [https://www.php.net/manual/en/reserved.variables.request.php](https://www.php.net/manual/en/reserved.variables.request.php)\n - [https://www.php.net/manual/en/reserved.variables.post.php](https://www.php.net/manual/en/reserved.variables.post.php)\n - [https://www.php.net/manual/en/reserved.variables.get.php](https://www.php.net/manual/en/reserved.variables.get.php)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n",
                "text": "`Printing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users."
              },
              "id": "codacy.tools-configs.php.lang.security.injection.printed-request.printed-request",
              "name": "codacy.tools-configs.php.lang.security.injection.printed-request.printed-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.php.lang.security.injection.printed-request.printed-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "File name based on user input risks server-side request forgery."
              },
              "help": {
                "markdown": "File name based on user input risks server-side request forgery.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29](https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29)\n",
                "text": "File name based on user input risks server-side request forgery."
              },
              "id": "codacy.tools-configs.php.lang.security.injection.tainted-filename.tainted-filename",
              "name": "codacy.tools-configs.php.lang.security.injection.tainted-filename.tainted-filename",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-918: Server-Side Request Forgery (SSRF)",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A10:2021 - Server-Side Request Forgery (SSRF)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.php.lang.security.injection.tainted-filename.tainted-filename"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "\u003c- A new object is created where the class name is based on user input. This could lead to remote code execution, as it allows to instantiate any class in the application."
              },
              "help": {
                "markdown": "\u003c- A new object is created where the class name is based on user input. This could lead to remote code execution, as it allows to instantiate any class in the application.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
                "text": "\u003c- A new object is created where the class name is based on user input. This could lead to remote code execution, as it allows to instantiate any class in the application."
              },
              "id": "codacy.tools-configs.php.lang.security.injection.tainted-object-instantiation.tainted-object-instantiation",
              "name": "codacy.tools-configs.php.lang.security.injection.tainted-object-instantiation.tainted-object-instantiation",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.php.lang.security.injection.tainted-object-instantiation.tainted-object-instantiation"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Session key based on user input risks session poisoning. The user can determine the key used for the session, and thus write any session variable. Session variables are typically trusted to be set only by the application, and manipulating the session can result in access control issues."
              },
              "help": {
                "markdown": "Session key based on user input risks session poisoning. The user can determine the key used for the session, and thus write any session variable. Session variables are typically trusted to be set only by the application, and manipulating the session can result in access control issues.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://en.wikipedia.org/wiki/Session_poisoning](https://en.wikipedia.org/wiki/Session_poisoning)\n",
                "text": "Session key based on user input risks session poisoning. The user can determine the key used for the session, and thus write any session variable. Session variables are typically trusted to be set only by the application, and manipulating the session can result in access control issues."
              },
              "id": "codacy.tools-configs.php.lang.security.injection.tainted-session.tainted-session",
              "name": "codacy.tools-configs.php.lang.security.injection.tainted-session.tainted-session",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-284: Improper Access Control",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.php.lang.security.injection.tainted-session.tainted-session"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli-\u003eprepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library."
              },
              "help": {
                "markdown": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli-\u003eprepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/www-community/attacks/SQL_Injection](https://owasp.org/www-community/attacks/SQL_Injection)\n",
                "text": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli-\u003eprepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library."
              },
              "id": "codacy.tools-configs.php.lang.security.injection.tainted-sql-string.tainted-sql-string",
              "name": "codacy.tools-configs.php.lang.security.injection.tainted-sql-string.tainted-sql-string",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.php.lang.security.injection.tainted-sql-string.tainted-sql-string"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host."
              },
              "help": {
                "markdown": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)\n",
                "text": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host."
              },
              "id": "codacy.tools-configs.php.lang.security.injection.tainted-url-host.tainted-url-host",
              "name": "codacy.tools-configs.php.lang.security.injection.tainted-url-host.tainted-url-host",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-918: Server-Side Request Forgery (SSRF)",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A10:2021 - Server-Side Request Forgery (SSRF)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.php.lang.security.injection.tainted-url-host.tainted-url-host"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as bcrypt. You can use `password_hash($PASSWORD, PASSWORD_BCRYPT, $OPTIONS);`."
              },
              "help": {
                "markdown": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as bcrypt. You can use `password_hash($PASSWORD, PASSWORD_BCRYPT, $OPTIONS);`.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://tools.ietf.org/html/rfc6151](https://tools.ietf.org/html/rfc6151)\n - [https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision](https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision)\n - [https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords](https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords)\n - [https://github.com/returntocorp/semgrep-rules/issues/1609](https://github.com/returntocorp/semgrep-rules/issues/1609)\n - [https://www.php.net/password_hash](https://www.php.net/password_hash)\n",
                "text": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as bcrypt. You can use `password_hash($PASSWORD, PASSWORD_BCRYPT, $OPTIONS);`."
              },
              "id": "codacy.tools-configs.php.lang.security.md5-used-as-password.md5-used-as-password",
              "name": "codacy.tools-configs.php.lang.security.md5-used-as-password.md5-used-as-password",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.php.lang.security.md5-used-as-password.md5-used-as-password"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Static IV used with AES in CBC mode. Static IVs enable chosen-plaintext attacks against encrypted data."
              },
              "help": {
                "markdown": "Static IV used with AES in CBC mode. Static IVs enable chosen-plaintext attacks against encrypted data.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://csrc.nist.gov/publications/detail/sp/800-38a/final](https://csrc.nist.gov/publications/detail/sp/800-38a/final)\n",
                "text": "Static IV used with AES in CBC mode. Static IVs enable chosen-plaintext attacks against encrypted data."
              },
              "id": "codacy.tools-configs.php.lang.security.openssl-cbc-static-iv.openssl-cbc-static-iv",
              "name": "codacy.tools-configs.php.lang.security.openssl-cbc-static-iv.openssl-cbc-static-iv",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-329: Generation of Predictable IV with CBC Mode",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.php.lang.security.openssl-cbc-static-iv.openssl-cbc-static-iv"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "The 'phpinfo' function may reveal sensitive information about your environment."
              },
              "help": {
                "markdown": "The 'phpinfo' function may reveal sensitive information about your environment.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.php.net/manual/en/function.phpinfo](https://www.php.net/manual/en/function.phpinfo)\n - [https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/PhpinfosSniff.php](https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/PhpinfosSniff.php)\n",
                "text": "The 'phpinfo' function may reveal sensitive information about your environment."
              },
              "id": "codacy.tools-configs.php.lang.security.phpinfo-use.phpinfo-use",
              "name": "codacy.tools-configs.php.lang.security.phpinfo-use.phpinfo-use",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.php.lang.security.phpinfo-use.phpinfo-use"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Redirecting to the current request URL may redirect to another domain, if the current path starts with two slashes.  E.g. in https://www.example.com//attacker.com, the value of REQUEST_URI is //attacker.com, and redirecting to it will redirect to that domain."
              },
              "help": {
                "markdown": "Redirecting to the current request URL may redirect to another domain, if the current path starts with two slashes.  E.g. in https://www.example.com//attacker.com, the value of REQUEST_URI is //attacker.com, and redirecting to it will redirect to that domain.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.php.net/manual/en/reserved.variables.server.php](https://www.php.net/manual/en/reserved.variables.server.php)\n - [https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html](https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html)\n",
                "text": "Redirecting to the current request URL may redirect to another domain, if the current path starts with two slashes.  E.g. in https://www.example.com//attacker.com, the value of REQUEST_URI is //attacker.com, and redirecting to it will redirect to that domain."
              },
              "id": "codacy.tools-configs.php.lang.security.redirect-to-request-uri.redirect-to-request-uri",
              "name": "codacy.tools-configs.php.lang.security.redirect-to-request-uri.redirect-to-request-uri",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "OWASP-A05:2017 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.php.lang.security.redirect-to-request-uri.redirect-to-request-uri"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command."
              },
              "help": {
                "markdown": "Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.stackhawk.com/blog/php-command-injection/](https://www.stackhawk.com/blog/php-command-injection/)\n - [https://brightsec.com/blog/code-injection-php/](https://brightsec.com/blog/code-injection-php/)\n - [https://www.acunetix.com/websitesecurity/php-security-2/](https://www.acunetix.com/websitesecurity/php-security-2/)\n",
                "text": "Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command."
              },
              "id": "codacy.tools-configs.php.lang.security.tainted-exec.tainted-exec",
              "name": "codacy.tools-configs.php.lang.security.tainted-exec.tainted-exec",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-94: Improper Control of Generation of Code ('Code Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.php.lang.security.tainted-exec.tainted-exec"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "HTTP method [$METHOD] to Laravel route $ROUTE_NAME is vulnerable to SQL injection via string concatenation or unsafe interpolation."
              },
              "help": {
                "markdown": "HTTP method [$METHOD] to Laravel route $ROUTE_NAME is vulnerable to SQL injection via string concatenation or unsafe interpolation.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md)\n",
                "text": "HTTP method [$METHOD] to Laravel route $ROUTE_NAME is vulnerable to SQL injection via string concatenation or unsafe interpolation."
              },
              "id": "codacy.tools-configs.php.laravel.security.laravel-api-route-sql-injection.laravel-api-route-sql-injection",
              "name": "codacy.tools-configs.php.laravel.security.laravel-api-route-sql-injection.laravel-api-route-sql-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.php.laravel.security.laravel-api-route-sql-injection.laravel-api-route-sql-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected a SQL query based on user input. This could lead to SQL injection, which could potentially result in sensitive data being exfiltrated by attackers. Instead, use parameterized queries and prepared statements."
              },
              "help": {
                "markdown": "Detected a SQL query based on user input. This could lead to SQL injection, which could potentially result in sensitive data being exfiltrated by attackers. Instead, use parameterized queries and prepared statements.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://laravel.com/docs/8.x/queries](https://laravel.com/docs/8.x/queries)\n",
                "text": "Detected a SQL query based on user input. This could lead to SQL injection, which could potentially result in sensitive data being exfiltrated by attackers. Instead, use parameterized queries and prepared statements."
              },
              "id": "codacy.tools-configs.php.laravel.security.laravel-sql-injection.laravel-sql-injection",
              "name": "codacy.tools-configs.php.laravel.security.laravel-sql-injection.laravel-sql-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.php.laravel.security.laravel-sql-injection.laravel-sql-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Found a request argument passed to an `ignore()` definition in a Rule constraint. This can lead to SQL injection."
              },
              "help": {
                "markdown": "Found a request argument passed to an `ignore()` definition in a Rule constraint. This can lead to SQL injection.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://laravel.com/docs/9.x/validation#rule-unique](https://laravel.com/docs/9.x/validation#rule-unique)\n",
                "text": "Found a request argument passed to an `ignore()` definition in a Rule constraint. This can lead to SQL injection."
              },
              "id": "codacy.tools-configs.php.laravel.security.laravel-unsafe-validator.laravel-unsafe-validator",
              "name": "codacy.tools-configs.php.laravel.security.laravel-unsafe-validator.laravel-unsafe-validator",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.php.laravel.security.laravel-unsafe-validator.laravel-unsafe-validator"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Checks for disabling of TLS/SSL certificate verification. This should only be used for debugging purposes because it leads to vulnerability to MTM attacks."
              },
              "help": {
                "markdown": "Checks for disabling of TLS/SSL certificate verification. This should only be used for debugging purposes because it leads to vulnerability to MTM attacks.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://stackoverflow.com/questions/12122159/how-to-do-a-https-request-with-bad-certificate](https://stackoverflow.com/questions/12122159/how-to-do-a-https-request-with-bad-certificate)\n",
                "text": "Checks for disabling of TLS/SSL certificate verification. This should only be used for debugging purposes because it leads to vulnerability to MTM attacks."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.go-stdlib.bypass-tls-verification.bypass-tls-verification",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.go-stdlib.bypass-tls-verification.bypass-tls-verification",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.go-stdlib.bypass-tls-verification.bypass-tls-verification"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detects creations of tls configuration objects with an insecure MinVersion of TLS. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities."
              },
              "help": {
                "markdown": "Detects creations of tls configuration objects with an insecure MinVersion of TLS. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://stackoverflow.com/questions/26429751/java-http-clients-and-poodle](https://stackoverflow.com/questions/26429751/java-http-clients-and-poodle)\n",
                "text": "Detects creations of tls configuration objects with an insecure MinVersion of TLS. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.go-stdlib.disallow-old-tls-versions.disallow-old-tls-versions",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.go-stdlib.disallow-old-tls-versions.disallow-old-tls-versions",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "HIGH CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.go-stdlib.disallow-old-tls-versions.disallow-old-tls-versions"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Checks for outgoing connections to ftp servers with the ftp package. FTP does not encrypt traffic, possibly leading to PII being sent plaintext over the network. Instead, connect via the SFTP protocol."
              },
              "help": {
                "markdown": "Checks for outgoing connections to ftp servers with the ftp package. FTP does not encrypt traffic, possibly leading to PII being sent plaintext over the network. Instead, connect via the SFTP protocol.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://godoc.org/github.com/jlaffaye/ftp#Dial](https://godoc.org/github.com/jlaffaye/ftp#Dial)\n - [https://github.com/jlaffaye/ftp](https://github.com/jlaffaye/ftp)\n",
                "text": "Checks for outgoing connections to ftp servers with the ftp package. FTP does not encrypt traffic, possibly leading to PII being sent plaintext over the network. Instead, connect via the SFTP protocol."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.go-stdlib.ftp-request.ftp-request",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.go-stdlib.ftp-request.ftp-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.go-stdlib.ftp-request.ftp-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Checks for requests to http (unencrypted) sites using gorequest, a popular HTTP client library. This is dangerous because it could result in plaintext PII being passed around the network."
              },
              "help": {
                "markdown": "Checks for requests to http (unencrypted) sites using gorequest, a popular HTTP client library. This is dangerous because it could result in plaintext PII being passed around the network.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://github.com/parnurzeal/gorequest](https://github.com/parnurzeal/gorequest)\n",
                "text": "Checks for requests to http (unencrypted) sites using gorequest, a popular HTTP client library. This is dangerous because it could result in plaintext PII being passed around the network."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.go-stdlib.gorequest-http-request.gorequest-http-request",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.go-stdlib.gorequest-http-request.gorequest-http-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.go-stdlib.gorequest-http-request.gorequest-http-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Checks for requests to http (unencrypted) sites using grequests, a popular HTTP client library. This is dangerous because it could result in plaintext PII being passed around the network."
              },
              "help": {
                "markdown": "Checks for requests to http (unencrypted) sites using grequests, a popular HTTP client library. This is dangerous because it could result in plaintext PII being passed around the network.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://godoc.org/github.com/levigross/grequests#DoRegularRequest](https://godoc.org/github.com/levigross/grequests#DoRegularRequest)\n - [https://github.com/levigross/grequests](https://github.com/levigross/grequests)\n",
                "text": "Checks for requests to http (unencrypted) sites using grequests, a popular HTTP client library. This is dangerous because it could result in plaintext PII being passed around the network."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.go-stdlib.grequests-http-request.grequests-http-request",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.go-stdlib.grequests-http-request.grequests-http-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.go-stdlib.grequests-http-request.grequests-http-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Checks for requests sent via http.NewRequest to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS."
              },
              "help": {
                "markdown": "Checks for requests sent via http.NewRequest to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://golang.org/pkg/net/http/#NewRequest](https://golang.org/pkg/net/http/#NewRequest)\n",
                "text": "Checks for requests sent via http.NewRequest to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.go-stdlib.http-customized-request.http-customized-request",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.go-stdlib.http-customized-request.http-customized-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.go-stdlib.http-customized-request.http-customized-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Checks for requests sent via http.$FUNC to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS."
              },
              "help": {
                "markdown": "Checks for requests sent via http.$FUNC to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://golang.org/pkg/net/http/#Get](https://golang.org/pkg/net/http/#Get)\n",
                "text": "Checks for requests sent via http.$FUNC to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.go-stdlib.http-request.http-request",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.go-stdlib.http-request.http-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.go-stdlib.http-request.http-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Checks for requests to http (unencrypted) sites using gorequest, a popular HTTP client library. This is dangerous because it could result in plaintext PII being passed around the network."
              },
              "help": {
                "markdown": "Checks for requests to http (unencrypted) sites using gorequest, a popular HTTP client library. This is dangerous because it could result in plaintext PII being passed around the network.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://godoc.org/github.com/dghubble/sling#Sling.Add](https://godoc.org/github.com/dghubble/sling#Sling.Add)\n - [https://github.com/dghubble/sling](https://github.com/dghubble/sling)\n",
                "text": "Checks for requests to http (unencrypted) sites using gorequest, a popular HTTP client library. This is dangerous because it could result in plaintext PII being passed around the network."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.go-stdlib.sling-http-request.sling-http-request",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.go-stdlib.sling-http-request.sling-http-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.go-stdlib.sling-http-request.sling-http-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Checks for attempts to connect to an insecure telnet server using the package telnet. This is bad because it can lead to man in the middle attacks."
              },
              "help": {
                "markdown": "Checks for attempts to connect to an insecure telnet server using the package telnet. This is bad because it can lead to man in the middle attacks.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://godoc.org/github.com/reiver/go-telnet](https://godoc.org/github.com/reiver/go-telnet)\n",
                "text": "Checks for attempts to connect to an insecure telnet server using the package telnet. This is bad because it can lead to man in the middle attacks."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.go-stdlib.telnet-request.telnet-request",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.go-stdlib.telnet-request.telnet-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.go-stdlib.telnet-request.telnet-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Checks for redefinitions of functions that check TLS/SSL certificate verification. This can lead to vulnerabilities, as simple errors in the code can result in lack of proper certificate validation. This should only be used for debugging purposes because it leads to vulnerability to MTM attacks."
              },
              "help": {
                "markdown": "Checks for redefinitions of functions that check TLS/SSL certificate verification. This can lead to vulnerabilities, as simple errors in the code can result in lack of proper certificate validation. This should only be used for debugging purposes because it leads to vulnerability to MTM attacks.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://stackoverflow.com/questions/4072585/disabling-ssl-certificate-validation-in-spring-resttemplate](https://stackoverflow.com/questions/4072585/disabling-ssl-certificate-validation-in-spring-resttemplate)\n - [https://stackoverflow.com/questions/35530558/how-to-fix-unsafe-implementation-of-x509trustmanager-in-android-app?rq=1](https://stackoverflow.com/questions/35530558/how-to-fix-unsafe-implementation-of-x509trustmanager-in-android-app?rq=1)\n",
                "text": "Checks for redefinitions of functions that check TLS/SSL certificate verification. This can lead to vulnerabilities, as simple errors in the code can result in lack of proper certificate validation. This should only be used for debugging purposes because it leads to vulnerability to MTM attacks."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.java-spring.bypass-tls-verification.bypass-tls-verification",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.java-spring.bypass-tls-verification.bypass-tls-verification",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.java-spring.bypass-tls-verification.bypass-tls-verification"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Checks for outgoing connections to ftp servers via Spring plugin ftpSessionFactory. FTP does not encrypt traffic, possibly leading to PII being sent plaintext over the network."
              },
              "help": {
                "markdown": "Checks for outgoing connections to ftp servers via Spring plugin ftpSessionFactory. FTP does not encrypt traffic, possibly leading to PII being sent plaintext over the network.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.spring.io/spring-integration/api/org/springframework/integration/ftp/session/AbstractFtpSessionFactory.html#setClientMode-int-](https://docs.spring.io/spring-integration/api/org/springframework/integration/ftp/session/AbstractFtpSessionFactory.html#setClientMode-int-)\n",
                "text": "Checks for outgoing connections to ftp servers via Spring plugin ftpSessionFactory. FTP does not encrypt traffic, possibly leading to PII being sent plaintext over the network."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.java-spring.spring-ftp-request.spring-ftp-request",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.java-spring.spring-ftp-request.spring-ftp-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.java-spring.spring-ftp-request.spring-ftp-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Checks for requests sent via Java Spring RestTemplate API to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS."
              },
              "help": {
                "markdown": "Checks for requests sent via Java Spring RestTemplate API to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html#delete-java.lang.String-java.util.Map-](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html#delete-java.lang.String-java.util.Map-)\n - [https://www.baeldung.com/rest-template](https://www.baeldung.com/rest-template)\n",
                "text": "Checks for requests sent via Java Spring RestTemplate API to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.java-spring.spring-http-request.spring-http-request",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.java-spring.spring-http-request.spring-http-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.java-spring.spring-http-request.spring-http-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Checks for redefinitions of the checkServerTrusted function in the X509TrustManager class that disables TLS/SSL certificate verification. This should only be used for debugging purposes because it leads to vulnerability to MTM attacks."
              },
              "help": {
                "markdown": "Checks for redefinitions of the checkServerTrusted function in the X509TrustManager class that disables TLS/SSL certificate verification. This should only be used for debugging purposes because it leads to vulnerability to MTM attacks.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://riptutorial.com/java/example/16517/temporarily-disable-ssl-verification--for-testing-purposes-](https://riptutorial.com/java/example/16517/temporarily-disable-ssl-verification--for-testing-purposes-)\n - [https://stackoverflow.com/questions/35530558/how-to-fix-unsafe-implementation-of-x509trustmanager-in-android-app?rq=1](https://stackoverflow.com/questions/35530558/how-to-fix-unsafe-implementation-of-x509trustmanager-in-android-app?rq=1)\n",
                "text": "Checks for redefinitions of the checkServerTrusted function in the X509TrustManager class that disables TLS/SSL certificate verification. This should only be used for debugging purposes because it leads to vulnerability to MTM attacks."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.bypass-tls-verification.bypass-tls-verification",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.bypass-tls-verification.bypass-tls-verification",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.bypass-tls-verification.bypass-tls-verification"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detects direct creations of SSLConnectionSocketFactories that don't disallow SSL v2, SSL v3, and TLS v1. SSLSocketFactory can be used to validate the identity of the HTTPS server against a list of trusted certificates. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities."
              },
              "help": {
                "markdown": "Detects direct creations of SSLConnectionSocketFactories that don't disallow SSL v2, SSL v3, and TLS v1. SSLSocketFactory can be used to validate the identity of the HTTPS server against a list of trusted certificates. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://stackoverflow.com/questions/26429751/java-http-clients-and-poodle](https://stackoverflow.com/questions/26429751/java-http-clients-and-poodle)\n",
                "text": "Detects direct creations of SSLConnectionSocketFactories that don't disallow SSL v2, SSL v3, and TLS v1. SSLSocketFactory can be used to validate the identity of the HTTPS server against a list of trusted certificates. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.disallow-old-tls-versions1.disallow-old-tls-versions1",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.disallow-old-tls-versions1.disallow-old-tls-versions1",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.disallow-old-tls-versions1.disallow-old-tls-versions1"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detects setting client protocols to insecure versions of TLS and SSL. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities."
              },
              "help": {
                "markdown": "Detects setting client protocols to insecure versions of TLS and SSL. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://stackoverflow.com/questions/26504653/is-it-possible-to-disable-sslv3-for-all-java-applications](https://stackoverflow.com/questions/26504653/is-it-possible-to-disable-sslv3-for-all-java-applications)\n",
                "text": "Detects setting client protocols to insecure versions of TLS and SSL. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.disallow-old-tls-versions2.disallow-old-tls-versions2",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.disallow-old-tls-versions2.disallow-old-tls-versions2",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.disallow-old-tls-versions2.disallow-old-tls-versions2"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Checks for outgoing connections to ftp servers. FTP does not encrypt traffic, possibly leading to PII being sent plaintext over the network."
              },
              "help": {
                "markdown": "Checks for outgoing connections to ftp servers. FTP does not encrypt traffic, possibly leading to PII being sent plaintext over the network.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.codejava.net/java-se/ftp/connect-and-login-to-a-ftp-server](https://www.codejava.net/java-se/ftp/connect-and-login-to-a-ftp-server)\n - [https://commons.apache.org/proper/commons-net/apidocs/org/apache/commons/net/ftp/FTPClient.html](https://commons.apache.org/proper/commons-net/apidocs/org/apache/commons/net/ftp/FTPClient.html)\n",
                "text": "Checks for outgoing connections to ftp servers. FTP does not encrypt traffic, possibly leading to PII being sent plaintext over the network."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.ftp-request.ftp-request",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.ftp-request.ftp-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.ftp-request.ftp-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Checks for requests sent via Apache HTTP Components to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS."
              },
              "help": {
                "markdown": "Checks for requests sent via Apache HTTP Components to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://hc.apache.org/httpcomponents-client-ga/quickstart.html](https://hc.apache.org/httpcomponents-client-ga/quickstart.html)\n",
                "text": "Checks for requests sent via Apache HTTP Components to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.http-components-request.http-components-request",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.http-components-request.http-components-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.http-components-request.http-components-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Checks for requests sent via HttpClient to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS."
              },
              "help": {
                "markdown": "Checks for requests sent via HttpClient to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://openjdk.java.net/groups/net/httpclient/intro.html](https://openjdk.java.net/groups/net/httpclient/intro.html)\n",
                "text": "Checks for requests sent via HttpClient to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.httpclient-http-request.httpclient-http-request",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.httpclient-http-request.httpclient-http-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.httpclient-http-request.httpclient-http-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected an HTTP request sent via HttpGet. This could lead to sensitive information being sent  over an insecure channel. Instead, it is recommended to send requests over HTTPS."
              },
              "help": {
                "markdown": "Detected an HTTP request sent via HttpGet. This could lead to sensitive information being sent  over an insecure channel. Instead, it is recommended to send requests over HTTPS.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URLConnection.html](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URLConnection.html)\n - [https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URL.html#openConnection()](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URL.html#openConnection())\n",
                "text": "Detected an HTTP request sent via HttpGet. This could lead to sensitive information being sent  over an insecure channel. Instead, it is recommended to send requests over HTTPS."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.httpget-http-request.httpget-http-request",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.httpget-http-request.httpget-http-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.httpget-http-request.httpget-http-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected an HTTP request sent via HttpURLConnection. This could lead to sensitive information being sent over an insecure channel. Instead, it is recommended to send requests over HTTPS."
              },
              "help": {
                "markdown": "Detected an HTTP request sent via HttpURLConnection. This could lead to sensitive information being sent over an insecure channel. Instead, it is recommended to send requests over HTTPS.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URLConnection.html](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URLConnection.html)\n - [https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URL.html#openConnection()](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URL.html#openConnection())\n",
                "text": "Detected an HTTP request sent via HttpURLConnection. This could lead to sensitive information being sent over an insecure channel. Instead, it is recommended to send requests over HTTPS."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.httpurlconnection-http-request.httpurlconnection-http-request",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.httpurlconnection-http-request.httpurlconnection-http-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.httpurlconnection-http-request.httpurlconnection-http-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Checks for attempts to connect through telnet. This is insecure as the telnet protocol supports no encryption, and data passes through unencrypted."
              },
              "help": {
                "markdown": "Checks for attempts to connect through telnet. This is insecure as the telnet protocol supports no encryption, and data passes through unencrypted.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://commons.apache.org/proper/commons-net/javadocs/api-3.6/org/apache/commons/net/telnet/TelnetClient.html](https://commons.apache.org/proper/commons-net/javadocs/api-3.6/org/apache/commons/net/telnet/TelnetClient.html)\n",
                "text": "Checks for attempts to connect through telnet. This is insecure as the telnet protocol supports no encryption, and data passes through unencrypted."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.telnet-request.telnet-request",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.telnet-request.telnet-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.telnet-request.telnet-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Checks for cases where java applications are allowing unsafe renegotiation. This leaves the application vulnerable to a man-in-the-middle attack where chosen plain text is injected as prefix to a TLS connection."
              },
              "help": {
                "markdown": "Checks for cases where java applications are allowing unsafe renegotiation. This leaves the application vulnerable to a man-in-the-middle attack where chosen plain text is injected as prefix to a TLS connection.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.oracle.com/java/technologies/javase/tlsreadme.html](https://www.oracle.com/java/technologies/javase/tlsreadme.html)\n",
                "text": "Checks for cases where java applications are allowing unsafe renegotiation. This leaves the application vulnerable to a man-in-the-middle attack where chosen plain text is injected as prefix to a TLS connection."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.tls-renegotiation.tls-renegotiation",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.tls-renegotiation.tls-renegotiation",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.tls-renegotiation.tls-renegotiation"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Checks for requests sent via Unirest to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS."
              },
              "help": {
                "markdown": "Checks for requests sent via Unirest to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://kong.github.io/unirest-java/#requests](https://kong.github.io/unirest-java/#requests)\n",
                "text": "Checks for requests sent via Unirest to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.unirest-http-request.unirest-http-request",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.unirest-http-request.unirest-http-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.java-stdlib.unirest-http-request.unirest-http-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Checks for setting the environment variable NODE_TLS_REJECT_UNAUTHORIZED to 0, which disables TLS verification. This should only be used for debugging purposes. Setting the option rejectUnauthorized to false bypasses verification against the list of trusted CAs, which also leads to insecure transport. These options lead to vulnerability to MTM attacks, and should not be used."
              },
              "help": {
                "markdown": "Checks for setting the environment variable NODE_TLS_REJECT_UNAUTHORIZED to 0, which disables TLS verification. This should only be used for debugging purposes. Setting the option rejectUnauthorized to false bypasses verification against the list of trusted CAs, which also leads to insecure transport. These options lead to vulnerability to MTM attacks, and should not be used.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://nodejs.org/api/https.html#https_https_request_options_callback](https://nodejs.org/api/https.html#https_https_request_options_callback)\n - [https://stackoverflow.com/questions/20433287/node-js-request-cert-has-expired#answer-29397100](https://stackoverflow.com/questions/20433287/node-js-request-cert-has-expired#answer-29397100)\n",
                "text": "Checks for setting the environment variable NODE_TLS_REJECT_UNAUTHORIZED to 0, which disables TLS verification. This should only be used for debugging purposes. Setting the option rejectUnauthorized to false bypasses verification against the list of trusted CAs, which also leads to insecure transport. These options lead to vulnerability to MTM attacks, and should not be used."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.js-node.bypass-tls-verification.bypass-tls-verification",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.js-node.bypass-tls-verification.bypass-tls-verification",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.js-node.bypass-tls-verification.bypass-tls-verification"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detects direct creations of $HTTPS servers that don't disallow SSL v2, SSL v3, and TLS v1. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities."
              },
              "help": {
                "markdown": "Detects direct creations of $HTTPS servers that don't disallow SSL v2, SSL v3, and TLS v1. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://us-cert.cisa.gov/ncas/alerts/TA14-290A](https://us-cert.cisa.gov/ncas/alerts/TA14-290A)\n - [https://stackoverflow.com/questions/40434934/how-to-disable-the-ssl-3-0-and-tls-1-0-in-nodejs](https://stackoverflow.com/questions/40434934/how-to-disable-the-ssl-3-0-and-tls-1-0-in-nodejs)\n - [https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener](https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener)\n",
                "text": "Detects direct creations of $HTTPS servers that don't disallow SSL v2, SSL v3, and TLS v1. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.js-node.disallow-old-tls-versions1.disallow-old-tls-versions1",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.js-node.disallow-old-tls-versions1.disallow-old-tls-versions1",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.js-node.disallow-old-tls-versions1.disallow-old-tls-versions1"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detects creations of $HTTPS servers from option objects that don't disallow SSL v2, SSL v3, and TLS v1. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities."
              },
              "help": {
                "markdown": "Detects creations of $HTTPS servers from option objects that don't disallow SSL v2, SSL v3, and TLS v1. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://us-cert.cisa.gov/ncas/alerts/TA14-290A](https://us-cert.cisa.gov/ncas/alerts/TA14-290A)\n - [https://stackoverflow.com/questions/40434934/how-to-disable-the-ssl-3-0-and-tls-1-0-in-nodejs](https://stackoverflow.com/questions/40434934/how-to-disable-the-ssl-3-0-and-tls-1-0-in-nodejs)\n - [https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener](https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener)\n",
                "text": "Detects creations of $HTTPS servers from option objects that don't disallow SSL v2, SSL v3, and TLS v1. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.js-node.disallow-old-tls-versions2.disallow-old-tls-versions2",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.js-node.disallow-old-tls-versions2.disallow-old-tls-versions2",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.js-node.disallow-old-tls-versions2.disallow-old-tls-versions2"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Checks for lack of usage of the \"secure: true\" option when sending ftp requests through the nodejs ftp module. This leads to unencrypted traffic being sent to the ftp server. There are other options such as \"implicit\" that still does not encrypt all traffic. ftp is the most utilized npm ftp module."
              },
              "help": {
                "markdown": "Checks for lack of usage of the \"secure: true\" option when sending ftp requests through the nodejs ftp module. This leads to unencrypted traffic being sent to the ftp server. There are other options such as \"implicit\" that still does not encrypt all traffic. ftp is the most utilized npm ftp module.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.npmjs.com/package/ftp](https://www.npmjs.com/package/ftp)\n - [https://openbase.io/js/ftp](https://openbase.io/js/ftp)\n",
                "text": "Checks for lack of usage of the \"secure: true\" option when sending ftp requests through the nodejs ftp module. This leads to unencrypted traffic being sent to the ftp server. There are other options such as \"implicit\" that still does not encrypt all traffic. ftp is the most utilized npm ftp module."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.js-node.ftp-request.ftp-request",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.js-node.ftp-request.ftp-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.js-node.ftp-request.ftp-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Checks for requests sent to http:// URLs. This is dangerous as the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, only send requests to https:// URLs."
              },
              "help": {
                "markdown": "Checks for requests sent to http:// URLs. This is dangerous as the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, only send requests to https:// URLs.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://nodejs.org/api/http.html#http_http_request_options_callback](https://nodejs.org/api/http.html#http_http_request_options_callback)\n",
                "text": "Checks for requests sent to http:// URLs. This is dangerous as the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, only send requests to https:// URLs."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.js-node.http-request.http-request",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.js-node.http-request.http-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.js-node.http-request.http-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Checks for requests to http (unencrypted) sites using some of node js's most popular REST/HTTP libraries, including node-rest-client, axios, and got."
              },
              "help": {
                "markdown": "Checks for requests to http (unencrypted) sites using some of node js's most popular REST/HTTP libraries, including node-rest-client, axios, and got.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.npmjs.com/package/axios](https://www.npmjs.com/package/axios)\n - [https://www.npmjs.com/package/got](https://www.npmjs.com/package/got)\n - [https://www.npmjs.com/package/node-rest-client](https://www.npmjs.com/package/node-rest-client)\n",
                "text": "Checks for requests to http (unencrypted) sites using some of node js's most popular REST/HTTP libraries, including node-rest-client, axios, and got."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.js-node.rest-http-client-support.rest-http-client-support",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.js-node.rest-http-client-support.rest-http-client-support",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.js-node.rest-http-client-support.rest-http-client-support"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Checks for creation of telnet servers or attempts to connect through telnet. This is insecure as the telnet protocol supports no encryption, and data passes through unencrypted."
              },
              "help": {
                "markdown": "Checks for creation of telnet servers or attempts to connect through telnet. This is insecure as the telnet protocol supports no encryption, and data passes through unencrypted.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.npmjs.com/package/telnet](https://www.npmjs.com/package/telnet)\n - [https://www.npmjs.com/package/telnet-client](https://www.npmjs.com/package/telnet-client)\n",
                "text": "Checks for creation of telnet servers or attempts to connect through telnet. This is insecure as the telnet protocol supports no encryption, and data passes through unencrypted."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.js-node.telnet-request.telnet-request",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.js-node.telnet-request.telnet-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.js-node.telnet-request.telnet-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Checks for requests to http (unencrypted) sites using some of ruby's most popular REST/HTTP libraries, including httparty and restclient."
              },
              "help": {
                "markdown": "Checks for requests to http (unencrypted) sites using some of ruby's most popular REST/HTTP libraries, including httparty and restclient.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://github.com/rest-client/rest-client](https://github.com/rest-client/rest-client)\n - [https://github.com/jnunemaker/httparty/tree/master/docs](https://github.com/jnunemaker/httparty/tree/master/docs)\n",
                "text": "Checks for requests to http (unencrypted) sites using some of ruby's most popular REST/HTTP libraries, including httparty and restclient."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.ruby-stdlib.http-client-requests.http-client-requests",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.ruby-stdlib.http-client-requests.http-client-requests",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.ruby-stdlib.http-client-requests.http-client-requests"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Checks for outgoing connections to ftp servers with the 'net/ftp' package. FTP does not encrypt traffic, possibly leading to PII being sent plaintext over the network. Instead, connect via the SFTP protocol."
              },
              "help": {
                "markdown": "Checks for outgoing connections to ftp servers with the 'net/ftp' package. FTP does not encrypt traffic, possibly leading to PII being sent plaintext over the network. Instead, connect via the SFTP protocol.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.ruby-lang.org/en/2.0.0/Net/FTP.html](https://docs.ruby-lang.org/en/2.0.0/Net/FTP.html)\n",
                "text": "Checks for outgoing connections to ftp servers with the 'net/ftp' package. FTP does not encrypt traffic, possibly leading to PII being sent plaintext over the network. Instead, connect via the SFTP protocol."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.ruby-stdlib.net-ftp-request.net-ftp-request",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.ruby-stdlib.net-ftp-request.net-ftp-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.ruby-stdlib.net-ftp-request.net-ftp-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Checks for requests sent to http:// URLs. This is dangerous as the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, only send requests to https:// URLs."
              },
              "help": {
                "markdown": "Checks for requests sent to http:// URLs. This is dangerous as the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, only send requests to https:// URLs.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://ruby-doc.org/stdlib-2.6.5/libdoc/net/http/rdoc/Net/](https://ruby-doc.org/stdlib-2.6.5/libdoc/net/http/rdoc/Net/)\n",
                "text": "Checks for requests sent to http:// URLs. This is dangerous as the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, only send requests to https:// URLs."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.ruby-stdlib.net-http-request.net-http-request",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.ruby-stdlib.net-http-request.net-http-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.ruby-stdlib.net-http-request.net-http-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Checks for creation of telnet servers or attempts to connect through telnet. This is insecure as the telnet protocol supports no encryption, and data passes through unencrypted."
              },
              "help": {
                "markdown": "Checks for creation of telnet servers or attempts to connect through telnet. This is insecure as the telnet protocol supports no encryption, and data passes through unencrypted.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.ruby-lang.org/en/2.2.0/Net/Telnet.html](https://docs.ruby-lang.org/en/2.2.0/Net/Telnet.html)\n - [https://www.rubydoc.info/gems/net-ssh-telnet2/0.1.0/Net/SSH/Telnet](https://www.rubydoc.info/gems/net-ssh-telnet2/0.1.0/Net/SSH/Telnet)\n",
                "text": "Checks for creation of telnet servers or attempts to connect through telnet. This is insecure as the telnet protocol supports no encryption, and data passes through unencrypted."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.ruby-stdlib.net-telnet-request.net-telnet-request",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.ruby-stdlib.net-telnet-request.net-telnet-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.ruby-stdlib.net-telnet-request.net-telnet-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Checks for requests to http and ftp (unencrypted) sites using OpenURI."
              },
              "help": {
                "markdown": "Checks for requests to http and ftp (unencrypted) sites using OpenURI.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://ruby-doc.org/stdlib-2.6.3/libdoc/open-uri/rdoc/OpenURI.html](https://ruby-doc.org/stdlib-2.6.3/libdoc/open-uri/rdoc/OpenURI.html)\n",
                "text": "Checks for requests to http and ftp (unencrypted) sites using OpenURI."
              },
              "id": "codacy.tools-configs.problem-based-packs.insecure-transport.ruby-stdlib.openuri-request.openuri-request",
              "name": "codacy.tools-configs.problem-based-packs.insecure-transport.ruby-stdlib.openuri-request.openuri-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.problem-based-packs.insecure-transport.ruby-stdlib.openuri-request.openuri-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Spring Boot Actuator is fully enabled. This exposes sensitive endpoints\nsuch as /actuator/env, /actuator/logfile, /actuator/heapdump and others.\nIf the application lacks proper security measures (e.g., authentication and \nauthorization), sensitive data could be accessed, compromising the application and \nits infrastructure. This configuration poses a serious risk in production \nenvironments or public-facing deployments.\n\nTo mitigate the risks, take the following measures:\n  - Expose only the Actuator endpoints required for your use case\n  - For production environments, restrict exposure to non-sensitive endpoints \n  like `health` or `info`\n  - Ensure Actuator endpoints are protected with authentication and authorization \n  (e.g., via Spring Security)\n  - Use environment-specific configurations to limit exposure in production\n\nSecure Code Example:\nInstead of include: \"*\", list only the endpoints you need to expose:\n```\nmanagement.endpoints.web.exposure.include=\"health,info,metrics\"\n```\n\nReferences:\n- https://docs.spring.io/spring-boot/reference/actuator/endpoints.html#actuator.endpoints.exposing\n- https://medium.com/walmartglobaltech/perils-of-spring-boot-actuators-misconfiguration-185c43a0f785\n- https://blog.maass.xyz/spring-actuator-security-part-1-stealing-secrets-using-spring-actuators\n"
              },
              "help": {
                "markdown": "Spring Boot Actuator is fully enabled. This exposes sensitive endpoints\nsuch as /actuator/env, /actuator/logfile, /actuator/heapdump and others.\nIf the application lacks proper security measures (e.g., authentication and \nauthorization), sensitive data could be accessed, compromising the application and \nits infrastructure. This configuration poses a serious risk in production \nenvironments or public-facing deployments.\n\nTo mitigate the risks, take the following measures:\n  - Expose only the Actuator endpoints required for your use case\n  - For production environments, restrict exposure to non-sensitive endpoints \n  like `health` or `info`\n  - Ensure Actuator endpoints are protected with authentication and authorization \n  (e.g., via Spring Security)\n  - Use environment-specific configurations to limit exposure in production\n\nSecure Code Example:\nInstead of include: \"*\", list only the endpoints you need to expose:\n```\nmanagement.endpoints.web.exposure.include=\"health,info,metrics\"\n```\n\nReferences:\n- https://docs.spring.io/spring-boot/reference/actuator/endpoints.html#actuator.endpoints.exposing\n- https://medium.com/walmartglobaltech/perils-of-spring-boot-actuators-misconfiguration-185c43a0f785\n- https://blog.maass.xyz/spring-actuator-security-part-1-stealing-secrets-using-spring-actuators\n",
                "text": "Spring Boot Actuator is fully enabled. This exposes sensitive endpoints\nsuch as /actuator/env, /actuator/logfile, /actuator/heapdump and others.\nIf the application lacks proper security measures (e.g., authentication and \nauthorization), sensitive data could be accessed, compromising the application and \nits infrastructure. This configuration poses a serious risk in production \nenvironments or public-facing deployments.\n\nTo mitigate the risks, take the following measures:\n  - Expose only the Actuator endpoints required for your use case\n  - For production environments, restrict exposure to non-sensitive endpoints \n  like `health` or `info`\n  - Ensure Actuator endpoints are protected with authentication and authorization \n  (e.g., via Spring Security)\n  - Use environment-specific configurations to limit exposure in production\n\nSecure Code Example:\nInstead of include: \"*\", list only the endpoints you need to expose:\n```\nmanagement.endpoints.web.exposure.include=\"health,info,metrics\"\n```\n\nReferences:\n- https://docs.spring.io/spring-boot/reference/actuator/endpoints.html#actuator.endpoints.exposing\n- https://medium.com/walmartglobaltech/perils-of-spring-boot-actuators-misconfiguration-185c43a0f785\n- https://blog.maass.xyz/spring-actuator-security-part-1-stealing-secrets-using-spring-actuators\n"
              },
              "id": "codacy.tools-configs.properties_spring_rule-SpringActuatorFullyEnabled",
              "name": "codacy.tools-configs.properties_spring_rule-SpringActuatorFullyEnabled",
              "properties": {
                "precision": "very-high",
                "security-severity": "Medium",
                "tags": [
                  "CWE-497",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021-Broken Access Control",
                  "OWASP-A3:2017-Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Exposure of sensitive system information to an unauthorized control sphere"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected 'create_subprocess_exec' function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
              },
              "help": {
                "markdown": "Detected 'create_subprocess_exec' function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n",
                "text": "Detected 'create_subprocess_exec' function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
              },
              "id": "codacy.tools-configs.python.aws-lambda.security.dangerous-asyncio-create-exec.dangerous-asyncio-create-exec",
              "name": "codacy.tools-configs.python.aws-lambda.security.dangerous-asyncio-create-exec.dangerous-asyncio-create-exec",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.aws-lambda.security.dangerous-asyncio-create-exec.dangerous-asyncio-create-exec"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$LOOP.subprocess_exec' with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
              },
              "help": {
                "markdown": "Detected subprocess function '$LOOP.subprocess_exec' with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n",
                "text": "Detected subprocess function '$LOOP.subprocess_exec' with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
              },
              "id": "codacy.tools-configs.python.aws-lambda.security.dangerous-asyncio-exec.dangerous-asyncio-exec",
              "name": "codacy.tools-configs.python.aws-lambda.security.dangerous-asyncio-exec.dangerous-asyncio-exec",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.aws-lambda.security.dangerous-asyncio-exec.dangerous-asyncio-exec"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected asyncio subprocess function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
              },
              "help": {
                "markdown": "Detected asyncio subprocess function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.python.org/3/library/asyncio-subprocess.html](https://docs.python.org/3/library/asyncio-subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n",
                "text": "Detected asyncio subprocess function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
              },
              "id": "codacy.tools-configs.python.aws-lambda.security.dangerous-asyncio-shell.dangerous-asyncio-shell",
              "name": "codacy.tools-configs.python.aws-lambda.security.dangerous-asyncio-shell.dangerous-asyncio-shell",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.aws-lambda.security.dangerous-asyncio-shell.dangerous-asyncio-shell"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected `os` function with argument tainted by `event` object. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here."
              },
              "help": {
                "markdown": "Detected `os` function with argument tainted by `event` object. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
                "text": "Detected `os` function with argument tainted by `event` object. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here."
              },
              "helpUri": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
              "id": "codacy.tools-configs.python.aws-lambda.security.dangerous-spawn-process.dangerous-spawn-process",
              "name": "codacy.tools-configs.python.aws-lambda.security.dangerous-spawn-process.dangerous-spawn-process",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.aws-lambda.security.dangerous-spawn-process.dangerous-spawn-process"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected subprocess function with argument tainted by an `event` object.  If this data can be controlled by a malicious actor, it may be an instance of command injection. The default option for `shell` is False, and this is secure by default. Consider removing the `shell=True` or setting it to False explicitely. Using `shell=False` means you have to split the command string into an array of strings for the command and its arguments. You may consider using 'shlex.split()' for this purpose."
              },
              "help": {
                "markdown": "Detected subprocess function with argument tainted by an `event` object.  If this data can be controlled by a malicious actor, it may be an instance of command injection. The default option for `shell` is False, and this is secure by default. Consider removing the `shell=True` or setting it to False explicitely. Using `shell=False` means you have to split the command string into an array of strings for the command and its arguments. You may consider using 'shlex.split()' for this purpose.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n",
                "text": "Detected subprocess function with argument tainted by an `event` object.  If this data can be controlled by a malicious actor, it may be an instance of command injection. The default option for `shell` is False, and this is secure by default. Consider removing the `shell=True` or setting it to False explicitely. Using `shell=False` means you have to split the command string into an array of strings for the command and its arguments. You may consider using 'shlex.split()' for this purpose."
              },
              "id": "codacy.tools-configs.python.aws-lambda.security.dangerous-subprocess-use.dangerous-subprocess-use",
              "name": "codacy.tools-configs.python.aws-lambda.security.dangerous-subprocess-use.dangerous-subprocess-use",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.aws-lambda.security.dangerous-subprocess-use.dangerous-subprocess-use"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected `os` function with argument tainted by `event` object. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
              },
              "help": {
                "markdown": "Detected `os` function with argument tainted by `event` object. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
                "text": "Detected `os` function with argument tainted by `event` object. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
              },
              "helpUri": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
              "id": "codacy.tools-configs.python.aws-lambda.security.dangerous-system-call.dangerous-system-call",
              "name": "codacy.tools-configs.python.aws-lambda.security.dangerous-system-call.dangerous-system-call",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.aws-lambda.security.dangerous-system-call.dangerous-system-call"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected DynamoDB query filter that is tainted by `$EVENT` object. This could lead to NoSQL injection if the variable is user-controlled and not properly sanitized. Explicitly assign query params instead of passing data from `$EVENT` directly to DynamoDB client."
              },
              "help": {
                "markdown": "Detected DynamoDB query filter that is tainted by `$EVENT` object. This could lead to NoSQL injection if the variable is user-controlled and not properly sanitized. Explicitly assign query params instead of passing data from `$EVENT` directly to DynamoDB client.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://medium.com/appsecengineer/dynamodb-injection-1db99c2454ac](https://medium.com/appsecengineer/dynamodb-injection-1db99c2454ac)\n",
                "text": "Detected DynamoDB query filter that is tainted by `$EVENT` object. This could lead to NoSQL injection if the variable is user-controlled and not properly sanitized. Explicitly assign query params instead of passing data from `$EVENT` directly to DynamoDB client."
              },
              "id": "codacy.tools-configs.python.aws-lambda.security.dynamodb-filter-injection.dynamodb-filter-injection",
              "name": "codacy.tools-configs.python.aws-lambda.security.dynamodb-filter-injection.dynamodb-filter-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-943: Improper Neutralization of Special Elements in Data Query Logic",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.aws-lambda.security.dynamodb-filter-injection.dynamodb-filter-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', ('active'))`"
              },
              "help": {
                "markdown": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', ('active'))`\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-execute.html](https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-execute.html)\n - [https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-executemany.html](https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-executemany.html)\n",
                "text": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', ('active'))`"
              },
              "id": "codacy.tools-configs.python.aws-lambda.security.mysql-sqli.mysql-sqli",
              "name": "codacy.tools-configs.python.aws-lambda.security.mysql-sqli.mysql-sqli",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.aws-lambda.security.mysql-sqli.mysql-sqli"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', 'active')`"
              },
              "help": {
                "markdown": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', 'active')`\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.psycopg.org/docs/cursor.html#cursor.execute](https://www.psycopg.org/docs/cursor.html#cursor.execute)\n - [https://www.psycopg.org/docs/cursor.html#cursor.executemany](https://www.psycopg.org/docs/cursor.html#cursor.executemany)\n - [https://www.psycopg.org/docs/cursor.html#cursor.mogrify](https://www.psycopg.org/docs/cursor.html#cursor.mogrify)\n",
                "text": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', 'active')`"
              },
              "id": "codacy.tools-configs.python.aws-lambda.security.psycopg-sqli.psycopg-sqli",
              "name": "codacy.tools-configs.python.aws-lambda.security.psycopg-sqli.psycopg-sqli",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.aws-lambda.security.psycopg-sqli.psycopg-sqli"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', 'active')`"
              },
              "help": {
                "markdown": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', 'active')`\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://pypi.org/project/pymssql/](https://pypi.org/project/pymssql/)\n",
                "text": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', 'active')`"
              },
              "id": "codacy.tools-configs.python.aws-lambda.security.pymssql-sqli.pymssql-sqli",
              "name": "codacy.tools-configs.python.aws-lambda.security.pymssql-sqli.pymssql-sqli",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.aws-lambda.security.pymssql-sqli.pymssql-sqli"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', ('active'))`"
              },
              "help": {
                "markdown": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', ('active'))`\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://pypi.org/project/PyMySQL/#id4](https://pypi.org/project/PyMySQL/#id4)\n",
                "text": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', ('active'))`"
              },
              "id": "codacy.tools-configs.python.aws-lambda.security.pymysql-sqli.pymysql-sqli",
              "name": "codacy.tools-configs.python.aws-lambda.security.pymysql-sqli.pymysql-sqli",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.aws-lambda.security.pymysql-sqli.pymysql-sqli"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = ?', 'active')`"
              },
              "help": {
                "markdown": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = ?', 'active')`\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.sqlalchemy.org/en/14/core/connections.html#sqlalchemy.engine.Connection.execute](https://docs.sqlalchemy.org/en/14/core/connections.html#sqlalchemy.engine.Connection.execute)\n",
                "text": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = ?', 'active')`"
              },
              "id": "codacy.tools-configs.python.aws-lambda.security.sqlalchemy-sqli.sqlalchemy-sqli",
              "name": "codacy.tools-configs.python.aws-lambda.security.sqlalchemy-sqli.sqlalchemy-sqli",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.aws-lambda.security.sqlalchemy-sqli.sqlalchemy-sqli"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected the use of `exec/eval`.This can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "help": {
                "markdown": "Detected the use of `exec/eval`.This can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
                "text": "Detected the use of `exec/eval`.This can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "id": "codacy.tools-configs.python.aws-lambda.security.tainted-code-exec.tainted-code-exec",
              "name": "codacy.tools-configs.python.aws-lambda.security.tainted-code-exec.tainted-code-exec",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.aws-lambda.security.tainted-code-exec.tainted-code-exec"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected user input flowing into an HTML response. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data."
              },
              "help": {
                "markdown": "Detected user input flowing into an HTML response. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
                "text": "Detected user input flowing into an HTML response. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data."
              },
              "id": "codacy.tools-configs.python.aws-lambda.security.tainted-html-response.tainted-html-response",
              "name": "codacy.tools-configs.python.aws-lambda.security.tainted-html-response.tainted-html-response",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.aws-lambda.security.tainted-html-response.tainted-html-response"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates which will safely render HTML instead."
              },
              "help": {
                "markdown": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates which will safely render HTML instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
                "text": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates which will safely render HTML instead."
              },
              "id": "codacy.tools-configs.python.aws-lambda.security.tainted-html-string.tainted-html-string",
              "name": "codacy.tools-configs.python.aws-lambda.security.tainted-html-string.tainted-html-string",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.aws-lambda.security.tainted-html-string.tainted-html-string"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "help": {
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n - [https://davidhamann.de/2020/04/05/exploiting-python-pickle/](https://davidhamann.de/2020/04/05/exploiting-python-pickle/)\n",
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "id": "codacy.tools-configs.python.aws-lambda.security.tainted-pickle-deserialization.tainted-pickle-deserialization",
              "name": "codacy.tools-configs.python.aws-lambda.security.tainted-pickle-deserialization.tainted-pickle-deserialization",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-502: Deserialization of Untrusted Data",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A08:2017 - Insecure Deserialization",
                  "OWASP-A08:2021 - Software and Data Integrity Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.aws-lambda.security.tainted-pickle-deserialization.tainted-pickle-deserialization"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."
              },
              "help": {
                "markdown": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/www-community/attacks/SQL_Injection](https://owasp.org/www-community/attacks/SQL_Injection)\n",
                "text": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."
              },
              "id": "codacy.tools-configs.python.aws-lambda.security.tainted-sql-string.tainted-sql-string",
              "name": "codacy.tools-configs.python.aws-lambda.security.tainted-sql-string.tainted-sql-string",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.aws-lambda.security.tainted-sql-string.tainted-sql-string"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
              },
              "help": {
                "markdown": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n - [https://bento.dev/checks/boto3/hardcoded-access-token/](https://bento.dev/checks/boto3/hardcoded-access-token/)\n - [https://aws.amazon.com/blogs/security/what-to-do-if-you-inadvertently-expose-an-aws-access-key/](https://aws.amazon.com/blogs/security/what-to-do-if-you-inadvertently-expose-an-aws-access-key/)\n",
                "text": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
              },
              "id": "codacy.tools-configs.python.boto3.security.hardcoded-token.hardcoded-token",
              "name": "codacy.tools-configs.python.boto3.security.hardcoded-token.hardcoded-token",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-798: Use of Hard-coded Credentials",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.boto3.security.hardcoded-token.hardcoded-token"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Potential empty AES encryption key. Using an empty key in AES encryption can result in weak encryption and may allow attackers to easily decrypt sensitive data. Ensure that a strong, non-empty key is used for AES encryption."
              },
              "help": {
                "markdown": "Potential empty AES encryption key. Using an empty key in AES encryption can result in weak encryption and may allow attackers to easily decrypt sensitive data. Ensure that a strong, non-empty key is used for AES encryption.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cwe.mitre.org/data/definitions/327.html](https://cwe.mitre.org/data/definitions/327.html)\n - [https://cwe.mitre.org/data/definitions/310.html](https://cwe.mitre.org/data/definitions/310.html)\n",
                "text": "Potential empty AES encryption key. Using an empty key in AES encryption can result in weak encryption and may allow attackers to easily decrypt sensitive data. Ensure that a strong, non-empty key is used for AES encryption."
              },
              "id": "codacy.tools-configs.python.cryptography.security.empty-aes-key.empty-aes-key",
              "name": "codacy.tools-configs.python.cryptography.security.empty-aes-key.empty-aes-key",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-310: Cryptographic Issues",
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A6:2017 misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.cryptography.security.empty-aes-key.empty-aes-key"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "ARC4 (Alleged RC4) is a stream cipher with serious weaknesses in its initial stream output.  Its use is strongly discouraged. ARC4 does not use mode constructions. Use a strong symmetric cipher such as EAS instead. With the `cryptography` package it is recommended to use the `Fernet` which is a secure implementation of AES in CBC mode with a 128-bit key.  Alternatively, keep using the `Cipher` class from the hazmat primitives but use the AES algorithm instead."
              },
              "help": {
                "markdown": "ARC4 (Alleged RC4) is a stream cipher with serious weaknesses in its initial stream output.  Its use is strongly discouraged. ARC4 does not use mode constructions. Use a strong symmetric cipher such as EAS instead. With the `cryptography` package it is recommended to use the `Fernet` which is a secure implementation of AES in CBC mode with a 128-bit key.  Alternatively, keep using the `Cipher` class from the hazmat primitives but use the AES algorithm instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L98)\n - [https://cryptography.io/en/latest/hazmat/primitives/symmetric-encryption/#weak-ciphers](https://cryptography.io/en/latest/hazmat/primitives/symmetric-encryption/#weak-ciphers)\n",
                "text": "ARC4 (Alleged RC4) is a stream cipher with serious weaknesses in its initial stream output.  Its use is strongly discouraged. ARC4 does not use mode constructions. Use a strong symmetric cipher such as EAS instead. With the `cryptography` package it is recommended to use the `Fernet` which is a secure implementation of AES in CBC mode with a 128-bit key.  Alternatively, keep using the `Cipher` class from the hazmat primitives but use the AES algorithm instead."
              },
              "helpUri": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L98",
              "id": "codacy.tools-configs.python.cryptography.security.insecure-cipher-algorithms-arc4.insecure-cipher-algorithm-arc4",
              "name": "codacy.tools-configs.python.cryptography.security.insecure-cipher-algorithms-arc4.insecure-cipher-algorithm-arc4",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.cryptography.security.insecure-cipher-algorithms-arc4.insecure-cipher-algorithm-arc4"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Blowfish is a block cipher developed by Bruce Schneier. It is known to be susceptible to attacks when using weak keys.  The author has recommended that users of Blowfish move to newer algorithms such as AES. With the `cryptography` package it is recommended to use `Fernet` which is a secure implementation of AES in CBC mode with a 128-bit key.  Alternatively, keep using the `Cipher` class from the hazmat primitives but use the AES algorithm instead."
              },
              "help": {
                "markdown": "Blowfish is a block cipher developed by Bruce Schneier. It is known to be susceptible to attacks when using weak keys.  The author has recommended that users of Blowfish move to newer algorithms such as AES. With the `cryptography` package it is recommended to use `Fernet` which is a secure implementation of AES in CBC mode with a 128-bit key.  Alternatively, keep using the `Cipher` class from the hazmat primitives but use the AES algorithm instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L98)\n - [https://cryptography.io/en/latest/hazmat/primitives/symmetric-encryption/#weak-ciphers](https://cryptography.io/en/latest/hazmat/primitives/symmetric-encryption/#weak-ciphers)\n - [https://tools.ietf.org/html/rfc5469](https://tools.ietf.org/html/rfc5469)\n",
                "text": "Blowfish is a block cipher developed by Bruce Schneier. It is known to be susceptible to attacks when using weak keys.  The author has recommended that users of Blowfish move to newer algorithms such as AES. With the `cryptography` package it is recommended to use `Fernet` which is a secure implementation of AES in CBC mode with a 128-bit key.  Alternatively, keep using the `Cipher` class from the hazmat primitives but use the AES algorithm instead."
              },
              "helpUri": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L98",
              "id": "codacy.tools-configs.python.cryptography.security.insecure-cipher-algorithms-blowfish.insecure-cipher-algorithm-blowfish",
              "name": "codacy.tools-configs.python.cryptography.security.insecure-cipher-algorithms-blowfish.insecure-cipher-algorithm-blowfish",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.cryptography.security.insecure-cipher-algorithms-blowfish.insecure-cipher-algorithm-blowfish"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "IDEA (International Data Encryption Algorithm) is a block cipher created in 1991.  It is an optional component of the OpenPGP standard. This cipher is susceptible to attacks when using weak keys.  It is recommended that you do not use this cipher for new applications. Use a strong symmetric cipher such as EAS instead. With the `cryptography` package it is recommended to use `Fernet` which is a secure implementation of AES in CBC mode with a 128-bit key.  Alternatively, keep using the `Cipher` class from the hazmat primitives but use the AES algorithm instead."
              },
              "help": {
                "markdown": "IDEA (International Data Encryption Algorithm) is a block cipher created in 1991.  It is an optional component of the OpenPGP standard. This cipher is susceptible to attacks when using weak keys.  It is recommended that you do not use this cipher for new applications. Use a strong symmetric cipher such as EAS instead. With the `cryptography` package it is recommended to use `Fernet` which is a secure implementation of AES in CBC mode with a 128-bit key.  Alternatively, keep using the `Cipher` class from the hazmat primitives but use the AES algorithm instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L98)\n - [https://tools.ietf.org/html/rfc5469](https://tools.ietf.org/html/rfc5469)\n - [https://cryptography.io/en/latest/hazmat/primitives/symmetric-encryption/#cryptography.hazmat.primitives.ciphers.algorithms.IDEA](https://cryptography.io/en/latest/hazmat/primitives/symmetric-encryption/#cryptography.hazmat.primitives.ciphers.algorithms.IDEA)\n",
                "text": "IDEA (International Data Encryption Algorithm) is a block cipher created in 1991.  It is an optional component of the OpenPGP standard. This cipher is susceptible to attacks when using weak keys.  It is recommended that you do not use this cipher for new applications. Use a strong symmetric cipher such as EAS instead. With the `cryptography` package it is recommended to use `Fernet` which is a secure implementation of AES in CBC mode with a 128-bit key.  Alternatively, keep using the `Cipher` class from the hazmat primitives but use the AES algorithm instead."
              },
              "helpUri": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L98",
              "id": "codacy.tools-configs.python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-idea",
              "name": "codacy.tools-configs.python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-idea",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-idea"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "ECB (Electronic Code Book) is the simplest mode of operation for block ciphers.  Each block of data is encrypted in the same way.  This means identical plaintext blocks will always result in identical ciphertext blocks, which can leave significant patterns in the output. Use a different, cryptographically strong mode instead, such as GCM."
              },
              "help": {
                "markdown": "ECB (Electronic Code Book) is the simplest mode of operation for block ciphers.  Each block of data is encrypted in the same way.  This means identical plaintext blocks will always result in identical ciphertext blocks, which can leave significant patterns in the output. Use a different, cryptographically strong mode instead, such as GCM.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L101)\n - [https://cryptography.io/en/latest/hazmat/primitives/symmetric-encryption/#insecure-modes](https://cryptography.io/en/latest/hazmat/primitives/symmetric-encryption/#insecure-modes)\n - [https://crypto.stackexchange.com/questions/20941/why-shouldnt-i-use-ecb-encryption](https://crypto.stackexchange.com/questions/20941/why-shouldnt-i-use-ecb-encryption)\n",
                "text": "ECB (Electronic Code Book) is the simplest mode of operation for block ciphers.  Each block of data is encrypted in the same way.  This means identical plaintext blocks will always result in identical ciphertext blocks, which can leave significant patterns in the output. Use a different, cryptographically strong mode instead, such as GCM."
              },
              "helpUri": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L101",
              "id": "codacy.tools-configs.python.cryptography.security.insecure-cipher-mode-ecb.insecure-cipher-mode-ecb",
              "name": "codacy.tools-configs.python.cryptography.security.insecure-cipher-mode-ecb.insecure-cipher-mode-ecb",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.cryptography.security.insecure-cipher-mode-ecb.insecure-cipher-mode-ecb"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "help": {
                "markdown": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59)\n - [https://cryptography.io/en/latest/hazmat/primitives/cryptographic-hashes/#md5](https://cryptography.io/en/latest/hazmat/primitives/cryptographic-hashes/#md5)\n - [https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html](https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html)\n - [https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability](https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability)\n - [http://2012.sharcs.org/slides/stevens.pdf](http://2012.sharcs.org/slides/stevens.pdf)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n",
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "helpUri": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
              "id": "codacy.tools-configs.python.cryptography.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5",
              "name": "codacy.tools-configs.python.cryptography.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.cryptography.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "help": {
                "markdown": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59)\n - [https://cryptography.io/en/latest/hazmat/primitives/cryptographic-hashes/#sha-1](https://cryptography.io/en/latest/hazmat/primitives/cryptographic-hashes/#sha-1)\n - [https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html](https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html)\n - [https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability](https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability)\n - [http://2012.sharcs.org/slides/stevens.pdf](http://2012.sharcs.org/slides/stevens.pdf)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n",
                "text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "helpUri": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
              "id": "codacy.tools-configs.python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1",
              "name": "codacy.tools-configs.python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected an insufficient key size for DSA. NIST recommends a key size of 2048 or higher."
              },
              "help": {
                "markdown": "Detected an insufficient key size for DSA. NIST recommends a key size of 2048 or higher.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py)\n - [https://www.cosic.esat.kuleuven.be/ecrypt/ecrypt2/documents/D.SPA.20.pdf](https://www.cosic.esat.kuleuven.be/ecrypt/ecrypt2/documents/D.SPA.20.pdf)\n - [https://cryptography.io/en/latest/hazmat/primitives/asymmetric/dsa/](https://cryptography.io/en/latest/hazmat/primitives/asymmetric/dsa/)\n - [https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf)\n",
                "text": "Detected an insufficient key size for DSA. NIST recommends a key size of 2048 or higher."
              },
              "helpUri": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py",
              "id": "codacy.tools-configs.python.cryptography.security.insufficient-dsa-key-size.insufficient-dsa-key-size",
              "name": "codacy.tools-configs.python.cryptography.security.insufficient-dsa-key-size.insufficient-dsa-key-size",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.cryptography.security.insufficient-dsa-key-size.insufficient-dsa-key-size"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected an insufficient curve size for EC. NIST recommends a key size of 224 or higher. For example, use 'ec.SECP256R1'."
              },
              "help": {
                "markdown": "Detected an insufficient curve size for EC. NIST recommends a key size of 224 or higher. For example, use 'ec.SECP256R1'.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py)\n - [https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf)\n - [https://cryptography.io/en/latest/hazmat/primitives/asymmetric/ec/#elliptic-curves](https://cryptography.io/en/latest/hazmat/primitives/asymmetric/ec/#elliptic-curves)\n",
                "text": "Detected an insufficient curve size for EC. NIST recommends a key size of 224 or higher. For example, use 'ec.SECP256R1'."
              },
              "helpUri": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py",
              "id": "codacy.tools-configs.python.cryptography.security.insufficient-ec-key-size.insufficient-ec-key-size",
              "name": "codacy.tools-configs.python.cryptography.security.insufficient-ec-key-size.insufficient-ec-key-size",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.cryptography.security.insufficient-ec-key-size.insufficient-ec-key-size"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected an insufficient key size for RSA. NIST recommends a key size of 2048 or higher."
              },
              "help": {
                "markdown": "Detected an insufficient key size for RSA. NIST recommends a key size of 2048 or higher.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py)\n - [https://cryptography.io/en/latest/hazmat/primitives/asymmetric/rsa/](https://cryptography.io/en/latest/hazmat/primitives/asymmetric/rsa/)\n - [https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf)\n",
                "text": "Detected an insufficient key size for RSA. NIST recommends a key size of 2048 or higher."
              },
              "helpUri": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py",
              "id": "codacy.tools-configs.python.cryptography.security.insufficient-rsa-key-size.insufficient-rsa-key-size",
              "name": "codacy.tools-configs.python.cryptography.security.insufficient-rsa-key-size.insufficient-rsa-key-size",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.cryptography.security.insufficient-rsa-key-size.insufficient-rsa-key-size"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. "
              },
              "help": {
                "markdown": "An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. \n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. "
              },
              "id": "codacy.tools-configs.python.cryptography.security.mode-without-authentication.crypto-mode-without-authentication",
              "name": "codacy.tools-configs.python.cryptography.security.mode-without-authentication.crypto-mode-without-authentication",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.cryptography.security.mode-without-authentication.crypto-mode-without-authentication"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Initializing a security context for Dask (`distributed`) without \"require_encryption\" keyword argument may silently fail to provide security."
              },
              "help": {
                "markdown": "Initializing a security context for Dask (`distributed`) without \"require_encryption\" keyword argument may silently fail to provide security.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://distributed.dask.org/en/latest/tls.html?highlight=require_encryption#parameters](https://distributed.dask.org/en/latest/tls.html?highlight=require_encryption#parameters)\n",
                "text": "Initializing a security context for Dask (`distributed`) without \"require_encryption\" keyword argument may silently fail to provide security."
              },
              "id": "codacy.tools-configs.python.distributed.security.require-encryption",
              "name": "codacy.tools-configs.python.distributed.security.require-encryption",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.distributed.security.require-encryption"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Avoid using insecure deserialization library, backed by `pickle`, `_pickle`, `cpickle`, `dill`, `shelve`, or `yaml`, which are known to lead to remote code execution vulnerabilities."
              },
              "help": {
                "markdown": "Avoid using insecure deserialization library, backed by `pickle`, `_pickle`, `cpickle`, `dill`, `shelve`, or `yaml`, which are known to lead to remote code execution vulnerabilities.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n",
                "text": "Avoid using insecure deserialization library, backed by `pickle`, `_pickle`, `cpickle`, `dill`, `shelve`, or `yaml`, which are known to lead to remote code execution vulnerabilities."
              },
              "id": "codacy.tools-configs.python.django.security.audit.avoid-insecure-deserialization.avoid-insecure-deserialization",
              "name": "codacy.tools-configs.python.django.security.audit.avoid-insecure-deserialization.avoid-insecure-deserialization",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-502: Deserialization of Untrusted Data",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A08:2017 - Insecure Deserialization",
                  "OWASP-A08:2021 - Software and Data Integrity Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.django.security.audit.avoid-insecure-deserialization.avoid-insecure-deserialization"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks"
              },
              "help": {
                "markdown": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.djangoproject.com/en/4.2/howto/csrf/](https://docs.djangoproject.com/en/4.2/howto/csrf/)\n",
                "text": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks"
              },
              "id": "codacy.tools-configs.python.django.security.django-no-csrf-token.django-no-csrf-token",
              "name": "codacy.tools-configs.python.django.security.django-no-csrf-token.django-no-csrf-token",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-352: Cross-Site Request Forgery (CSRF)",
                  "MEDIUM CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.django.security.django-no-csrf-token.django-no-csrf-token"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Use $FORM.cleaned_data[] instead of request.POST[] after form.is_valid() has been executed to only access sanitized data"
              },
              "help": {
                "markdown": "Use $FORM.cleaned_data[] instead of request.POST[] after form.is_valid() has been executed to only access sanitized data\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.djangoproject.com/en/4.2/ref/forms/api/#accessing-clean-data](https://docs.djangoproject.com/en/4.2/ref/forms/api/#accessing-clean-data)\n",
                "text": "Use $FORM.cleaned_data[] instead of request.POST[] after form.is_valid() has been executed to only access sanitized data"
              },
              "id": "codacy.tools-configs.python.django.security.django-using-request-post-after-is-valid.django-using-request-post-after-is-valid",
              "name": "codacy.tools-configs.python.django.security.django-using-request-post-after-is-valid.django-using-request-post-after-is-valid",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-20: Improper Input Validation",
                  "MEDIUM CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.django.security.django-using-request-post-after-is-valid.django-using-request-post-after-is-valid"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "The Django secret key is used as salt in HashIDs. The HashID mechanism is not secure. By observing sufficient HashIDs, the salt used to construct them can be recovered. This means the Django secret key can be obtained by attackers, through the HashIDs."
              },
              "help": {
                "markdown": "The Django secret key is used as salt in HashIDs. The HashID mechanism is not secure. By observing sufficient HashIDs, the salt used to construct them can be recovered. This means the Django secret key can be obtained by attackers, through the HashIDs.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.djangoproject.com/en/4.2/ref/settings/#std-setting-SECRET_KEY](https://docs.djangoproject.com/en/4.2/ref/settings/#std-setting-SECRET_KEY)\n - [http://carnage.github.io/2015/08/cryptanalysis-of-hashids](http://carnage.github.io/2015/08/cryptanalysis-of-hashids)\n",
                "text": "The Django secret key is used as salt in HashIDs. The HashID mechanism is not secure. By observing sufficient HashIDs, the salt used to construct them can be recovered. This means the Django secret key can be obtained by attackers, through the HashIDs."
              },
              "id": "codacy.tools-configs.python.django.security.hashids-with-django-secret.hashids-with-django-secret",
              "name": "codacy.tools-configs.python.django.security.hashids-with-django-secret.hashids-with-django-secret",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 – Cryptographic Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.django.security.hashids-with-django-secret.hashids-with-django-secret"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker to execute remote code. See https://owasp.org/www-community/attacks/Code_Injection for more information."
              },
              "help": {
                "markdown": "Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker to execute remote code. See https://owasp.org/www-community/attacks/Code_Injection for more information.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html](https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html)\n",
                "text": "Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker to execute remote code. See https://owasp.org/www-community/attacks/Code_Injection for more information."
              },
              "id": "codacy.tools-configs.python.django.security.injection.code.user-eval-format-string.user-eval-format-string",
              "name": "codacy.tools-configs.python.django.security.injection.code.user-eval-format-string.user-eval-format-string",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.django.security.injection.code.user-eval-format-string.user-eval-format-string"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need."
              },
              "help": {
                "markdown": "Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html](https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html)\n - [https://owasp.org/www-community/attacks/Code_Injection](https://owasp.org/www-community/attacks/Code_Injection)\n",
                "text": "Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need."
              },
              "id": "codacy.tools-configs.python.django.security.injection.code.user-eval.user-eval",
              "name": "codacy.tools-configs.python.django.security.injection.code.user-eval.user-eval",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.django.security.injection.code.user-eval.user-eval"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need."
              },
              "help": {
                "markdown": "Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/www-community/attacks/Code_Injection](https://owasp.org/www-community/attacks/Code_Injection)\n",
                "text": "Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need."
              },
              "id": "codacy.tools-configs.python.django.security.injection.code.user-exec-format-string.user-exec-format-string",
              "name": "codacy.tools-configs.python.django.security.injection.code.user-exec-format-string.user-exec-format-string",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.django.security.injection.code.user-exec-format-string.user-exec-format-string"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need."
              },
              "help": {
                "markdown": "Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/www-community/attacks/Code_Injection](https://owasp.org/www-community/attacks/Code_Injection)\n",
                "text": "Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need."
              },
              "id": "codacy.tools-configs.python.django.security.injection.code.user-exec.user-exec",
              "name": "codacy.tools-configs.python.django.security.injection.code.user-exec.user-exec",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.django.security.injection.code.user-exec.user-exec"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Request data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list. See https://owasp.org/www-community/attacks/Command_Injection for more information."
              },
              "help": {
                "markdown": "Request data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list. See https://owasp.org/www-community/attacks/Command_Injection for more information.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/www-community/attacks/Command_Injection](https://owasp.org/www-community/attacks/Command_Injection)\n",
                "text": "Request data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list. See https://owasp.org/www-community/attacks/Command_Injection for more information."
              },
              "id": "codacy.tools-configs.python.django.security.injection.command.command-injection-os-system.command-injection-os-system",
              "name": "codacy.tools-configs.python.django.security.injection.command.command-injection-os-system.command-injection-os-system",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.django.security.injection.command.command-injection-os-system.command-injection-os-system"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands."
              },
              "help": {
                "markdown": "Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n",
                "text": "Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands."
              },
              "id": "codacy.tools-configs.python.django.security.injection.command.subprocess-injection.subprocess-injection",
              "name": "codacy.tools-configs.python.django.security.injection.command.subprocess-injection.subprocess-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "HIGH CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.django.security.injection.command.subprocess-injection.subprocess-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected user input into a generated CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
              },
              "help": {
                "markdown": "Detected user input into a generated CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://github.com/raphaelm/defusedcsv](https://github.com/raphaelm/defusedcsv)\n - [https://owasp.org/www-community/attacks/CSV_Injection](https://owasp.org/www-community/attacks/CSV_Injection)\n - [https://web.archive.org/web/20220516052229/https://www.contextis.com/us/blog/comma-separated-vulnerabilities](https://web.archive.org/web/20220516052229/https://www.contextis.com/us/blog/comma-separated-vulnerabilities)\n",
                "text": "Detected user input into a generated CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
              },
              "id": "codacy.tools-configs.python.django.security.injection.csv-writer-injection.csv-writer-injection",
              "name": "codacy.tools-configs.python.django.security.injection.csv-writer-injection.csv-writer-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-1236: Improper Neutralization of Formula Elements in a CSV File",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.django.security.injection.csv-writer-injection.csv-writer-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found request data in an EmailMessage that is set to use HTML. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS."
              },
              "help": {
                "markdown": "Found request data in an EmailMessage that is set to use HTML. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.damonkohler.com/2008/12/email-injection.html](https://www.damonkohler.com/2008/12/email-injection.html)\n",
                "text": "Found request data in an EmailMessage that is set to use HTML. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS."
              },
              "id": "codacy.tools-configs.python.django.security.injection.email.xss-html-email-body.xss-html-email-body",
              "name": "codacy.tools-configs.python.django.security.injection.email.xss-html-email-body.xss-html-email-body",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.django.security.injection.email.xss-html-email-body.xss-html-email-body"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found request data in 'send_mail(...)' that uses 'html_message'. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS."
              },
              "help": {
                "markdown": "Found request data in 'send_mail(...)' that uses 'html_message'. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.damonkohler.com/2008/12/email-injection.html](https://www.damonkohler.com/2008/12/email-injection.html)\n",
                "text": "Found request data in 'send_mail(...)' that uses 'html_message'. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS."
              },
              "id": "codacy.tools-configs.python.django.security.injection.email.xss-send-mail-html-message.xss-send-mail-html-message",
              "name": "codacy.tools-configs.python.django.security.injection.email.xss-send-mail-html-message.xss-send-mail-html-message",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.django.security.injection.email.xss-send-mail-html-message.xss-send-mail-html-message"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Data from request ($DATA) is passed to redirect(). This is an open redirect and could be exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url(). See https://cwe.mitre.org/data/definitions/601.html for more information."
              },
              "help": {
                "markdown": "Data from request ($DATA) is passed to redirect(). This is an open redirect and could be exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url(). See https://cwe.mitre.org/data/definitions/601.html for more information.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.djm.org.uk/posts/djangos-little-protections-word-redirect-dangers/](https://www.djm.org.uk/posts/djangos-little-protections-word-redirect-dangers/)\n - [https://github.com/django/django/blob/d1b7bd030b1db111e1a3505b1fc029ab964382cc/django/utils/http.py#L231](https://github.com/django/django/blob/d1b7bd030b1db111e1a3505b1fc029ab964382cc/django/utils/http.py#L231)\n",
                "text": "Data from request ($DATA) is passed to redirect(). This is an open redirect and could be exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url(). See https://cwe.mitre.org/data/definitions/601.html for more information."
              },
              "id": "codacy.tools-configs.python.django.security.injection.open-redirect.open-redirect",
              "name": "codacy.tools-configs.python.django.security.injection.open-redirect.open-redirect",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.django.security.injection.open-redirect.open-redirect"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks and therefore sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or the pathlib library."
              },
              "help": {
                "markdown": "Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks and therefore sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or the pathlib library.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/www-community/attacks/Path_Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
                "text": "Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks and therefore sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or the pathlib library."
              },
              "id": "codacy.tools-configs.python.django.security.injection.path-traversal.path-traversal-open.path-traversal-open",
              "name": "codacy.tools-configs.python.django.security.injection.path-traversal.path-traversal-open.path-traversal-open",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "OWASP-A05:2017 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.django.security.injection.path-traversal.path-traversal-open.path-traversal-open"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead."
              },
              "help": {
                "markdown": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render](https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render)\n - [https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection](https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection)\n",
                "text": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead."
              },
              "id": "codacy.tools-configs.python.django.security.injection.raw-html-format.raw-html-format",
              "name": "codacy.tools-configs.python.django.security.injection.raw-html-format.raw-html-format",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.django.security.injection.raw-html-format.raw-html-format"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found user-controlled request data passed into HttpResponse. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed."
              },
              "help": {
                "markdown": "Found user-controlled request data passed into HttpResponse. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss](https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss)\n",
                "text": "Found user-controlled request data passed into HttpResponse. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed."
              },
              "id": "codacy.tools-configs.python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse",
              "name": "codacy.tools-configs.python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found user-controlled request data passed into a HttpResponseBadRequest. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed."
              },
              "help": {
                "markdown": "Found user-controlled request data passed into a HttpResponseBadRequest. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss](https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss)\n",
                "text": "Found user-controlled request data passed into a HttpResponseBadRequest. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed."
              },
              "id": "codacy.tools-configs.python.django.security.injection.reflected-data-httpresponsebadrequest.reflected-data-httpresponsebadrequest",
              "name": "codacy.tools-configs.python.django.security.injection.reflected-data-httpresponsebadrequest.reflected-data-httpresponsebadrequest",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.django.security.injection.reflected-data-httpresponsebadrequest.reflected-data-httpresponsebadrequest"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found user-controlled request data being passed into a file open, which is them passed as an argument into the FileResponse. This is dangerous because an attacker could specify an arbitrary file to read, which could result in leaking important data. Be sure to validate or sanitize the user-inputted filename in the request data before using it in FileResponse."
              },
              "help": {
                "markdown": "Found user-controlled request data being passed into a file open, which is them passed as an argument into the FileResponse. This is dangerous because an attacker could specify an arbitrary file to read, which could result in leaking important data. Be sure to validate or sanitize the user-inputted filename in the request data before using it in FileResponse.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss](https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss)\n",
                "text": "Found user-controlled request data being passed into a file open, which is them passed as an argument into the FileResponse. This is dangerous because an attacker could specify an arbitrary file to read, which could result in leaking important data. Be sure to validate or sanitize the user-inputted filename in the request data before using it in FileResponse."
              },
              "id": "codacy.tools-configs.python.django.security.injection.request-data-fileresponse.request-data-fileresponse",
              "name": "codacy.tools-configs.python.django.security.injection.request-data-fileresponse.request-data-fileresponse",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "OWASP-A05:2017 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.django.security.injection.request-data-fileresponse.request-data-fileresponse"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized."
              },
              "help": {
                "markdown": "Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
                "text": "Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized."
              },
              "id": "codacy.tools-configs.python.django.security.injection.request-data-write.request-data-write",
              "name": "codacy.tools-configs.python.django.security.injection.request-data-write.request-data-write",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.django.security.injection.request-data-write.request-data-write"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "User-controlled data from a request is passed to 'extra()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use parameterized queries or escape the user-controlled data by using `params` and not using quote placeholders in the SQL string."
              },
              "help": {
                "markdown": "User-controlled data from a request is passed to 'extra()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use parameterized queries or escape the user-controlled data by using `params` and not using quote placeholders in the SQL string.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.djangoproject.com/en/3.0/ref/models/expressions/#.objects.extra](https://docs.djangoproject.com/en/3.0/ref/models/expressions/#.objects.extra)\n",
                "text": "User-controlled data from a request is passed to 'extra()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use parameterized queries or escape the user-controlled data by using `params` and not using quote placeholders in the SQL string."
              },
              "id": "codacy.tools-configs.python.django.security.injection.sql.sql-injection-extra.sql-injection-using-extra-where",
              "name": "codacy.tools-configs.python.django.security.injection.sql.sql-injection-extra.sql-injection-using-extra-where",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.django.security.injection.sql.sql-injection-extra.sql-injection-using-extra-where"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "User-controlled data from request is passed to 'RawSQL()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use parameterized queries or escape the user-controlled data by using `params` and not using quote placeholders in the SQL string."
              },
              "help": {
                "markdown": "User-controlled data from request is passed to 'RawSQL()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use parameterized queries or escape the user-controlled data by using `params` and not using quote placeholders in the SQL string.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.djangoproject.com/en/3.0/ref/models/expressions/#django.db.models.expressions.RawSQL](https://docs.djangoproject.com/en/3.0/ref/models/expressions/#django.db.models.expressions.RawSQL)\n",
                "text": "User-controlled data from request is passed to 'RawSQL()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use parameterized queries or escape the user-controlled data by using `params` and not using quote placeholders in the SQL string."
              },
              "id": "codacy.tools-configs.python.django.security.injection.sql.sql-injection-rawsql.sql-injection-using-rawsql",
              "name": "codacy.tools-configs.python.django.security.injection.sql.sql-injection-rawsql.sql-injection-using-rawsql",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.django.security.injection.sql.sql-injection-rawsql.sql-injection-using-rawsql"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
              },
              "help": {
                "markdown": "User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection](https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection)\n",
                "text": "User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
              },
              "id": "codacy.tools-configs.python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute",
              "name": "codacy.tools-configs.python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Data that is possible user-controlled from a python request is passed to `raw()`. This could lead to SQL injection and attackers gaining access to protected information. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
              },
              "help": {
                "markdown": "Data that is possible user-controlled from a python request is passed to `raw()`. This could lead to SQL injection and attackers gaining access to protected information. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection](https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection)\n",
                "text": "Data that is possible user-controlled from a python request is passed to `raw()`. This could lead to SQL injection and attackers gaining access to protected information. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
              },
              "id": "codacy.tools-configs.python.django.security.injection.sql.sql-injection-using-raw.sql-injection-using-raw",
              "name": "codacy.tools-configs.python.django.security.injection.sql.sql-injection-using-raw.sql-injection-using-raw",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.django.security.injection.sql.sql-injection-using-raw.sql-injection-using-raw"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities."
              },
              "help": {
                "markdown": "Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/www-community/attacks/Server_Side_Request_Forgery](https://owasp.org/www-community/attacks/Server_Side_Request_Forgery)\n",
                "text": "Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities."
              },
              "id": "codacy.tools-configs.python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests",
              "name": "codacy.tools-configs.python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-918: Server-Side Request Forgery (SSRF)",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A10:2021 - Server-Side Request Forgery (SSRF)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF), which could result in attackers gaining access to private organization data. To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
              },
              "help": {
                "markdown": "Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF), which could result in attackers gaining access to private organization data. To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/www-community/attacks/Server_Side_Request_Forgery](https://owasp.org/www-community/attacks/Server_Side_Request_Forgery)\n",
                "text": "Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF), which could result in attackers gaining access to private organization data. To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
              },
              "id": "codacy.tools-configs.python.django.security.injection.ssrf.ssrf-injection-urllib.ssrf-injection-urllib",
              "name": "codacy.tools-configs.python.django.security.injection.ssrf.ssrf-injection-urllib.ssrf-injection-urllib",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-918: Server-Side Request Forgery (SSRF)",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A10:2021 - Server-Side Request Forgery (SSRF)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.django.security.injection.ssrf.ssrf-injection-urllib.ssrf-injection-urllib"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
              },
              "help": {
                "markdown": "Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://discuss.python.org/t/nan-breaks-min-max-and-sorting-functions-a-solution/2868](https://discuss.python.org/t/nan-breaks-min-max-and-sorting-functions-a-solution/2868)\n - [https://blog.bitdiscovery.com/2021/12/python-nan-injection/](https://blog.bitdiscovery.com/2021/12/python-nan-injection/)\n",
                "text": "Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
              },
              "id": "codacy.tools-configs.python.django.security.nan-injection.nan-injection",
              "name": "codacy.tools-configs.python.django.security.nan-injection.nan-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-704: Incorrect Type Conversion or Cast",
                  "MEDIUM CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.django.security.nan-injection.nan-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "'$VAR' is the empty string and is being used to set the password on '$MODEL'. If you meant to set an unusable password, set the password to None or call 'set_unusable_password()'."
              },
              "help": {
                "markdown": "'$VAR' is the empty string and is being used to set the password on '$MODEL'. If you meant to set an unusable password, set the password to None or call 'set_unusable_password()'.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.djangoproject.com/en/3.0/ref/contrib/auth/#django.contrib.auth.models.User.set_password](https://docs.djangoproject.com/en/3.0/ref/contrib/auth/#django.contrib.auth.models.User.set_password)\n",
                "text": "'$VAR' is the empty string and is being used to set the password on '$MODEL'. If you meant to set an unusable password, set the password to None or call 'set_unusable_password()'."
              },
              "id": "codacy.tools-configs.python.django.security.passwords.password-empty-string.password-empty-string",
              "name": "codacy.tools-configs.python.django.security.passwords.password-empty-string.password-empty-string",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-521: Weak Password Requirements",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.django.security.passwords.password-empty-string.password-empty-string"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "'$VAR' is using the empty string as its default and is being used to set the password on '$MODEL'. If you meant to set an unusable password, set the default value to 'None' or call 'set_unusable_password()'."
              },
              "help": {
                "markdown": "'$VAR' is using the empty string as its default and is being used to set the password on '$MODEL'. If you meant to set an unusable password, set the default value to 'None' or call 'set_unusable_password()'.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.djangoproject.com/en/3.0/ref/contrib/auth/#django.contrib.auth.models.User.set_password](https://docs.djangoproject.com/en/3.0/ref/contrib/auth/#django.contrib.auth.models.User.set_password)\n",
                "text": "'$VAR' is using the empty string as its default and is being used to set the password on '$MODEL'. If you meant to set an unusable password, set the default value to 'None' or call 'set_unusable_password()'."
              },
              "id": "codacy.tools-configs.python.django.security.passwords.use-none-for-password-default.use-none-for-password-default",
              "name": "codacy.tools-configs.python.django.security.passwords.use-none-for-password-default.use-none-for-password-default",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-521: Weak Password Requirements",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.django.security.passwords.use-none-for-password-default.use-none-for-password-default"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided."
              },
              "help": {
                "markdown": "CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n - [https://cwe.mitre.org/data/definitions/942.html](https://cwe.mitre.org/data/definitions/942.html)\n",
                "text": "CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided."
              },
              "id": "codacy.tools-configs.python.fastapi.security.wildcard-cors.wildcard-cors",
              "name": "codacy.tools-configs.python.fastapi.security.wildcard-cors.wildcard-cors",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-942: Permissive Cross-domain Policy with Untrusted Domains",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.fastapi.security.wildcard-cors.wildcard-cors"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Running flask app with host 0.0.0.0 could expose the server publicly."
              },
              "help": {
                "markdown": "Running flask app with host 0.0.0.0 could expose the server publicly.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n",
                "text": "Running flask app with host 0.0.0.0 could expose the server publicly."
              },
              "id": "codacy.tools-configs.python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
              "name": "codacy.tools-configs.python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-668: Exposure of Resource to Wrong Sphere",
                  "HIGH CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
              },
              "help": {
                "markdown": "top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n",
                "text": "top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
              },
              "id": "codacy.tools-configs.python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly",
              "name": "codacy.tools-configs.python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-668: Exposure of Resource to Wrong Sphere",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
              },
              "help": {
                "markdown": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/](https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/)\n",
                "text": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
              },
              "id": "codacy.tools-configs.python.flask.security.audit.debug-enabled.debug-enabled",
              "name": "codacy.tools-configs.python.flask.security.audit.debug-enabled.debug-enabled",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-489: Active Debug Code",
                  "HIGH CONFIDENCE",
                  "OWASP-A06:2017 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.flask.security.audit.debug-enabled.debug-enabled"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'."
              },
              "help": {
                "markdown": "Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
                "text": "Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'."
              },
              "id": "codacy.tools-configs.python.flask.security.audit.directly-returned-format-string.directly-returned-format-string",
              "name": "codacy.tools-configs.python.flask.security.audit.directly-returned-format-string.directly-returned-format-string",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.flask.security.audit.directly-returned-format-string.directly-returned-format-string"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "The Flask secret key is used as salt in HashIDs. The HashID mechanism is not secure. By observing sufficient HashIDs, the salt used to construct them can be recovered. This means the Flask secret key can be obtained by attackers, through the HashIDs."
              },
              "help": {
                "markdown": "The Flask secret key is used as salt in HashIDs. The HashID mechanism is not secure. By observing sufficient HashIDs, the salt used to construct them can be recovered. This means the Flask secret key can be obtained by attackers, through the HashIDs.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://flask.palletsprojects.com/en/2.2.x/config/#SECRET_KEY](https://flask.palletsprojects.com/en/2.2.x/config/#SECRET_KEY)\n - [http://carnage.github.io/2015/08/cryptanalysis-of-hashids](http://carnage.github.io/2015/08/cryptanalysis-of-hashids)\n",
                "text": "The Flask secret key is used as salt in HashIDs. The HashID mechanism is not secure. By observing sufficient HashIDs, the salt used to construct them can be recovered. This means the Flask secret key can be obtained by attackers, through the HashIDs."
              },
              "id": "codacy.tools-configs.python.flask.security.hashids-with-flask-secret.hashids-with-flask-secret",
              "name": "codacy.tools-configs.python.flask.security.hashids-with-flask-secret.hashids-with-flask-secret",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 – Cryptographic Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.flask.security.hashids-with-flask-secret.hashids-with-flask-secret"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected user input into a generated CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
              },
              "help": {
                "markdown": "Detected user input into a generated CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://github.com/raphaelm/defusedcsv](https://github.com/raphaelm/defusedcsv)\n - [https://owasp.org/www-community/attacks/CSV_Injection](https://owasp.org/www-community/attacks/CSV_Injection)\n - [https://web.archive.org/web/20220516052229/https://www.contextis.com/us/blog/comma-separated-vulnerabilities](https://web.archive.org/web/20220516052229/https://www.contextis.com/us/blog/comma-separated-vulnerabilities)\n",
                "text": "Detected user input into a generated CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
              },
              "id": "codacy.tools-configs.python.flask.security.injection.csv-writer-injection.csv-writer-injection",
              "name": "codacy.tools-configs.python.flask.security.injection.csv-writer-injection.csv-writer-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-1236: Improper Neutralization of Formula Elements in a CSV File",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.flask.security.injection.csv-writer-injection.csv-writer-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
              },
              "help": {
                "markdown": "Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://discuss.python.org/t/nan-breaks-min-max-and-sorting-functions-a-solution/2868](https://discuss.python.org/t/nan-breaks-min-max-and-sorting-functions-a-solution/2868)\n - [https://blog.bitdiscovery.com/2021/12/python-nan-injection/](https://blog.bitdiscovery.com/2021/12/python-nan-injection/)\n",
                "text": "Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
              },
              "id": "codacy.tools-configs.python.flask.security.injection.nan-injection.nan-injection",
              "name": "codacy.tools-configs.python.flask.security.injection.nan-injection.nan-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-704: Incorrect Type Conversion or Cast",
                  "MEDIUM CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.flask.security.injection.nan-injection.nan-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "User data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list."
              },
              "help": {
                "markdown": "User data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/www-community/attacks/Command_Injection](https://owasp.org/www-community/attacks/Command_Injection)\n",
                "text": "User data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list."
              },
              "id": "codacy.tools-configs.python.flask.security.injection.os-system-injection.os-system-injection",
              "name": "codacy.tools-configs.python.flask.security.injection.os-system-injection.os-system-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.flask.security.injection.os-system-injection.os-system-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks."
              },
              "help": {
                "markdown": "Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/www-community/attacks/Path_Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
                "text": "Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks."
              },
              "id": "codacy.tools-configs.python.flask.security.injection.path-traversal-open.path-traversal-open",
              "name": "codacy.tools-configs.python.flask.security.injection.path-traversal-open.path-traversal-open",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "OWASP-A05:2017 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.flask.security.injection.path-traversal-open.path-traversal-open"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead."
              },
              "help": {
                "markdown": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss](https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss)\n",
                "text": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead."
              },
              "id": "codacy.tools-configs.python.flask.security.injection.raw-html-concat.raw-html-format",
              "name": "codacy.tools-configs.python.flask.security.injection.raw-html-concat.raw-html-format",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.flask.security.injection.raw-html-concat.raw-html-format"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
              },
              "help": {
                "markdown": "Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/www-community/attacks/Server_Side_Request_Forgery](https://owasp.org/www-community/attacks/Server_Side_Request_Forgery)\n",
                "text": "Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
              },
              "id": "codacy.tools-configs.python.flask.security.injection.ssrf-requests.ssrf-requests",
              "name": "codacy.tools-configs.python.flask.security.injection.ssrf-requests.ssrf-requests",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-918: Server-Side Request Forgery (SSRF)",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A10:2021 - Server-Side Request Forgery (SSRF)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.flask.security.injection.ssrf-requests.ssrf-requests"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands."
              },
              "help": {
                "markdown": "Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n",
                "text": "Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands."
              },
              "id": "codacy.tools-configs.python.flask.security.injection.subprocess-injection.subprocess-injection",
              "name": "codacy.tools-configs.python.flask.security.injection.subprocess-injection.subprocess-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "HIGH CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.flask.security.injection.subprocess-injection.subprocess-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries."
              },
              "help": {
                "markdown": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql](https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql)\n - [https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm](https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm)\n - [https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column](https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column)\n",
                "text": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries."
              },
              "id": "codacy.tools-configs.python.flask.security.injection.tainted-sql-string.tainted-sql-string",
              "name": "codacy.tools-configs.python.flask.security.injection.tainted-sql-string.tainted-sql-string",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-704: Incorrect Type Conversion or Cast",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.flask.security.injection.tainted-sql-string.tainted-sql-string"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host."
              },
              "help": {
                "markdown": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)\n",
                "text": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host."
              },
              "id": "codacy.tools-configs.python.flask.security.injection.tainted-url-host.tainted-url-host",
              "name": "codacy.tools-configs.python.flask.security.injection.tainted-url-host.tainted-url-host",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-918: Server-Side Request Forgery (SSRF)",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A10:2021 - Server-Side Request Forgery (SSRF)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.flask.security.injection.tainted-url-host.tainted-url-host"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected user data flowing into eval. This is code injection and should be avoided."
              },
              "help": {
                "markdown": "Detected user data flowing into eval. This is code injection and should be avoided.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html](https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html)\n",
                "text": "Detected user data flowing into eval. This is code injection and should be avoided."
              },
              "id": "codacy.tools-configs.python.flask.security.injection.user-eval.eval-injection",
              "name": "codacy.tools-configs.python.flask.security.injection.user-eval.eval-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.flask.security.injection.user-eval.eval-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected user data flowing into exec. This is code injection and should be avoided."
              },
              "help": {
                "markdown": "Detected user data flowing into exec. This is code injection and should be avoided.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://nedbatchelder.com/blog/201206/exec_really_is_dangerous.html](https://nedbatchelder.com/blog/201206/exec_really_is_dangerous.html)\n",
                "text": "Detected user data flowing into exec. This is code injection and should be avoided."
              },
              "id": "codacy.tools-configs.python.flask.security.injection.user-exec.exec-injection",
              "name": "codacy.tools-configs.python.flask.security.injection.user-exec.exec-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.flask.security.injection.user-exec.exec-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected a Jinja2 environment with 'autoescaping' disabled. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable 'autoescaping' by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions."
              },
              "help": {
                "markdown": "Detected a Jinja2 environment with 'autoescaping' disabled. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable 'autoescaping' by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://bandit.readthedocs.io/en/latest/plugins/b701_jinja2_autoescape_false.html)\n - [https://jinja.palletsprojects.com/en/2.11.x/api/#basics](https://jinja.palletsprojects.com/en/2.11.x/api/#basics)\n",
                "text": "Detected a Jinja2 environment with 'autoescaping' disabled. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable 'autoescaping' by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions."
              },
              "helpUri": "https://bandit.readthedocs.io/en/latest/plugins/b701_jinja2_autoescape_false.html",
              "id": "codacy.tools-configs.python.jinja2.security.audit.autoescape-disabled-false.incorrect-autoescape-disabled",
              "name": "codacy.tools-configs.python.jinja2.security.audit.autoescape-disabled-false.incorrect-autoescape-disabled",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-116: Improper Encoding or Escaping of Output",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.jinja2.security.audit.autoescape-disabled-false.incorrect-autoescape-disabled"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected a Jinja2 environment without autoescaping. Jinja2 does not autoescape by default. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable autoescaping by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions."
              },
              "help": {
                "markdown": "Detected a Jinja2 environment without autoescaping. Jinja2 does not autoescape by default. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable autoescaping by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://bandit.readthedocs.io/en/latest/plugins/b701_jinja2_autoescape_false.html)\n - [https://jinja.palletsprojects.com/en/2.11.x/api/#basics](https://jinja.palletsprojects.com/en/2.11.x/api/#basics)\n",
                "text": "Detected a Jinja2 environment without autoescaping. Jinja2 does not autoescape by default. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable autoescaping by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions."
              },
              "helpUri": "https://bandit.readthedocs.io/en/latest/plugins/b701_jinja2_autoescape_false.html",
              "id": "codacy.tools-configs.python.jinja2.security.audit.missing-autoescape-disabled.missing-autoescape-disabled",
              "name": "codacy.tools-configs.python.jinja2.security.audit.missing-autoescape-disabled.missing-autoescape-disabled",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-116: Improper Encoding or Escaping of Output",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.jinja2.security.audit.missing-autoescape-disabled.missing-autoescape-disabled"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)"
              },
              "help": {
                "markdown": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/](https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/)\n",
                "text": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)"
              },
              "id": "codacy.tools-configs.python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret",
              "name": "codacy.tools-configs.python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-522: Insufficiently Protected Credentials",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2017 - Broken Authentication",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."
              },
              "help": {
                "markdown": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."
              },
              "helpUri": "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/",
              "id": "codacy.tools-configs.python.jwt.security.jwt-none-alg.jwt-python-none-alg",
              "name": "codacy.tools-configs.python.jwt.security.jwt-none-alg.jwt-python-none-alg",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.jwt.security.jwt-none-alg.jwt-python-none-alg"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected JWT token decoded with 'verify=False'. This bypasses any integrity checks for the token which means the token could be tampered with by malicious actors. Ensure that the JWT token is verified."
              },
              "help": {
                "markdown": "Detected JWT token decoded with 'verify=False'. This bypasses any integrity checks for the token which means the token could be tampered with by malicious actors. Ensure that the JWT token is verified.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://github.com/we45/Vulnerable-Flask-App/blob/752ee16087c0bfb79073f68802d907569a1f0df7/app/app.py#L96](https://github.com/we45/Vulnerable-Flask-App/blob/752ee16087c0bfb79073f68802d907569a1f0df7/app/app.py#L96)\n",
                "text": "Detected JWT token decoded with 'verify=False'. This bypasses any integrity checks for the token which means the token could be tampered with by malicious actors. Ensure that the JWT token is verified."
              },
              "id": "codacy.tools-configs.python.jwt.security.unverified-jwt-decode.unverified-jwt-decode",
              "name": "codacy.tools-configs.python.jwt.security.unverified-jwt-decode.unverified-jwt-decode",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-287: Improper Authentication",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2017 - Broken Authentication",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.jwt.security.unverified-jwt-decode.unverified-jwt-decode"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$LOOP.subprocess_exec' with user controlled data. You may consider using 'shlex.escape()'."
              },
              "help": {
                "markdown": "Detected subprocess function '$LOOP.subprocess_exec' with user controlled data. You may consider using 'shlex.escape()'.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n",
                "text": "Detected subprocess function '$LOOP.subprocess_exec' with user controlled data. You may consider using 'shlex.escape()'."
              },
              "id": "codacy.tools-configs.python.lang.security.audit.dangerous-asyncio-exec-tainted-env-args.dangerous-asyncio-exec-tainted-env-args",
              "name": "codacy.tools-configs.python.lang.security.audit.dangerous-asyncio-exec-tainted-env-args.dangerous-asyncio-exec-tainted-env-args",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.audit.dangerous-asyncio-exec-tainted-env-args.dangerous-asyncio-exec-tainted-env-args"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected asyncio subprocess function with user controlled data. You may consider using 'shlex.escape()'."
              },
              "help": {
                "markdown": "Detected asyncio subprocess function with user controlled data. You may consider using 'shlex.escape()'.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.python.org/3/library/asyncio-subprocess.html](https://docs.python.org/3/library/asyncio-subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n",
                "text": "Detected asyncio subprocess function with user controlled data. You may consider using 'shlex.escape()'."
              },
              "id": "codacy.tools-configs.python.lang.security.audit.dangerous-asyncio-shell-tainted-env-args.dangerous-asyncio-shell-tainted-env-args",
              "name": "codacy.tools-configs.python.lang.security.audit.dangerous-asyncio-shell-tainted-env-args.dangerous-asyncio-shell-tainted-env-args",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.audit.dangerous-asyncio-shell-tainted-env-args.dangerous-asyncio-shell-tainted-env-args"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found user controlled data inside InteractiveConsole/InteractiveInterpreter method. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code."
              },
              "help": {
                "markdown": "Found user controlled data inside InteractiveConsole/InteractiveInterpreter method. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n",
                "text": "Found user controlled data inside InteractiveConsole/InteractiveInterpreter method. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code."
              },
              "id": "codacy.tools-configs.python.lang.security.audit.dangerous-code-run-tainted-env-args.dangerous-interactive-code-run-tainted-env-args",
              "name": "codacy.tools-configs.python.lang.security.audit.dangerous-code-run-tainted-env-args.dangerous-interactive-code-run-tainted-env-args",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.audit.dangerous-code-run-tainted-env-args.dangerous-interactive-code-run-tainted-env-args"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands."
              },
              "help": {
                "markdown": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n",
                "text": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands."
              },
              "id": "codacy.tools-configs.python.lang.security.audit.dangerous-os-exec-tainted-env-args.dangerous-os-exec-tainted-env-args",
              "name": "codacy.tools-configs.python.lang.security.audit.dangerous-os-exec-tainted-env-args.dangerous-os-exec-tainted-env-args",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.audit.dangerous-os-exec-tainted-env-args.dangerous-os-exec-tainted-env-args"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands."
              },
              "help": {
                "markdown": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html)\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n",
                "text": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands."
              },
              "helpUri": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
              "id": "codacy.tools-configs.python.lang.security.audit.dangerous-spawn-process-tainted-env-args.dangerous-spawn-process-tainted-env-args",
              "name": "codacy.tools-configs.python.lang.security.audit.dangerous-spawn-process-tainted-env-args.dangerous-spawn-process-tainted-env-args",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.audit.dangerous-spawn-process-tainted-env-args.dangerous-spawn-process-tainted-env-args"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found user controlled content in `run_string`. This is dangerous because it allows a malicious actor to run arbitrary Python code."
              },
              "help": {
                "markdown": "Found user controlled content in `run_string`. This is dangerous because it allows a malicious actor to run arbitrary Python code.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://bugs.python.org/issue43472](https://bugs.python.org/issue43472)\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n",
                "text": "Found user controlled content in `run_string`. This is dangerous because it allows a malicious actor to run arbitrary Python code."
              },
              "id": "codacy.tools-configs.python.lang.security.audit.dangerous-subinterpreters-run-string-tainted-env-args.dangerous-subinterpreters-run-string-tainted-env-args",
              "name": "codacy.tools-configs.python.lang.security.audit.dangerous-subinterpreters-run-string-tainted-env-args.dangerous-subinterpreters-run-string-tainted-env-args",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.audit.dangerous-subinterpreters-run-string-tainted-env-args.dangerous-subinterpreters-run-string-tainted-env-args"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'."
              },
              "help": {
                "markdown": "Detected subprocess function '$FUNC' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n",
                "text": "Detected subprocess function '$FUNC' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'."
              },
              "id": "codacy.tools-configs.python.lang.security.audit.dangerous-subprocess-use-tainted-env-args.dangerous-subprocess-use-tainted-env-args",
              "name": "codacy.tools-configs.python.lang.security.audit.dangerous-subprocess-use-tainted-env-args.dangerous-subprocess-use-tainted-env-args",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.audit.dangerous-subprocess-use-tainted-env-args.dangerous-subprocess-use-tainted-env-args"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
              },
              "help": {
                "markdown": "Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html)\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n",
                "text": "Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
              },
              "helpUri": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
              "id": "codacy.tools-configs.python.lang.security.audit.dangerous-system-call-tainted-env-args.dangerous-system-call-tainted-env-args",
              "name": "codacy.tools-configs.python.lang.security.audit.dangerous-system-call-tainted-env-args.dangerous-system-call-tainted-env-args",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.audit.dangerous-system-call-tainted-env-args.dangerous-system-call-tainted-env-args"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found user controlled content in `run_in_subinterp`. This is dangerous because it allows a malicious actor to run arbitrary Python code."
              },
              "help": {
                "markdown": "Found user controlled content in `run_in_subinterp`. This is dangerous because it allows a malicious actor to run arbitrary Python code.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n",
                "text": "Found user controlled content in `run_in_subinterp`. This is dangerous because it allows a malicious actor to run arbitrary Python code."
              },
              "id": "codacy.tools-configs.python.lang.security.audit.dangerous-testcapi-run-in-subinterp-tainted-env-args.dangerous-testcapi-run-in-subinterp-tainted-env-args",
              "name": "codacy.tools-configs.python.lang.security.audit.dangerous-testcapi-run-in-subinterp-tainted-env-args.dangerous-testcapi-run-in-subinterp-tainted-env-args",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.audit.dangerous-testcapi-run-in-subinterp-tainted-env-args.dangerous-testcapi-run-in-subinterp-tainted-env-args"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "These permissions `$BITS` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else."
              },
              "help": {
                "markdown": "These permissions `$BITS` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n",
                "text": "These permissions `$BITS` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else."
              },
              "id": "codacy.tools-configs.python.lang.security.audit.insecure-file-permissions.insecure-file-permissions",
              "name": "codacy.tools-configs.python.lang.security.audit.insecure-file-permissions.insecure-file-permissions",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-276: Incorrect Default Permissions",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.audit.insecure-file-permissions.insecure-file-permissions"
              }
            },
            {
              "defaultConfiguration": {
                "level": "note"
              },
              "fullDescription": {
                "text": "Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead."
              },
              "help": {
                "markdown": "Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead."
              },
              "id": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context.request-session-http-in-with-context",
              "name": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context.request-session-http-in-with-context",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context.request-session-http-in-with-context"
              }
            },
            {
              "defaultConfiguration": {
                "level": "note"
              },
              "fullDescription": {
                "text": "Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead."
              },
              "help": {
                "markdown": "Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead."
              },
              "id": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http",
              "name": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http"
              }
            },
            {
              "defaultConfiguration": {
                "level": "note"
              },
              "fullDescription": {
                "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
              },
              "help": {
                "markdown": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
              },
              "id": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http",
              "name": "codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected a python logger call with a potential hardcoded secret $FORMAT_STRING being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information."
              },
              "help": {
                "markdown": "Detected a python logger call with a potential hardcoded secret $FORMAT_STRING being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures)\n",
                "text": "Detected a python logger call with a potential hardcoded secret $FORMAT_STRING being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information."
              },
              "id": "codacy.tools-configs.python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure",
              "name": "codacy.tools-configs.python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-532: Insertion of Sensitive Information into Log File",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A09:2021 - Security Logging and Monitoring Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`."
              },
              "help": {
                "markdown": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://tools.ietf.org/html/rfc6151](https://tools.ietf.org/html/rfc6151)\n - [https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision](https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n - [https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords](https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords)\n - [https://github.com/returntocorp/semgrep-rules/issues/1609](https://github.com/returntocorp/semgrep-rules/issues/1609)\n - [https://docs.python.org/3/library/hashlib.html#hashlib.scrypt](https://docs.python.org/3/library/hashlib.html#hashlib.scrypt)\n",
                "text": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`."
              },
              "id": "codacy.tools-configs.python.lang.security.audit.md5-used-as-password.md5-used-as-password",
              "name": "codacy.tools-configs.python.lang.security.audit.md5-used-as-password.md5-used-as-password",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.audit.md5-used-as-password.md5-used-as-password"
              }
            },
            {
              "defaultConfiguration": {
                "level": "note"
              },
              "fullDescription": {
                "text": "Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
              },
              "help": {
                "markdown": "Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n",
                "text": "Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
              },
              "id": "codacy.tools-configs.python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces",
              "name": "codacy.tools-configs.python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor",
                  "HIGH CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "certificate verification explicitly disabled, insecure connections possible"
              },
              "help": {
                "markdown": "certificate verification explicitly disabled, insecure connections possible\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n",
                "text": "certificate verification explicitly disabled, insecure connections possible"
              },
              "id": "codacy.tools-configs.python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation",
              "name": "codacy.tools-configs.python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-295: Improper Certificate Validation",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected HTTPConnectionPool. This will transmit data in cleartext. It is recommended to use HTTPSConnectionPool instead for to encrypt communications."
              },
              "help": {
                "markdown": "Detected HTTPConnectionPool. This will transmit data in cleartext. It is recommended to use HTTPSConnectionPool instead for to encrypt communications.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://urllib3.readthedocs.io/en/1.2.1/pools.html#urllib3.connectionpool.HTTPSConnectionPool](https://urllib3.readthedocs.io/en/1.2.1/pools.html#urllib3.connectionpool.HTTPSConnectionPool)\n",
                "text": "Detected HTTPConnectionPool. This will transmit data in cleartext. It is recommended to use HTTPSConnectionPool instead for to encrypt communications."
              },
              "id": "codacy.tools-configs.python.lang.security.audit.network.http-not-https-connection.http-not-https-connection",
              "name": "codacy.tools-configs.python.lang.security.audit.network.http-not-https-connection.http-not-https-connection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.audit.network.http-not-https-connection.http-not-https-connection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use that to wrap a socket."
              },
              "help": {
                "markdown": "'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use that to wrap a socket.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.python.org/3/library/ssl.html#ssl.wrap_socket](https://docs.python.org/3/library/ssl.html#ssl.wrap_socket)\n - [https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_socket](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_socket)\n",
                "text": "'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use that to wrap a socket."
              },
              "id": "codacy.tools-configs.python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated",
              "name": "codacy.tools-configs.python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Found 'subprocess' function '$FUNC' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
              },
              "help": {
                "markdown": "Found 'subprocess' function '$FUNC' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://bandit.readthedocs.io/en/latest/plugins/b602_subprocess_popen_with_shell_equals_true.html)\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n",
                "text": "Found 'subprocess' function '$FUNC' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
              },
              "helpUri": "https://bandit.readthedocs.io/en/latest/plugins/b602_subprocess_popen_with_shell_equals_true.html",
              "id": "codacy.tools-configs.python.lang.security.audit.subprocess-shell-true.subprocess-shell-true",
              "name": "codacy.tools-configs.python.lang.security.audit.subprocess-shell-true.subprocess-shell-true",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.audit.subprocess-shell-true.subprocess-shell-true"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher."
              },
              "help": {
                "markdown": "An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/insecure_ssl_tls.py#L30)\n - [https://tools.ietf.org/html/rfc7568](https://tools.ietf.org/html/rfc7568)\n - [https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html](https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html)\n - [https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLSv1_2](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLSv1_2)\n",
                "text": "An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher."
              },
              "helpUri": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/insecure_ssl_tls.py#L30",
              "id": "codacy.tools-configs.python.lang.security.audit.weak-ssl-version.weak-ssl-version",
              "name": "codacy.tools-configs.python.lang.security.audit.weak-ssl-version.weak-ssl-version",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.audit.weak-ssl-version.weak-ssl-version"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found user controlled data inside InteractiveConsole/InteractiveInterpreter method. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code."
              },
              "help": {
                "markdown": "Found user controlled data inside InteractiveConsole/InteractiveInterpreter method. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n",
                "text": "Found user controlled data inside InteractiveConsole/InteractiveInterpreter method. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code."
              },
              "id": "codacy.tools-configs.python.lang.security.dangerous-code-run.dangerous-interactive-code-run",
              "name": "codacy.tools-configs.python.lang.security.dangerous-code-run.dangerous-interactive-code-run",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.dangerous-code-run.dangerous-interactive-code-run"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands."
              },
              "help": {
                "markdown": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n",
                "text": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands."
              },
              "id": "codacy.tools-configs.python.lang.security.dangerous-os-exec.dangerous-os-exec",
              "name": "codacy.tools-configs.python.lang.security.dangerous-os-exec.dangerous-os-exec",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.dangerous-os-exec.dangerous-os-exec"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands."
              },
              "help": {
                "markdown": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html)\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n",
                "text": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands."
              },
              "helpUri": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
              "id": "codacy.tools-configs.python.lang.security.dangerous-spawn-process.dangerous-spawn-process",
              "name": "codacy.tools-configs.python.lang.security.dangerous-spawn-process.dangerous-spawn-process",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.dangerous-spawn-process.dangerous-spawn-process"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found user controlled content in `run_string`. This is dangerous because it allows a malicious actor to run arbitrary Python code."
              },
              "help": {
                "markdown": "Found user controlled content in `run_string`. This is dangerous because it allows a malicious actor to run arbitrary Python code.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://bugs.python.org/issue43472](https://bugs.python.org/issue43472)\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n",
                "text": "Found user controlled content in `run_string`. This is dangerous because it allows a malicious actor to run arbitrary Python code."
              },
              "id": "codacy.tools-configs.python.lang.security.dangerous-subinterpreters-run-string.dangerous-subinterpreters-run-string",
              "name": "codacy.tools-configs.python.lang.security.dangerous-subinterpreters-run-string.dangerous-subinterpreters-run-string",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.dangerous-subinterpreters-run-string.dangerous-subinterpreters-run-string"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'."
              },
              "help": {
                "markdown": "Detected subprocess function '$FUNC' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n",
                "text": "Detected subprocess function '$FUNC' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'."
              },
              "id": "codacy.tools-configs.python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use",
              "name": "codacy.tools-configs.python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
              },
              "help": {
                "markdown": "Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html)\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n",
                "text": "Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
              },
              "helpUri": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
              "id": "codacy.tools-configs.python.lang.security.dangerous-system-call.dangerous-system-call",
              "name": "codacy.tools-configs.python.lang.security.dangerous-system-call.dangerous-system-call",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.dangerous-system-call.dangerous-system-call"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found user controlled content in `run_in_subinterp`. This is dangerous because it allows a malicious actor to run arbitrary Python code."
              },
              "help": {
                "markdown": "Found user controlled content in `run_in_subinterp`. This is dangerous because it allows a malicious actor to run arbitrary Python code.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://semgrep.dev/docs/cheat-sheets/python-command-injection/](https://semgrep.dev/docs/cheat-sheets/python-command-injection/)\n",
                "text": "Found user controlled content in `run_in_subinterp`. This is dangerous because it allows a malicious actor to run arbitrary Python code."
              },
              "id": "codacy.tools-configs.python.lang.security.dangerous-testcapi-run-in-subinterp.dangerous-testcapi-run-in-subinterp",
              "name": "codacy.tools-configs.python.lang.security.dangerous-testcapi-run-in-subinterp.dangerous-testcapi-run-in-subinterp",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.dangerous-testcapi-run-in-subinterp.dangerous-testcapi-run-in-subinterp"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected a possible YAML deserialization vulnerability. `yaml.unsafe_load`, `yaml.Loader`, `yaml.CLoader`, and `yaml.UnsafeLoader` are all known to be unsafe methods of deserializing YAML. An attacker with control over the YAML input could create special YAML input that allows the attacker to run arbitrary Python code. This would allow the attacker to steal files, download and install malware, or otherwise take over the machine. Use `yaml.safe_load` or `yaml.SafeLoader` instead."
              },
              "help": {
                "markdown": "Detected a possible YAML deserialization vulnerability. `yaml.unsafe_load`, `yaml.Loader`, `yaml.CLoader`, and `yaml.UnsafeLoader` are all known to be unsafe methods of deserializing YAML. An attacker with control over the YAML input could create special YAML input that allows the attacker to run arbitrary Python code. This would allow the attacker to steal files, download and install malware, or otherwise take over the machine. Use `yaml.safe_load` or `yaml.SafeLoader` instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation](https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation)\n - [https://nvd.nist.gov/vuln/detail/CVE-2017-18342](https://nvd.nist.gov/vuln/detail/CVE-2017-18342)\n",
                "text": "Detected a possible YAML deserialization vulnerability. `yaml.unsafe_load`, `yaml.Loader`, `yaml.CLoader`, and `yaml.UnsafeLoader` are all known to be unsafe methods of deserializing YAML. An attacker with control over the YAML input could create special YAML input that allows the attacker to run arbitrary Python code. This would allow the attacker to steal files, download and install malware, or otherwise take over the machine. Use `yaml.safe_load` or `yaml.SafeLoader` instead."
              },
              "id": "codacy.tools-configs.python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load",
              "name": "codacy.tools-configs.python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-502: Deserialization of Untrusted Data",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A08:2017 - Insecure Deserialization",
                  "OWASP-A08:2021 - Software and Data Integrity Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Avoid using unsafe `ruamel.yaml.YAML()`. `ruamel.yaml.YAML` can create arbitrary Python objects. A malicious actor could exploit this to run arbitrary code. Use `YAML(typ='rt')` or `YAML(typ='safe')` instead."
              },
              "help": {
                "markdown": "Avoid using unsafe `ruamel.yaml.YAML()`. `ruamel.yaml.YAML` can create arbitrary Python objects. A malicious actor could exploit this to run arbitrary code. Use `YAML(typ='rt')` or `YAML(typ='safe')` instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://yaml.readthedocs.io/en/latest/basicuse.html?highlight=typ](https://yaml.readthedocs.io/en/latest/basicuse.html?highlight=typ)\n",
                "text": "Avoid using unsafe `ruamel.yaml.YAML()`. `ruamel.yaml.YAML` can create arbitrary Python objects. A malicious actor could exploit this to run arbitrary code. Use `YAML(typ='rt')` or `YAML(typ='safe')` instead."
              },
              "id": "codacy.tools-configs.python.lang.security.deserialization.avoid-unsafe-ruamel.avoid-unsafe-ruamel",
              "name": "codacy.tools-configs.python.lang.security.deserialization.avoid-unsafe-ruamel.avoid-unsafe-ruamel",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-502: Deserialization of Untrusted Data",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A08:2017 - Insecure Deserialization",
                  "OWASP-A08:2021 - Software and Data Integrity Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.deserialization.avoid-unsafe-ruamel.avoid-unsafe-ruamel"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "help": {
                "markdown": "Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n",
                "text": "Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "id": "codacy.tools-configs.python.lang.security.deserialization.pickle.avoid-shelve",
              "name": "codacy.tools-configs.python.lang.security.deserialization.pickle.avoid-shelve",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-502: Deserialization of Untrusted Data",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A08:2017 - Insecure Deserialization",
                  "OWASP-A08:2021 - Software and Data Integrity Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.deserialization.pickle.avoid-shelve"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "help": {
                "markdown": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59)\n - [https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html](https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html)\n - [https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability](https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability)\n - [http://2012.sharcs.org/slides/stevens.pdf](http://2012.sharcs.org/slides/stevens.pdf)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n",
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "helpUri": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
              "id": "codacy.tools-configs.python.lang.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5",
              "name": "codacy.tools-configs.python.lang.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "help": {
                "markdown": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59)\n - [https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html](https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html)\n - [https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability](https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability)\n - [http://2012.sharcs.org/slides/stevens.pdf](http://2012.sharcs.org/slides/stevens.pdf)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n",
                "text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "helpUri": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
              "id": "codacy.tools-configs.python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1",
              "name": "codacy.tools-configs.python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected use of an insecure MD4 or MD5 hash function. These functions have known vulnerabilities and are considered deprecated. Consider using 'SHA256' or a similar function instead."
              },
              "help": {
                "markdown": "Detected use of an insecure MD4 or MD5 hash function. These functions have known vulnerabilities and are considered deprecated. Consider using 'SHA256' or a similar function instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/hashlib_new_insecure_functions.py)\n - [https://tools.ietf.org/html/rfc6151](https://tools.ietf.org/html/rfc6151)\n - [https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision](https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n",
                "text": "Detected use of an insecure MD4 or MD5 hash function. These functions have known vulnerabilities and are considered deprecated. Consider using 'SHA256' or a similar function instead."
              },
              "helpUri": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/hashlib_new_insecure_functions.py",
              "id": "codacy.tools-configs.python.lang.security.insecure-hash-function.insecure-hash-function",
              "name": "codacy.tools-configs.python.lang.security.insecure-hash-function.insecure-hash-function",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.insecure-hash-function.insecure-hash-function"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context' instead."
              },
              "help": {
                "markdown": "Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context' instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.python.org/3/library/ssl.html#ssl-security](https://docs.python.org/3/library/ssl.html#ssl-security)\n - [https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection](https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection)\n",
                "text": "Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context' instead."
              },
              "id": "codacy.tools-configs.python.lang.security.unverified-ssl-context.unverified-ssl-context",
              "name": "codacy.tools-configs.python.lang.security.unverified-ssl-context.unverified-ssl-context",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-295: Improper Certificate Validation",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.unverified-ssl-context.unverified-ssl-context"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and \"XML bombs\" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
              },
              "help": {
                "markdown": "The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and \"XML bombs\" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.python.org/3/library/xml.html](https://docs.python.org/3/library/xml.html)\n - [https://github.com/tiran/defusedxml](https://github.com/tiran/defusedxml)\n - [https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing](https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing)\n",
                "text": "The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and \"XML bombs\" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
              },
              "id": "codacy.tools-configs.python.lang.security.use-defused-xml-parse.use-defused-xml-parse",
              "name": "codacy.tools-configs.python.lang.security.use-defused-xml-parse.use-defused-xml-parse",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-611: Improper Restriction of XML External Entity Reference",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A04:2017 - XML External Entities (XXE)",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.lang.security.use-defused-xml-parse.use-defused-xml-parse"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected Blowfish cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead."
              },
              "help": {
                "markdown": "Detected Blowfish cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84)\n - [https://stackoverflow.com/questions/1135186/whats-wrong-with-xor-encryption](https://stackoverflow.com/questions/1135186/whats-wrong-with-xor-encryption)\n",
                "text": "Detected Blowfish cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead."
              },
              "helpUri": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84",
              "id": "codacy.tools-configs.python.pycryptodome.security.insecure-cipher-algorithm-blowfish.insecure-cipher-algorithm-blowfish",
              "name": "codacy.tools-configs.python.pycryptodome.security.insecure-cipher-algorithm-blowfish.insecure-cipher-algorithm-blowfish",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.pycryptodome.security.insecure-cipher-algorithm-blowfish.insecure-cipher-algorithm-blowfish"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected DES cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead."
              },
              "help": {
                "markdown": "Detected DES cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84)\n - [https://cwe.mitre.org/data/definitions/326.html](https://cwe.mitre.org/data/definitions/326.html)\n",
                "text": "Detected DES cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead."
              },
              "helpUri": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84",
              "id": "codacy.tools-configs.python.pycryptodome.security.insecure-cipher-algorithm-des.insecure-cipher-algorithm-des",
              "name": "codacy.tools-configs.python.pycryptodome.security.insecure-cipher-algorithm-des.insecure-cipher-algorithm-des",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.pycryptodome.security.insecure-cipher-algorithm-des.insecure-cipher-algorithm-des"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected RC2 cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead."
              },
              "help": {
                "markdown": "Detected RC2 cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84)\n - [https://cwe.mitre.org/data/definitions/326.html](https://cwe.mitre.org/data/definitions/326.html)\n",
                "text": "Detected RC2 cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead."
              },
              "helpUri": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84",
              "id": "codacy.tools-configs.python.pycryptodome.security.insecure-cipher-algorithm-rc2.insecure-cipher-algorithm-rc2",
              "name": "codacy.tools-configs.python.pycryptodome.security.insecure-cipher-algorithm-rc2.insecure-cipher-algorithm-rc2",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.pycryptodome.security.insecure-cipher-algorithm-rc2.insecure-cipher-algorithm-rc2"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected ARC4 cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead."
              },
              "help": {
                "markdown": "Detected ARC4 cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84)\n - [https://cwe.mitre.org/data/definitions/326.html](https://cwe.mitre.org/data/definitions/326.html)\n",
                "text": "Detected ARC4 cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead."
              },
              "helpUri": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84",
              "id": "codacy.tools-configs.python.pycryptodome.security.insecure-cipher-algorithm-rc4.insecure-cipher-algorithm-rc4",
              "name": "codacy.tools-configs.python.pycryptodome.security.insecure-cipher-algorithm-rc4.insecure-cipher-algorithm-rc4",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.pycryptodome.security.insecure-cipher-algorithm-rc4.insecure-cipher-algorithm-rc4"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected XOR cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead."
              },
              "help": {
                "markdown": "Detected XOR cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84)\n - [https://stackoverflow.com/questions/1135186/whats-wrong-with-xor-encryption](https://stackoverflow.com/questions/1135186/whats-wrong-with-xor-encryption)\n",
                "text": "Detected XOR cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead."
              },
              "helpUri": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84",
              "id": "codacy.tools-configs.python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-xor",
              "name": "codacy.tools-configs.python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-xor",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-xor"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected MD2 hash algorithm which is considered insecure. MD2 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "help": {
                "markdown": "Detected MD2 hash algorithm which is considered insecure. MD2 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59)\n - [https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html](https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html)\n - [https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability](https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability)\n - [http://2012.sharcs.org/slides/stevens.pdf](http://2012.sharcs.org/slides/stevens.pdf)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n",
                "text": "Detected MD2 hash algorithm which is considered insecure. MD2 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "helpUri": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
              "id": "codacy.tools-configs.python.pycryptodome.security.insecure-hash-algorithm-md2.insecure-hash-algorithm-md2",
              "name": "codacy.tools-configs.python.pycryptodome.security.insecure-hash-algorithm-md2.insecure-hash-algorithm-md2",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.pycryptodome.security.insecure-hash-algorithm-md2.insecure-hash-algorithm-md2"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected MD4 hash algorithm which is considered insecure. MD4 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "help": {
                "markdown": "Detected MD4 hash algorithm which is considered insecure. MD4 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59)\n - [https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html](https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html)\n - [https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability](https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability)\n - [http://2012.sharcs.org/slides/stevens.pdf](http://2012.sharcs.org/slides/stevens.pdf)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n",
                "text": "Detected MD4 hash algorithm which is considered insecure. MD4 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "helpUri": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
              "id": "codacy.tools-configs.python.pycryptodome.security.insecure-hash-algorithm-md4.insecure-hash-algorithm-md4",
              "name": "codacy.tools-configs.python.pycryptodome.security.insecure-hash-algorithm-md4.insecure-hash-algorithm-md4",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.pycryptodome.security.insecure-hash-algorithm-md4.insecure-hash-algorithm-md4"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "help": {
                "markdown": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59)\n - [https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html](https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html)\n - [https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability](https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability)\n - [http://2012.sharcs.org/slides/stevens.pdf](http://2012.sharcs.org/slides/stevens.pdf)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n",
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "helpUri": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
              "id": "codacy.tools-configs.python.pycryptodome.security.insecure-hash-algorithm-md5.insecure-hash-algorithm-md5",
              "name": "codacy.tools-configs.python.pycryptodome.security.insecure-hash-algorithm-md5.insecure-hash-algorithm-md5",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.pycryptodome.security.insecure-hash-algorithm-md5.insecure-hash-algorithm-md5"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "help": {
                "markdown": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59)\n - [https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html](https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html)\n - [https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability](https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability)\n - [http://2012.sharcs.org/slides/stevens.pdf](http://2012.sharcs.org/slides/stevens.pdf)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n",
                "text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "helpUri": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
              "id": "codacy.tools-configs.python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-sha1",
              "name": "codacy.tools-configs.python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-sha1",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-sha1"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected an insufficient key size for DSA. NIST recommends a key size of 2048 or higher."
              },
              "help": {
                "markdown": "Detected an insufficient key size for DSA. NIST recommends a key size of 2048 or higher.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py)\n - [https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf)\n",
                "text": "Detected an insufficient key size for DSA. NIST recommends a key size of 2048 or higher."
              },
              "helpUri": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py",
              "id": "codacy.tools-configs.python.pycryptodome.security.insufficient-dsa-key-size.insufficient-dsa-key-size",
              "name": "codacy.tools-configs.python.pycryptodome.security.insufficient-dsa-key-size.insufficient-dsa-key-size",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.pycryptodome.security.insufficient-dsa-key-size.insufficient-dsa-key-size"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected an insufficient key size for RSA. NIST recommends a key size of 2048 or higher."
              },
              "help": {
                "markdown": "Detected an insufficient key size for RSA. NIST recommends a key size of 2048 or higher.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py)\n - [https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf)\n",
                "text": "Detected an insufficient key size for RSA. NIST recommends a key size of 2048 or higher."
              },
              "helpUri": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py",
              "id": "codacy.tools-configs.python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size",
              "name": "codacy.tools-configs.python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. "
              },
              "help": {
                "markdown": "An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. \n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. "
              },
              "id": "codacy.tools-configs.python.pycryptodome.security.mode-without-authentication.crypto-mode-without-authentication",
              "name": "codacy.tools-configs.python.pycryptodome.security.mode-without-authentication.crypto-mode-without-authentication",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.pycryptodome.security.mode-without-authentication.crypto-mode-without-authentication"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Warning MONGODB-CR was deprecated with the release of MongoDB 3.6 and is no longer supported by MongoDB 4.0 (see https://api.mongodb.com/python/current/examples/authentication.html for details)."
              },
              "help": {
                "markdown": "Warning MONGODB-CR was deprecated with the release of MongoDB 3.6 and is no longer supported by MongoDB 4.0 (see https://api.mongodb.com/python/current/examples/authentication.html for details).\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cwe.mitre.org/data/definitions/477.html](https://cwe.mitre.org/data/definitions/477.html)\n",
                "text": "Warning MONGODB-CR was deprecated with the release of MongoDB 3.6 and is no longer supported by MongoDB 4.0 (see https://api.mongodb.com/python/current/examples/authentication.html for details)."
              },
              "id": "codacy.tools-configs.python.pymongo.security.mongodb.mongo-client-bad-auth",
              "name": "codacy.tools-configs.python.pymongo.security.mongodb.mongo-client-bad-auth",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-477: Use of Obsolete Function",
                  "MEDIUM CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.pymongo.security.mongodb.mongo-client-bad-auth"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found a Pyramid Authentication Ticket cookie without the httponly option correctly set. Pyramid cookies should be handled securely by setting httponly=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."
              },
              "help": {
                "markdown": "Found a Pyramid Authentication Ticket cookie without the httponly option correctly set. Pyramid cookies should be handled securely by setting httponly=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n",
                "text": "Found a Pyramid Authentication Ticket cookie without the httponly option correctly set. Pyramid cookies should be handled securely by setting httponly=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."
              },
              "id": "codacy.tools-configs.python.pyramid.audit.authtkt-cookie-httponly-unsafe-default.pyramid-authtkt-cookie-httponly-unsafe-default",
              "name": "codacy.tools-configs.python.pyramid.audit.authtkt-cookie-httponly-unsafe-default.pyramid-authtkt-cookie-httponly-unsafe-default",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.pyramid.audit.authtkt-cookie-httponly-unsafe-default.pyramid-authtkt-cookie-httponly-unsafe-default"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found a Pyramid Authentication Ticket cookie without the httponly option correctly set. Pyramid cookies should be handled securely by setting httponly=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."
              },
              "help": {
                "markdown": "Found a Pyramid Authentication Ticket cookie without the httponly option correctly set. Pyramid cookies should be handled securely by setting httponly=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n",
                "text": "Found a Pyramid Authentication Ticket cookie without the httponly option correctly set. Pyramid cookies should be handled securely by setting httponly=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."
              },
              "id": "codacy.tools-configs.python.pyramid.audit.authtkt-cookie-httponly-unsafe-value.pyramid-authtkt-cookie-httponly-unsafe-value",
              "name": "codacy.tools-configs.python.pyramid.audit.authtkt-cookie-httponly-unsafe-value.pyramid-authtkt-cookie-httponly-unsafe-value",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.pyramid.audit.authtkt-cookie-httponly-unsafe-value.pyramid-authtkt-cookie-httponly-unsafe-value"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found a Pyramid Authentication Ticket without the samesite option correctly set. Pyramid cookies should be handled securely by setting samesite='Lax'. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."
              },
              "help": {
                "markdown": "Found a Pyramid Authentication Ticket without the samesite option correctly set. Pyramid cookies should be handled securely by setting samesite='Lax'. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n",
                "text": "Found a Pyramid Authentication Ticket without the samesite option correctly set. Pyramid cookies should be handled securely by setting samesite='Lax'. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."
              },
              "id": "codacy.tools-configs.python.pyramid.audit.authtkt-cookie-samesite.pyramid-authtkt-cookie-samesite",
              "name": "codacy.tools-configs.python.pyramid.audit.authtkt-cookie-samesite.pyramid-authtkt-cookie-samesite",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-1275: Sensitive Cookie with Improper SameSite Attribute",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.pyramid.audit.authtkt-cookie-samesite.pyramid-authtkt-cookie-samesite"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found a Pyramid Authentication Ticket cookie using an unsafe default for the secure option. Pyramid cookies should be handled securely by setting secure=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."
              },
              "help": {
                "markdown": "Found a Pyramid Authentication Ticket cookie using an unsafe default for the secure option. Pyramid cookies should be handled securely by setting secure=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n",
                "text": "Found a Pyramid Authentication Ticket cookie using an unsafe default for the secure option. Pyramid cookies should be handled securely by setting secure=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."
              },
              "id": "codacy.tools-configs.python.pyramid.audit.authtkt-cookie-secure-unsafe-default.pyramid-authtkt-cookie-secure-unsafe-default",
              "name": "codacy.tools-configs.python.pyramid.audit.authtkt-cookie-secure-unsafe-default.pyramid-authtkt-cookie-secure-unsafe-default",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.pyramid.audit.authtkt-cookie-secure-unsafe-default.pyramid-authtkt-cookie-secure-unsafe-default"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found a Pyramid Authentication Ticket cookie without the secure option correctly set. Pyramid cookies should be handled securely by setting secure=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."
              },
              "help": {
                "markdown": "Found a Pyramid Authentication Ticket cookie without the secure option correctly set. Pyramid cookies should be handled securely by setting secure=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n",
                "text": "Found a Pyramid Authentication Ticket cookie without the secure option correctly set. Pyramid cookies should be handled securely by setting secure=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."
              },
              "id": "codacy.tools-configs.python.pyramid.audit.authtkt-cookie-secure-unsafe-value.pyramid-authtkt-cookie-secure-unsafe-value",
              "name": "codacy.tools-configs.python.pyramid.audit.authtkt-cookie-secure-unsafe-value.pyramid-authtkt-cookie-secure-unsafe-value",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.pyramid.audit.authtkt-cookie-secure-unsafe-value.pyramid-authtkt-cookie-secure-unsafe-value"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Automatic check of the referrer for cross-site request forgery tokens has been explicitly disabled globally, which might leave views unprotected when an unsafe CSRF storage policy is used. Use 'pyramid.config.Configurator.set_default_csrf_options(check_origin=True)' to turn the automatic check for all unsafe methods (per RFC2616)."
              },
              "help": {
                "markdown": "Automatic check of the referrer for cross-site request forgery tokens has been explicitly disabled globally, which might leave views unprotected when an unsafe CSRF storage policy is used. Use 'pyramid.config.Configurator.set_default_csrf_options(check_origin=True)' to turn the automatic check for all unsafe methods (per RFC2616).\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n",
                "text": "Automatic check of the referrer for cross-site request forgery tokens has been explicitly disabled globally, which might leave views unprotected when an unsafe CSRF storage policy is used. Use 'pyramid.config.Configurator.set_default_csrf_options(check_origin=True)' to turn the automatic check for all unsafe methods (per RFC2616)."
              },
              "id": "codacy.tools-configs.python.pyramid.audit.csrf-origin-check-disabled-globally.pyramid-csrf-origin-check-disabled-globally",
              "name": "codacy.tools-configs.python.pyramid.audit.csrf-origin-check-disabled-globally.pyramid-csrf-origin-check-disabled-globally",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-352: Cross-Site Request Forgery (CSRF)",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.pyramid.audit.csrf-origin-check-disabled-globally.pyramid-csrf-origin-check-disabled-globally"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Origin check for the CSRF token is disabled for this view. This might represent a security risk if the CSRF storage policy is not known to be secure."
              },
              "help": {
                "markdown": "Origin check for the CSRF token is disabled for this view. This might represent a security risk if the CSRF storage policy is not known to be secure.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n",
                "text": "Origin check for the CSRF token is disabled for this view. This might represent a security risk if the CSRF storage policy is not known to be secure."
              },
              "id": "codacy.tools-configs.python.pyramid.audit.csrf-origin-check-disabled.pyramid-csrf-origin-check-disabled",
              "name": "codacy.tools-configs.python.pyramid.audit.csrf-origin-check-disabled.pyramid-csrf-origin-check-disabled",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-352: Cross-Site Request Forgery (CSRF)",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.pyramid.audit.csrf-origin-check-disabled.pyramid-csrf-origin-check-disabled"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found a Pyramid cookie using an unsafe default for the httponly option. Pyramid cookies should be handled securely by setting httponly=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."
              },
              "help": {
                "markdown": "Found a Pyramid cookie using an unsafe default for the httponly option. Pyramid cookies should be handled securely by setting httponly=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n",
                "text": "Found a Pyramid cookie using an unsafe default for the httponly option. Pyramid cookies should be handled securely by setting httponly=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."
              },
              "id": "codacy.tools-configs.python.pyramid.audit.set-cookie-httponly-unsafe-default.pyramid-set-cookie-httponly-unsafe-default",
              "name": "codacy.tools-configs.python.pyramid.audit.set-cookie-httponly-unsafe-default.pyramid-set-cookie-httponly-unsafe-default",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.pyramid.audit.set-cookie-httponly-unsafe-default.pyramid-set-cookie-httponly-unsafe-default"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found a Pyramid cookie without the httponly option correctly set. Pyramid cookies should be handled securely by setting httponly=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."
              },
              "help": {
                "markdown": "Found a Pyramid cookie without the httponly option correctly set. Pyramid cookies should be handled securely by setting httponly=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/www-community/controls/SecureCookieAttribute](https://owasp.org/www-community/controls/SecureCookieAttribute)\n - [https://owasp.org/www-community/HttpOnly](https://owasp.org/www-community/HttpOnly)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#httponly-attribute](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#httponly-attribute)\n",
                "text": "Found a Pyramid cookie without the httponly option correctly set. Pyramid cookies should be handled securely by setting httponly=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."
              },
              "id": "codacy.tools-configs.python.pyramid.audit.set-cookie-httponly-unsafe-value.pyramid-set-cookie-httponly-unsafe-value",
              "name": "codacy.tools-configs.python.pyramid.audit.set-cookie-httponly-unsafe-value.pyramid-set-cookie-httponly-unsafe-value",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.pyramid.audit.set-cookie-httponly-unsafe-value.pyramid-set-cookie-httponly-unsafe-value"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found a Pyramid cookie using an unsafe value for the samesite option. Pyramid cookies should be handled securely by setting samesite='Lax' in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."
              },
              "help": {
                "markdown": "Found a Pyramid cookie using an unsafe value for the samesite option. Pyramid cookies should be handled securely by setting samesite='Lax' in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n",
                "text": "Found a Pyramid cookie using an unsafe value for the samesite option. Pyramid cookies should be handled securely by setting samesite='Lax' in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."
              },
              "id": "codacy.tools-configs.python.pyramid.audit.set-cookie-samesite-unsafe-default.pyramid-set-cookie-samesite-unsafe-default",
              "name": "codacy.tools-configs.python.pyramid.audit.set-cookie-samesite-unsafe-default.pyramid-set-cookie-samesite-unsafe-default",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-1275: Sensitive Cookie with Improper SameSite Attribute",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.pyramid.audit.set-cookie-samesite-unsafe-default.pyramid-set-cookie-samesite-unsafe-default"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found a Pyramid cookie without the samesite option correctly set. Pyramid cookies should be handled securely by setting samesite='Lax' in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."
              },
              "help": {
                "markdown": "Found a Pyramid cookie without the samesite option correctly set. Pyramid cookies should be handled securely by setting samesite='Lax' in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n",
                "text": "Found a Pyramid cookie without the samesite option correctly set. Pyramid cookies should be handled securely by setting samesite='Lax' in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."
              },
              "id": "codacy.tools-configs.python.pyramid.audit.set-cookie-samesite-unsafe-value.pyramid-set-cookie-samesite-unsafe-value",
              "name": "codacy.tools-configs.python.pyramid.audit.set-cookie-samesite-unsafe-value.pyramid-set-cookie-samesite-unsafe-value",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-1275: Sensitive Cookie with Improper SameSite Attribute",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.pyramid.audit.set-cookie-samesite-unsafe-value.pyramid-set-cookie-samesite-unsafe-value"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found a Pyramid cookie using an unsafe default for the secure option. Pyramid cookies should be handled securely by setting secure=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."
              },
              "help": {
                "markdown": "Found a Pyramid cookie using an unsafe default for the secure option. Pyramid cookies should be handled securely by setting secure=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n",
                "text": "Found a Pyramid cookie using an unsafe default for the secure option. Pyramid cookies should be handled securely by setting secure=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."
              },
              "id": "codacy.tools-configs.python.pyramid.audit.set-cookie-secure-unsafe-default.pyramid-set-cookie-secure-unsafe-default",
              "name": "codacy.tools-configs.python.pyramid.audit.set-cookie-secure-unsafe-default.pyramid-set-cookie-secure-unsafe-default",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.pyramid.audit.set-cookie-secure-unsafe-default.pyramid-set-cookie-secure-unsafe-default"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found a Pyramid cookie without the secure option correctly set. Pyramid cookies should be handled securely by setting secure=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."
              },
              "help": {
                "markdown": "Found a Pyramid cookie without the secure option correctly set. Pyramid cookies should be handled securely by setting secure=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n",
                "text": "Found a Pyramid cookie without the secure option correctly set. Pyramid cookies should be handled securely by setting secure=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker."
              },
              "id": "codacy.tools-configs.python.pyramid.audit.set-cookie-secure-unsafe-value.pyramid-set-cookie-secure-unsafe-value",
              "name": "codacy.tools-configs.python.pyramid.audit.set-cookie-secure-unsafe-value.pyramid-set-cookie-secure-unsafe-value",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.pyramid.audit.set-cookie-secure-unsafe-value.pyramid-set-cookie-secure-unsafe-value"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Automatic check of cross-site request forgery tokens has been explicitly disabled globally, which might leave views unprotected. Use 'pyramid.config.Configurator.set_default_csrf_options(require_csrf=True)' to turn the automatic check for all unsafe methods (per RFC2616)."
              },
              "help": {
                "markdown": "Automatic check of cross-site request forgery tokens has been explicitly disabled globally, which might leave views unprotected. Use 'pyramid.config.Configurator.set_default_csrf_options(require_csrf=True)' to turn the automatic check for all unsafe methods (per RFC2616).\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n",
                "text": "Automatic check of cross-site request forgery tokens has been explicitly disabled globally, which might leave views unprotected. Use 'pyramid.config.Configurator.set_default_csrf_options(require_csrf=True)' to turn the automatic check for all unsafe methods (per RFC2616)."
              },
              "id": "codacy.tools-configs.python.pyramid.security.csrf-check-disabled-globally.pyramid-csrf-check-disabled-globally",
              "name": "codacy.tools-configs.python.pyramid.security.csrf-check-disabled-globally.pyramid-csrf-check-disabled-globally",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-352: Cross-Site Request Forgery (CSRF)",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.pyramid.security.csrf-check-disabled-globally.pyramid-csrf-check-disabled-globally"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected data rendered directly to the end user via 'Response'. This bypasses Pyramid's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Pyramid's template engines to safely render HTML."
              },
              "help": {
                "markdown": "Detected data rendered directly to the end user via 'Response'. This bypasses Pyramid's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Pyramid's template engines to safely render HTML.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
                "text": "Detected data rendered directly to the end user via 'Response'. This bypasses Pyramid's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Pyramid's template engines to safely render HTML."
              },
              "id": "codacy.tools-configs.python.pyramid.security.direct-use-of-response.pyramid-direct-use-of-response",
              "name": "codacy.tools-configs.python.pyramid.security.direct-use-of-response.pyramid-direct-use-of-response",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.pyramid.security.direct-use-of-response.pyramid-direct-use-of-response"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \"bindparams\". Use bindParams to securely bind user-input to SQL statements."
              },
              "help": {
                "markdown": "Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \"bindparams\". Use bindParams to securely bind user-input to SQL statements.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.sqlalchemy.org/en/14/tutorial/data_select.html#tutorial-selecting-data](https://docs.sqlalchemy.org/en/14/tutorial/data_select.html#tutorial-selecting-data)\n",
                "text": "Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \"bindparams\". Use bindParams to securely bind user-input to SQL statements."
              },
              "id": "codacy.tools-configs.python.pyramid.security.sqlalchemy-sql-injection.pyramid-sqlalchemy-sql-injection",
              "name": "codacy.tools-configs.python.pyramid.security.sqlalchemy-sql-injection.pyramid-sqlalchemy-sql-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.pyramid.security.sqlalchemy-sql-injection.pyramid-sqlalchemy-sql-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as or_, and_, etc.) to construct SQL."
              },
              "help": {
                "markdown": "sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as or_, and_, etc.) to construct SQL.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql](https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql)\n",
                "text": "sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as or_, and_, etc.) to construct SQL."
              },
              "id": "codacy.tools-configs.python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
              "name": "codacy.tools-configs.python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \"bindparams\". Use bindParams to securely bind user-input to SQL statements."
              },
              "help": {
                "markdown": "Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \"bindparams\". Use bindParams to securely bind user-input to SQL statements.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
                "text": "Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \"bindparams\". Use bindParams to securely bind user-input to SQL statements."
              },
              "id": "codacy.tools-configs.python.sqlalchemy.security.sqlalchemy-sql-injection.sqlalchemy-sql-injection",
              "name": "codacy.tools-configs.python.sqlalchemy.security.sqlalchemy-sql-injection.sqlalchemy-sql-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.sqlalchemy.security.sqlalchemy-sql-injection.sqlalchemy-sql-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Using non-constant TwiML (Twilio Markup Language) argument when creating a Twilio conversation could allow the injection of additional TwiML commands"
              },
              "help": {
                "markdown": "Using non-constant TwiML (Twilio Markup Language) argument when creating a Twilio conversation could allow the injection of additional TwiML commands\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://codeberg.org/fennix/funjection](https://codeberg.org/fennix/funjection)\n",
                "text": "Using non-constant TwiML (Twilio Markup Language) argument when creating a Twilio conversation could allow the injection of additional TwiML commands"
              },
              "id": "codacy.tools-configs.python.twilio.security.twiml-injection.twiml-injection",
              "name": "codacy.tools-configs.python.twilio.security.twiml-injection.twiml-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-91: XML Injection",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.python.twilio.security.twiml-injection.twiml-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The application is using HTTPConnectionPool method. This method transmits\ndata in cleartext, which is vulnerable to MITM (Man in the middle)\nattacks. In MITM attacks, the data transmitted over the unencrypted\nconnection can be intercepted, read and/or modified by unauthorized\nparties which can lead to data integrity and confidentiality loss. \n\nTo mitigate this issue, use HTTPSConnectionPool instead, which encrypts \ncommunications and enhances security.\n\nSecure Code Example:\n```\nimport urllib3\nspool = urllib3.connectionpool.HTTPSConnectionPool(\"example.com\")\n```\n"
              },
              "help": {
                "markdown": "The application is using HTTPConnectionPool method. This method transmits\ndata in cleartext, which is vulnerable to MITM (Man in the middle)\nattacks. In MITM attacks, the data transmitted over the unencrypted\nconnection can be intercepted, read and/or modified by unauthorized\nparties which can lead to data integrity and confidentiality loss. \n\nTo mitigate this issue, use HTTPSConnectionPool instead, which encrypts \ncommunications and enhances security.\n\nSecure Code Example:\n```\nimport urllib3\nspool = urllib3.connectionpool.HTTPSConnectionPool(\"example.com\")\n```\n\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://urllib3.readthedocs.io/en/1.2.1/pools.html#urllib3.connectionpool.HTTPSConnectionPool](https://urllib3.readthedocs.io/en/1.2.1/pools.html#urllib3.connectionpool.HTTPSConnectionPool)\n",
                "text": "The application is using HTTPConnectionPool method. This method transmits\ndata in cleartext, which is vulnerable to MITM (Man in the middle)\nattacks. In MITM attacks, the data transmitted over the unencrypted\nconnection can be intercepted, read and/or modified by unauthorized\nparties which can lead to data integrity and confidentiality loss. \n\nTo mitigate this issue, use HTTPSConnectionPool instead, which encrypts \ncommunications and enhances security.\n\nSecure Code Example:\n```\nimport urllib3\nspool = urllib3.connectionpool.HTTPSConnectionPool(\"example.com\")\n```\n"
              },
              "id": "codacy.tools-configs.python_crypto_rule-HTTPConnectionPool",
              "name": "codacy.tools-configs.python_crypto_rule-HTTPConnectionPool",
              "properties": {
                "precision": "very-high",
                "security-severity": "MEDIUM",
                "tags": [
                  "CWE-319",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021-Cryptographic Failures",
                  "OWASP-A3:2017-Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Cleartext transmission of sensitive information"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Found request data in a call to 'open'. An attacker can manipulate this input to access files outside the intended \ndirectory. This can lead to unauthorized access to sensitive files or directories. To prevent path traversal attacks, \navoid using user-controlled input in file paths. If you must use user-controlled input, validate and sanitize the \ninput to ensure it does not contain any path traversal sequences. For example, you can use the `os.path.join` function \nto safely construct file paths or validate that the absolute path starts with the directory which is whitelisted for \naccessing file. The following code snippet demonstrates how to validate a file path from user-controlled input:\n```\nimport os\n\ndef safe_open_file(filename, base_path):\n  # Resolve the absolute path of the user-supplied filename\n  absolute_path = os.path.abspath(filename)\n\n  # Check that the absolute path starts with the base path\n  if not absolute_path.startswith(base_path):\n      raise ValueError(\"Invalid file path\")\n\n  return open(absolute_path, 'r')\n```\nFor more information, see the OWASP Path Traversal page: https://owasp.org/www-community/attacks/Path_Traversal\n"
              },
              "help": {
                "markdown": "Found request data in a call to 'open'. An attacker can manipulate this input to access files outside the intended \ndirectory. This can lead to unauthorized access to sensitive files or directories. To prevent path traversal attacks, \navoid using user-controlled input in file paths. If you must use user-controlled input, validate and sanitize the \ninput to ensure it does not contain any path traversal sequences. For example, you can use the `os.path.join` function \nto safely construct file paths or validate that the absolute path starts with the directory which is whitelisted for \naccessing file. The following code snippet demonstrates how to validate a file path from user-controlled input:\n```\nimport os\n\ndef safe_open_file(filename, base_path):\n  # Resolve the absolute path of the user-supplied filename\n  absolute_path = os.path.abspath(filename)\n\n  # Check that the absolute path starts with the base path\n  if not absolute_path.startswith(base_path):\n      raise ValueError(\"Invalid file path\")\n\n  return open(absolute_path, 'r')\n```\nFor more information, see the OWASP Path Traversal page: https://owasp.org/www-community/attacks/Path_Traversal\n\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/www-community/attacks/Path_Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
                "text": "Found request data in a call to 'open'. An attacker can manipulate this input to access files outside the intended \ndirectory. This can lead to unauthorized access to sensitive files or directories. To prevent path traversal attacks, \navoid using user-controlled input in file paths. If you must use user-controlled input, validate and sanitize the \ninput to ensure it does not contain any path traversal sequences. For example, you can use the `os.path.join` function \nto safely construct file paths or validate that the absolute path starts with the directory which is whitelisted for \naccessing file. The following code snippet demonstrates how to validate a file path from user-controlled input:\n```\nimport os\n\ndef safe_open_file(filename, base_path):\n  # Resolve the absolute path of the user-supplied filename\n  absolute_path = os.path.abspath(filename)\n\n  # Check that the absolute path starts with the base path\n  if not absolute_path.startswith(base_path):\n      raise ValueError(\"Invalid file path\")\n\n  return open(absolute_path, 'r')\n```\nFor more information, see the OWASP Path Traversal page: https://owasp.org/www-community/attacks/Path_Traversal\n"
              },
              "id": "codacy.tools-configs.python_flask_rule-path-traversal-open",
              "name": "codacy.tools-configs.python_flask_rule-path-traversal-open",
              "properties": {
                "precision": "very-high",
                "security-severity": "CRITICAL",
                "tags": [
                  "CWE-22",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021-Broken Access Control",
                  "OWASP-A5:2017-Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected use of the 'none' algorithm in a JWT token.\nThe 'none' algorithm assumes the integrity of the token has already\nbeen verified. This would allow a malicious actor to forge a JWT token\nthat will automatically be verified. Do not explicitly use the 'none'\nalgorithm. Instead, use an algorithm such as 'HS256'.\n"
              },
              "help": {
                "markdown": "Detected use of the 'none' algorithm in a JWT token.\nThe 'none' algorithm assumes the integrity of the token has already\nbeen verified. This would allow a malicious actor to forge a JWT token\nthat will automatically be verified. Do not explicitly use the 'none'\nalgorithm. Instead, use an algorithm such as 'HS256'.\n\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/)\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Detected use of the 'none' algorithm in a JWT token.\nThe 'none' algorithm assumes the integrity of the token has already\nbeen verified. This would allow a malicious actor to forge a JWT token\nthat will automatically be verified. Do not explicitly use the 'none'\nalgorithm. Instead, use an algorithm such as 'HS256'.\n"
              },
              "helpUri": "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/",
              "id": "codacy.tools-configs.python_jwt_rule-jwt-none-alg",
              "name": "codacy.tools-configs.python_jwt_rule-jwt-none-alg",
              "properties": {
                "precision": "very-high",
                "security-severity": "MEDIUM",
                "tags": [
                  "CWE-327",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021-Cryptographic Failures",
                  "OWASP-A3:2017-Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Use of a Broken or Risky Cryptographic Algorithm"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Automatic check of the referrer for cross-site request forgery tokens\nhas been explicitly disabled globally, which might leave views unprotected\nwhen an unsafe CSRF storage policy is used. By passing `check_origin=False` \nto `set_default_csrf_options()` method, you opt out of checking the origin \nof the domain in the referrer header or the origin header, which can make \nthe application vulnerable to CSRF attacks, specially if CSRF token is not \nproperly implemented.\nCSRF attacks are a type of exploit where an attacker tricks a user into \nexecuting unwanted actions on a web application in which they are authenticated. \nIf a user is logged into a web application, an attacker could create a malicious \nlink or script on another site that causes the user's browser to make a request \nto the web application, carrying out an action without the user's consent.\n\nTo mitigate this vulnerability, use \n'pyramid.config.Configurator.set_default_csrf_options(check_origin=True)'\nto turn the automatic check for all unsafe methods (per RFC2616).\n\nSecure Code Example:\n```\ndef safe(config):\n  config.set_csrf_storage_policy(CookieCSRFStoragePolicy())\n  config.set_default_csrf_options(check_origin=True)\n```\n"
              },
              "help": {
                "markdown": "Automatic check of the referrer for cross-site request forgery tokens\nhas been explicitly disabled globally, which might leave views unprotected\nwhen an unsafe CSRF storage policy is used. By passing `check_origin=False` \nto `set_default_csrf_options()` method, you opt out of checking the origin \nof the domain in the referrer header or the origin header, which can make \nthe application vulnerable to CSRF attacks, specially if CSRF token is not \nproperly implemented.\nCSRF attacks are a type of exploit where an attacker tricks a user into \nexecuting unwanted actions on a web application in which they are authenticated. \nIf a user is logged into a web application, an attacker could create a malicious \nlink or script on another site that causes the user's browser to make a request \nto the web application, carrying out an action without the user's consent.\n\nTo mitigate this vulnerability, use \n'pyramid.config.Configurator.set_default_csrf_options(check_origin=True)'\nto turn the automatic check for all unsafe methods (per RFC2616).\n\nSecure Code Example:\n```\ndef safe(config):\n  config.set_csrf_storage_policy(CookieCSRFStoragePolicy())\n  config.set_default_csrf_options(check_origin=True)\n```\n\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n - [https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/security.html](https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/security.html)\n",
                "text": "Automatic check of the referrer for cross-site request forgery tokens\nhas been explicitly disabled globally, which might leave views unprotected\nwhen an unsafe CSRF storage policy is used. By passing `check_origin=False` \nto `set_default_csrf_options()` method, you opt out of checking the origin \nof the domain in the referrer header or the origin header, which can make \nthe application vulnerable to CSRF attacks, specially if CSRF token is not \nproperly implemented.\nCSRF attacks are a type of exploit where an attacker tricks a user into \nexecuting unwanted actions on a web application in which they are authenticated. \nIf a user is logged into a web application, an attacker could create a malicious \nlink or script on another site that causes the user's browser to make a request \nto the web application, carrying out an action without the user's consent.\n\nTo mitigate this vulnerability, use \n'pyramid.config.Configurator.set_default_csrf_options(check_origin=True)'\nto turn the automatic check for all unsafe methods (per RFC2616).\n\nSecure Code Example:\n```\ndef safe(config):\n  config.set_csrf_storage_policy(CookieCSRFStoragePolicy())\n  config.set_default_csrf_options(check_origin=True)\n```\n"
              },
              "id": "codacy.tools-configs.python_pyramid_rule-pyramid-csrf-origin-check",
              "name": "codacy.tools-configs.python_pyramid_rule-pyramid-csrf-origin-check",
              "properties": {
                "precision": "very-high",
                "security-severity": "MEDIUM",
                "tags": [
                  "CWE-352",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021-Broken Access Control",
                  "OWASP-A5:2017-Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Cross-site request forgery (CSRF)"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `Example.find_by_sql [\"SELECT title FROM posts WHERE author = ? AND created \u003e ?\", author_id, start_date]`"
              },
              "help": {
                "markdown": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `Example.find_by_sql [\"SELECT title FROM posts WHERE author = ? AND created \u003e ?\", author_id, start_date]`\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://guides.rubyonrails.org/active_record_querying.html#finding-by-sql](https://guides.rubyonrails.org/active_record_querying.html#finding-by-sql)\n",
                "text": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `Example.find_by_sql [\"SELECT title FROM posts WHERE author = ? AND created \u003e ?\", author_id, start_date]`"
              },
              "id": "codacy.tools-configs.ruby.aws-lambda.security.activerecord-sqli.activerecord-sqli",
              "name": "codacy.tools-configs.ruby.aws-lambda.security.activerecord-sqli.activerecord-sqli",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.aws-lambda.security.activerecord-sqli.activerecord-sqli"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use sanitize statements like so: `escaped = client.escape(user_input)`"
              },
              "help": {
                "markdown": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use sanitize statements like so: `escaped = client.escape(user_input)`\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://github.com/brianmario/mysql2](https://github.com/brianmario/mysql2)\n",
                "text": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use sanitize statements like so: `escaped = client.escape(user_input)`"
              },
              "id": "codacy.tools-configs.ruby.aws-lambda.security.mysql2-sqli.mysql2-sqli",
              "name": "codacy.tools-configs.ruby.aws-lambda.security.mysql2-sqli.mysql2-sqli",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.aws-lambda.security.mysql2-sqli.mysql2-sqli"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `conn.exec_params('SELECT $1 AS a, $2 AS b, $3 AS c', [1, 2, nil])`"
              },
              "help": {
                "markdown": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `conn.exec_params('SELECT $1 AS a, $2 AS b, $3 AS c', [1, 2, nil])`\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.rubydoc.info/gems/pg/PG/Connection](https://www.rubydoc.info/gems/pg/PG/Connection)\n",
                "text": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `conn.exec_params('SELECT $1 AS a, $2 AS b, $3 AS c', [1, 2, nil])`"
              },
              "id": "codacy.tools-configs.ruby.aws-lambda.security.pg-sqli.pg-sqli",
              "name": "codacy.tools-configs.ruby.aws-lambda.security.pg-sqli.pg-sqli",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.aws-lambda.security.pg-sqli.pg-sqli"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `DB['select * from items where name = ?', name]`"
              },
              "help": {
                "markdown": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `DB['select * from items where name = ?', name]`\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://github.com/jeremyevans/sequel#label-Arbitrary+SQL+queries](https://github.com/jeremyevans/sequel#label-Arbitrary+SQL+queries)\n",
                "text": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `DB['select * from items where name = ?', name]`"
              },
              "id": "codacy.tools-configs.ruby.aws-lambda.security.sequel-sqli.sequel-sqli",
              "name": "codacy.tools-configs.ruby.aws-lambda.security.sequel-sqli.sequel-sqli",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.aws-lambda.security.sequel-sqli.sequel-sqli"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Deserialization of a string tainted by `event` object found. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of `load` can cause remote code execution. Loading user input with MARSHAL, YAML or CSV can potentially be dangerous. If you need to deserialize untrusted data, you should use JSON as it is only capable of returning 'primitive' types such as strings, arrays, hashes, numbers and nil."
              },
              "help": {
                "markdown": "Deserialization of a string tainted by `event` object found. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of `load` can cause remote code execution. Loading user input with MARSHAL, YAML or CSV can potentially be dangerous. If you need to deserialize untrusted data, you should use JSON as it is only capable of returning 'primitive' types such as strings, arrays, hashes, numbers and nil.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://ruby-doc.org/core-3.1.2/doc/security_rdoc.html](https://ruby-doc.org/core-3.1.2/doc/security_rdoc.html)\n - [https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ](https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ)\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb)\n",
                "text": "Deserialization of a string tainted by `event` object found. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of `load` can cause remote code execution. Loading user input with MARSHAL, YAML or CSV can potentially be dangerous. If you need to deserialize untrusted data, you should use JSON as it is only capable of returning 'primitive' types such as strings, arrays, hashes, numbers and nil."
              },
              "id": "codacy.tools-configs.ruby.aws-lambda.security.tainted-deserialization.tainted-deserialization",
              "name": "codacy.tools-configs.ruby.aws-lambda.security.tainted-deserialization.tainted-deserialization",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-502: Deserialization of Untrusted Data",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A08:2017 - Insecure Deserialization",
                  "OWASP-A08:2021 - Software and Data Integrity Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.aws-lambda.security.tainted-deserialization.tainted-deserialization"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."
              },
              "help": {
                "markdown": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://rorsecurity.info/portfolio/ruby-on-rails-sql-injection-cheat-sheet](https://rorsecurity.info/portfolio/ruby-on-rails-sql-injection-cheat-sheet)\n",
                "text": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."
              },
              "id": "codacy.tools-configs.ruby.aws-lambda.security.tainted-sql-string.tainted-sql-string",
              "name": "codacy.tools-configs.ruby.aws-lambda.security.tainted-sql-string.tainted-sql-string",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.aws-lambda.security.tainted-sql-string.tainted-sql-string"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Checks for unsafe deserialization. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of load and object_load can cause remote code execution. Loading user input with MARSHAL or CSV can potentially be dangerous. Use JSON in a secure fashion instead."
              },
              "help": {
                "markdown": "Checks for unsafe deserialization. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of load and object_load can cause remote code execution. Loading user input with MARSHAL or CSV can potentially be dangerous. Use JSON in a secure fashion instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ](https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ)\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb)\n",
                "text": "Checks for unsafe deserialization. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of load and object_load can cause remote code execution. Loading user input with MARSHAL or CSV can potentially be dangerous. Use JSON in a secure fashion instead."
              },
              "id": "codacy.tools-configs.ruby.lang.security.bad-deserialization.bad-deserialization",
              "name": "codacy.tools-configs.ruby.lang.security.bad-deserialization.bad-deserialization",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-502: Deserialization of Untrusted Data",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A08:2017 - Insecure Deserialization",
                  "OWASP-A08:2021 - Software and Data Integrity Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.lang.security.bad-deserialization.bad-deserialization"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected non-static command inside $EXEC. Audit the input to '$EXEC'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code."
              },
              "help": {
                "markdown": "Detected non-static command inside $EXEC. Audit the input to '$EXEC'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_execute.rb)\n - [https://guides.rubyonrails.org/security.html#command-line-injection](https://guides.rubyonrails.org/security.html#command-line-injection)\n",
                "text": "Detected non-static command inside $EXEC. Audit the input to '$EXEC'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code."
              },
              "helpUri": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_execute.rb",
              "id": "codacy.tools-configs.ruby.lang.security.dangerous-exec.dangerous-exec",
              "name": "codacy.tools-configs.ruby.lang.security.dangerous-exec.dangerous-exec",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-94: Improper Control of Generation of Code ('Code Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.lang.security.dangerous-exec.dangerous-exec"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected a possible ZeroDivisionError."
              },
              "help": {
                "markdown": "Detected a possible ZeroDivisionError.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_divide_by_zero.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_divide_by_zero.rb)\n",
                "text": "Detected a possible ZeroDivisionError."
              },
              "id": "codacy.tools-configs.ruby.lang.security.divide-by-zero.divide-by-zero",
              "name": "codacy.tools-configs.ruby.lang.security.divide-by-zero.divide-by-zero",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-369: Divide By Zero",
                  "MEDIUM CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.lang.security.divide-by-zero.divide-by-zero"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Checks for configuration setting of force_ssl to false. Force_ssl forces usage of HTTPS, which could lead to network interception of unencrypted application traffic. To fix, set config.force_ssl = true."
              },
              "help": {
                "markdown": "Checks for configuration setting of force_ssl to false. Force_ssl forces usage of HTTPS, which could lead to network interception of unencrypted application traffic. To fix, set config.force_ssl = true.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_force_ssl.rb](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_force_ssl.rb)\n",
                "text": "Checks for configuration setting of force_ssl to false. Force_ssl forces usage of HTTPS, which could lead to network interception of unencrypted application traffic. To fix, set config.force_ssl = true."
              },
              "id": "codacy.tools-configs.ruby.lang.security.force-ssl-false.force-ssl-false",
              "name": "codacy.tools-configs.ruby.lang.security.force-ssl-false.force-ssl-false",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-311: Missing Encryption of Sensitive Data",
                  "HIGH CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.lang.security.force-ssl-false.force-ssl-false"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected hardcoded password used in basic authentication in a controller class. Including this password in version control could expose this credential. Consider refactoring to use environment variables or configuration files."
              },
              "help": {
                "markdown": "Detected hardcoded password used in basic authentication in a controller class. Including this password in version control could expose this credential. Consider refactoring to use environment variables or configuration files.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/basic_auth/index.markdown)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n",
                "text": "Detected hardcoded password used in basic authentication in a controller class. Including this password in version control could expose this credential. Consider refactoring to use environment variables or configuration files."
              },
              "helpUri": "https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/basic_auth/index.markdown",
              "id": "codacy.tools-configs.ruby.lang.security.hardcoded-http-auth-in-controller.hardcoded-http-auth-in-controller",
              "name": "codacy.tools-configs.ruby.lang.security.hardcoded-http-auth-in-controller.hardcoded-http-auth-in-controller",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-798: Use of Hard-coded Credentials",
                  "HIGH CONFIDENCE",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.lang.security.hardcoded-http-auth-in-controller.hardcoded-http-auth-in-controller"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found the use of an hardcoded passphrase for RSA. The passphrase can be easily discovered, and therefore should not be stored in source-code. It is recommended to remove the passphrase from source-code, and use system environment variables or a restricted configuration file."
              },
              "help": {
                "markdown": "Found the use of an hardcoded passphrase for RSA. The passphrase can be easily discovered, and therefore should not be stored in source-code. It is recommended to remove the passphrase from source-code, and use system environment variables or a restricted configuration file.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cwe.mitre.org/data/definitions/522.html](https://cwe.mitre.org/data/definitions/522.html)\n",
                "text": "Found the use of an hardcoded passphrase for RSA. The passphrase can be easily discovered, and therefore should not be stored in source-code. It is recommended to remove the passphrase from source-code, and use system environment variables or a restricted configuration file."
              },
              "id": "codacy.tools-configs.ruby.lang.security.hardcoded-secret-rsa-passphrase.hardcoded-secret-rsa-passphrase",
              "name": "codacy.tools-configs.ruby.lang.security.hardcoded-secret-rsa-passphrase.hardcoded-secret-rsa-passphrase",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-798: Use of Hard-coded Credentials",
                  "HIGH CONFIDENCE",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.lang.security.hardcoded-secret-rsa-passphrase.hardcoded-secret-rsa-passphrase"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The RSA key size $SIZE is insufficent by NIST standards. It is recommended to use a key length of 2048 or higher."
              },
              "help": {
                "markdown": "The RSA key size $SIZE is insufficent by NIST standards. It is recommended to use a key length of 2048 or higher.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf)\n",
                "text": "The RSA key size $SIZE is insufficent by NIST standards. It is recommended to use a key length of 2048 or higher."
              },
              "id": "codacy.tools-configs.ruby.lang.security.insufficient-rsa-key-size.insufficient-rsa-key-size",
              "name": "codacy.tools-configs.ruby.lang.security.insufficient-rsa-key-size.insufficient-rsa-key-size",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.lang.security.insufficient-rsa-key-size.insufficient-rsa-key-size"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Instead, use a suitable password hashing function such as bcrypt. You can use the `bcrypt` gem."
              },
              "help": {
                "markdown": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Instead, use a suitable password hashing function such as bcrypt. You can use the `bcrypt` gem.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html](https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html)\n - [https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords](https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords)\n - [https://github.com/returntocorp/semgrep-rules/issues/1609](https://github.com/returntocorp/semgrep-rules/issues/1609)\n",
                "text": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Instead, use a suitable password hashing function such as bcrypt. You can use the `bcrypt` gem."
              },
              "id": "codacy.tools-configs.ruby.lang.security.md5-used-as-password.md5-used-as-password",
              "name": "codacy.tools-configs.ruby.lang.security.md5-used-as-password.md5-used-as-password",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.lang.security.md5-used-as-password.md5-used-as-password"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Use of eval with user-controllable input detected. This can lead  to attackers running arbitrary code. Ensure external data does not  reach here, otherwise this is a security vulnerability. Consider  other ways to do this without eval."
              },
              "help": {
                "markdown": "Use of eval with user-controllable input detected. This can lead  to attackers running arbitrary code. Ensure external data does not  reach here, otherwise this is a security vulnerability. Consider  other ways to do this without eval.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_evaluation.rb)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
                "text": "Use of eval with user-controllable input detected. This can lead  to attackers running arbitrary code. Ensure external data does not  reach here, otherwise this is a security vulnerability. Consider  other ways to do this without eval."
              },
              "helpUri": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_evaluation.rb",
              "id": "codacy.tools-configs.ruby.lang.security.no-eval.ruby-eval",
              "name": "codacy.tools-configs.ruby.lang.security.no-eval.ruby-eval",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-94: Improper Control of Generation of Code ('Code Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.lang.security.no-eval.ruby-eval"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected SSL that will accept an unverified connection. This makes the connections susceptible to man-in-the-middle attacks. Use 'OpenSSL::SSL::VERIFY_PEER' instead."
              },
              "help": {
                "markdown": "Detected SSL that will accept an unverified connection. This makes the connections susceptible to man-in-the-middle attacks. Use 'OpenSSL::SSL::VERIFY_PEER' instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures)\n",
                "text": "Detected SSL that will accept an unverified connection. This makes the connections susceptible to man-in-the-middle attacks. Use 'OpenSSL::SSL::VERIFY_PEER' instead."
              },
              "id": "codacy.tools-configs.ruby.lang.security.ssl-mode-no-verify.ssl-mode-no-verify",
              "name": "codacy.tools-configs.ruby.lang.security.ssl-mode-no-verify.ssl-mode-no-verify",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-295: Improper Certificate Validation",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.lang.security.ssl-mode-no-verify.ssl-mode-no-verify"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Should not use md5 to generate hashes. md5 is proven to be vulnerable through the use of brute-force attacks. Could also result in collisions, leading to potential collision attacks. Use SHA256 or other hashing functions instead."
              },
              "help": {
                "markdown": "Should not use md5 to generate hashes. md5 is proven to be vulnerable through the use of brute-force attacks. Could also result in collisions, leading to potential collision attacks. Use SHA256 or other hashing functions instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.ibm.com/support/pages/security-bulletin-vulnerability-md5-signature-and-hash-algorithm-affects-sterling-integrator-and-sterling-file-gateway-cve-2015-7575](https://www.ibm.com/support/pages/security-bulletin-vulnerability-md5-signature-and-hash-algorithm-affects-sterling-integrator-and-sterling-file-gateway-cve-2015-7575)\n",
                "text": "Should not use md5 to generate hashes. md5 is proven to be vulnerable through the use of brute-force attacks. Could also result in collisions, leading to potential collision attacks. Use SHA256 or other hashing functions instead."
              },
              "id": "codacy.tools-configs.ruby.lang.security.weak-hashes-md5.weak-hashes-md5",
              "name": "codacy.tools-configs.ruby.lang.security.weak-hashes-md5.weak-hashes-md5",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-328: Use of Weak Hash",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.lang.security.weak-hashes-md5.weak-hashes-md5"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Should not use SHA1 to generate hashes. There is a proven SHA1 hash collision by Google, which could lead to vulnerabilities. Use SHA256, SHA3 or other hashing functions instead."
              },
              "help": {
                "markdown": "Should not use SHA1 to generate hashes. There is a proven SHA1 hash collision by Google, which could lead to vulnerabilities. Use SHA256, SHA3 or other hashing functions instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html](https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html)\n - [https://shattered.io/](https://shattered.io/)\n",
                "text": "Should not use SHA1 to generate hashes. There is a proven SHA1 hash collision by Google, which could lead to vulnerabilities. Use SHA256, SHA3 or other hashing functions instead."
              },
              "id": "codacy.tools-configs.ruby.lang.security.weak-hashes-sha1.weak-hashes-sha1",
              "name": "codacy.tools-configs.ruby.lang.security.weak-hashes-sha1.weak-hashes-sha1",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-328: Use of Weak Hash",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.lang.security.weak-hashes-sha1.weak-hashes-sha1"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "This gets data from session using user inputs. A malicious user may be able to retrieve information from your session that you didn't intend them to. Do not use user input as a session key."
              },
              "help": {
                "markdown": "## Remediation\nSession manipulation can occur when an application allows user-input in session keys. Since sessions are typically considered a source of truth (e.g. to check the logged-in user or to match CSRF tokens), allowing an attacker to manipulate the session may lead to unintended behavior.\n\n## References\n[Session Manipulation](https://brakemanscanner.org/docs/warning_types/session_manipulation/)\n\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://brakemanscanner.org/docs/warning_types/session_manipulation/](https://brakemanscanner.org/docs/warning_types/session_manipulation/)\n",
                "text": "## Remediation\nSession manipulation can occur when an application allows user-input in session keys. Since sessions are typically considered a source of truth (e.g. to check the logged-in user or to match CSRF tokens), allowing an attacker to manipulate the session may lead to unintended behavior.\n\n## References\n[Session Manipulation](https://brakemanscanner.org/docs/warning_types/session_manipulation/)\n"
              },
              "id": "codacy.tools-configs.ruby.rails.security.audit.avoid-session-manipulation.avoid-session-manipulation",
              "name": "codacy.tools-configs.ruby.rails.security.audit.avoid-session-manipulation.avoid-session-manipulation",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-276: Incorrect Default Permissions",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Allowing an attacker to manipulate the session may lead to unintended behavior."
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to."
              },
              "help": {
                "markdown": "Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown](https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown)\n",
                "text": "Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to."
              },
              "id": "codacy.tools-configs.ruby.rails.security.audit.avoid-tainted-file-access.avoid-tainted-file-access",
              "name": "codacy.tools-configs.ruby.rails.security.audit.avoid-tainted-file-access.avoid-tainted-file-access",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "OWASP-A05:2017 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.rails.security.audit.avoid-tainted-file-access.avoid-tainted-file-access"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to."
              },
              "help": {
                "markdown": "Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown](https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown)\n",
                "text": "Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to."
              },
              "id": "codacy.tools-configs.ruby.rails.security.audit.avoid-tainted-ftp-call.avoid-tainted-ftp-call",
              "name": "codacy.tools-configs.ruby.rails.security.audit.avoid-tainted-ftp-call.avoid-tainted-ftp-call",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "OWASP-A05:2017 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.rails.security.audit.avoid-tainted-ftp-call.avoid-tainted-ftp-call"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to."
              },
              "help": {
                "markdown": "Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown](https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown)\n",
                "text": "Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to."
              },
              "id": "codacy.tools-configs.ruby.rails.security.audit.avoid-tainted-http-request.avoid-tainted-http-request",
              "name": "codacy.tools-configs.ruby.rails.security.audit.avoid-tainted-http-request.avoid-tainted-http-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-918: Server-Side Request Forgery (SSRF)",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A10:2021 - Server-Side Request Forgery (SSRF)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.rails.security.audit.avoid-tainted-http-request.avoid-tainted-http-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to."
              },
              "help": {
                "markdown": "Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown](https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown)\n",
                "text": "Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to."
              },
              "id": "codacy.tools-configs.ruby.rails.security.audit.avoid-tainted-shell-call.avoid-tainted-shell-call",
              "name": "codacy.tools-configs.ruby.rails.security.audit.avoid-tainted-shell-call.avoid-tainted-shell-call",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.rails.security.audit.avoid-tainted-shell-call.avoid-tainted-shell-call"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected string concatenation with a non-literal variable in a pg Ruby SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized queries like so: `conn.exec_params('SELECT $1 AS a, $2 AS b, $3 AS c', [1, 2, nil])` And you can use prepared statements with `exec_prepared`."
              },
              "help": {
                "markdown": "Detected string concatenation with a non-literal variable in a pg Ruby SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized queries like so: `conn.exec_params('SELECT $1 AS a, $2 AS b, $3 AS c', [1, 2, nil])` And you can use prepared statements with `exec_prepared`.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.rubydoc.info/gems/pg/PG/Connection](https://www.rubydoc.info/gems/pg/PG/Connection)\n",
                "text": "Detected string concatenation with a non-literal variable in a pg Ruby SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized queries like so: `conn.exec_params('SELECT $1 AS a, $2 AS b, $3 AS c', [1, 2, nil])` And you can use prepared statements with `exec_prepared`."
              },
              "id": "codacy.tools-configs.ruby.rails.security.audit.sqli.ruby-pg-sqli.ruby-pg-sqli",
              "name": "codacy.tools-configs.ruby.rails.security.audit.sqli.ruby-pg-sqli.ruby-pg-sqli",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.rails.security.audit.sqli.ruby-pg-sqli.ruby-pg-sqli"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "This code includes user input in `link_to`. In Rails 2.x, the body of `link_to` is not escaped. This means that user input which reaches the body will be executed when the HTML is rendered. Even in other versions, values starting with `javascript:` or `data:` are not escaped. It is better to create and use a safer function which checks the body argument."
              },
              "help": {
                "markdown": "This code includes user input in `link_to`. In Rails 2.x, the body of `link_to` is not escaped. This means that user input which reaches the body will be executed when the HTML is rendered. Even in other versions, values starting with `javascript:` or `data:` are not escaped. It is better to create and use a safer function which checks the body argument.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_link_to.rb)\n - [https://brakemanscanner.org/docs/warning_types/link_to/](https://brakemanscanner.org/docs/warning_types/link_to/)\n - [https://brakemanscanner.org/docs/warning_types/link_to_href/](https://brakemanscanner.org/docs/warning_types/link_to_href/)\n",
                "text": "This code includes user input in `link_to`. In Rails 2.x, the body of `link_to` is not escaped. This means that user input which reaches the body will be executed when the HTML is rendered. Even in other versions, values starting with `javascript:` or `data:` are not escaped. It is better to create and use a safer function which checks the body argument."
              },
              "helpUri": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_link_to.rb",
              "id": "codacy.tools-configs.ruby.rails.security.audit.xss.avoid-link-to.avoid-link-to",
              "name": "codacy.tools-configs.ruby.rails.security.audit.xss.avoid-link-to.avoid-link-to",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.rails.security.audit.xss.avoid-link-to.avoid-link-to"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "When a redirect uses user input, a malicious user can spoof a website under a trusted URL or access restricted parts of a site. When using user-supplied values, sanitize the value before using it for the redirect."
              },
              "help": {
                "markdown": "When a redirect uses user input, a malicious user can spoof a website under a trusted URL or access restricted parts of a site. When using user-supplied values, sanitize the value before using it for the redirect.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://brakemanscanner.org/docs/warning_types/redirect/](https://brakemanscanner.org/docs/warning_types/redirect/)\n",
                "text": "When a redirect uses user input, a malicious user can spoof a website under a trusted URL or access restricted parts of a site. When using user-supplied values, sanitize the value before using it for the redirect."
              },
              "id": "codacy.tools-configs.ruby.rails.security.audit.xss.avoid-redirect.avoid-redirect",
              "name": "codacy.tools-configs.ruby.rails.security.audit.xss.avoid-redirect.avoid-redirect",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.rails.security.audit.xss.avoid-redirect.avoid-redirect"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Avoid rendering user input. It may be possible for a malicious user to input a path that lets them access a template they shouldn't. To prevent this, check dynamic template paths against a predefined allowlist to make sure it's an allowed template."
              },
              "help": {
                "markdown": "Avoid rendering user input. It may be possible for a malicious user to input a path that lets them access a template they shouldn't. To prevent this, check dynamic template paths against a predefined allowlist to make sure it's an allowed template.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://brakemanscanner.org/docs/warning_types/dynamic_render_paths/](https://brakemanscanner.org/docs/warning_types/dynamic_render_paths/)\n",
                "text": "Avoid rendering user input. It may be possible for a malicious user to input a path that lets them access a template they shouldn't. To prevent this, check dynamic template paths against a predefined allowlist to make sure it's an allowed template."
              },
              "id": "codacy.tools-configs.ruby.rails.security.audit.xss.avoid-render-dynamic-path.avoid-render-dynamic-path",
              "name": "codacy.tools-configs.ruby.rails.security.audit.xss.avoid-render-dynamic-path.avoid-render-dynamic-path",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "OWASP-A05:2017 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.rails.security.audit.xss.avoid-render-dynamic-path.avoid-render-dynamic-path"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Disabled-by-default Rails controller checks make it much easier to introduce access control mistakes. Prefer an allowlist approach with `:only =\u003e [...]` rather than `except: =\u003e [...]`"
              },
              "help": {
                "markdown": "Disabled-by-default Rails controller checks make it much easier to introduce access control mistakes. Prefer an allowlist approach with `:only =\u003e [...]` rather than `except: =\u003e [...]`\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_skip_before_filter.rb)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n",
                "text": "Disabled-by-default Rails controller checks make it much easier to introduce access control mistakes. Prefer an allowlist approach with `:only =\u003e [...]` rather than `except: =\u003e [...]`"
              },
              "helpUri": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_skip_before_filter.rb",
              "id": "codacy.tools-configs.ruby.rails.security.brakeman.check-before-filter.check-before-filter",
              "name": "codacy.tools-configs.ruby.rails.security.brakeman.check-before-filter.check-before-filter",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-284: Improper Access Control",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "OWASP-A05:2017 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.rails.security.brakeman.check-before-filter.check-before-filter"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found request parameters in a call to `render` in a dynamic context. This can allow end users to request arbitrary local files which may result in leaking sensitive information persisted on disk."
              },
              "help": {
                "markdown": "Found request parameters in a call to `render` in a dynamic context. This can allow end users to request arbitrary local files which may result in leaking sensitive information persisted on disk.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_render.rb)\n - [https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion](https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion)\n - [https://github.com/presidentbeef/brakeman/blob/f74cb53ead47f0af821d98b5b41e16d63100c240/test/apps/rails2/app/views/home/test_render.html.erb](https://github.com/presidentbeef/brakeman/blob/f74cb53ead47f0af821d98b5b41e16d63100c240/test/apps/rails2/app/views/home/test_render.html.erb)\n",
                "text": "Found request parameters in a call to `render` in a dynamic context. This can allow end users to request arbitrary local files which may result in leaking sensitive information persisted on disk."
              },
              "helpUri": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_render.rb",
              "id": "codacy.tools-configs.ruby.rails.security.brakeman.check-dynamic-render-local-file-include.check-dynamic-render-local-file-include",
              "name": "codacy.tools-configs.ruby.rails.security.brakeman.check-dynamic-render-local-file-include.check-dynamic-render-local-file-include",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "OWASP-A05:2017 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.rails.security.brakeman.check-dynamic-render-local-file-include.check-dynamic-render-local-file-include"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Found an improperly constructed control flow block with `request.get?`. Rails will route HEAD requests as GET requests but they will fail the `request.get?` check, potentially causing unexpected behavior unless an `elif` condition is used."
              },
              "help": {
                "markdown": "Found an improperly constructed control flow block with `request.get?`. Rails will route HEAD requests as GET requests but they will fail the `request.get?` check, potentially causing unexpected behavior unless an `elif` condition is used.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_verb_confusion.rb)\n - [https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails6/app/controllers/accounts_controller.rb](https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails6/app/controllers/accounts_controller.rb)\n",
                "text": "Found an improperly constructed control flow block with `request.get?`. Rails will route HEAD requests as GET requests but they will fail the `request.get?` check, potentially causing unexpected behavior unless an `elif` condition is used."
              },
              "helpUri": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_verb_confusion.rb",
              "id": "codacy.tools-configs.ruby.rails.security.brakeman.check-http-verb-confusion.check-http-verb-confusion",
              "name": "codacy.tools-configs.ruby.rails.security.brakeman.check-http-verb-confusion.check-http-verb-confusion",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-650: Trusting HTTP Permission Methods on the Server Side",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.rails.security.brakeman.check-http-verb-confusion.check-http-verb-confusion"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found a string literal assignment to a Rails session secret `$KEY`. Do not commit secret values to source control! Any user in possession of this value may falsify arbitrary session data in your application. Read this value from an environment variable, KMS, or file on disk outside of source control."
              },
              "help": {
                "markdown": "Found a string literal assignment to a Rails session secret `$KEY`. Do not commit secret values to source control! Any user in possession of this value may falsify arbitrary session data in your application. Read this value from an environment variable, KMS, or file on disk outside of source control.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_session_settings.rb)\n - [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes)\n - [https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails4_with_engines/config/initializers/secret_token.rb](https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails4_with_engines/config/initializers/secret_token.rb)\n - [https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3/config/initializers/secret_token.rb](https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3/config/initializers/secret_token.rb)\n",
                "text": "Found a string literal assignment to a Rails session secret `$KEY`. Do not commit secret values to source control! Any user in possession of this value may falsify arbitrary session data in your application. Read this value from an environment variable, KMS, or file on disk outside of source control."
              },
              "helpUri": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_session_settings.rb",
              "id": "codacy.tools-configs.ruby.rails.security.brakeman.check-rails-session-secret-handling.check-rails-session-secret-handling",
              "name": "codacy.tools-configs.ruby.rails.security.brakeman.check-rails-session-secret-handling.check-rails-session-secret-handling",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-540: Inclusion of Sensitive Information in Source Code",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.rails.security.brakeman.check-rails-session-secret-handling.check-rails-session-secret-handling"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found potentially unsafe handling of redirect behavior $X. Do not pass `params` to `redirect_to` without the `:only_path =\u003e true` hash value."
              },
              "help": {
                "markdown": "Found potentially unsafe handling of redirect behavior $X. Do not pass `params` to `redirect_to` without the `:only_path =\u003e true` hash value.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_redirect.rb)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)\n",
                "text": "Found potentially unsafe handling of redirect behavior $X. Do not pass `params` to `redirect_to` without the `:only_path =\u003e true` hash value."
              },
              "helpUri": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_redirect.rb",
              "id": "codacy.tools-configs.ruby.rails.security.brakeman.check-redirect-to.check-redirect-to",
              "name": "codacy.tools-configs.ruby.rails.security.brakeman.check-redirect-to.check-redirect-to",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.rails.security.brakeman.check-redirect-to.check-redirect-to"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Found a potentially user-controllable argument in the construction of a regular expressions. This may result in excessive resource consumption when applied to certain inputs, or when the user is allowed to control the match target. Avoid allowing users to specify regular expressions processed by the server. If you must support user-controllable input in a regular expression, use an allow-list to restrict the expressions users may supply to limit catastrophic backtracking."
              },
              "help": {
                "markdown": "Found a potentially user-controllable argument in the construction of a regular expressions. This may result in excessive resource consumption when applied to certain inputs, or when the user is allowed to control the match target. Avoid allowing users to specify regular expressions processed by the server. If you must support user-controllable input in a regular expression, use an allow-list to restrict the expressions users may supply to limit catastrophic backtracking.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_regex_dos.rb)\n - [https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)\n",
                "text": "Found a potentially user-controllable argument in the construction of a regular expressions. This may result in excessive resource consumption when applied to certain inputs, or when the user is allowed to control the match target. Avoid allowing users to specify regular expressions processed by the server. If you must support user-controllable input in a regular expression, use an allow-list to restrict the expressions users may supply to limit catastrophic backtracking."
              },
              "helpUri": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_regex_dos.rb",
              "id": "codacy.tools-configs.ruby.rails.security.brakeman.check-regex-dos.check-regex-dos",
              "name": "codacy.tools-configs.ruby.rails.security.brakeman.check-regex-dos.check-regex-dos",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-1333: Inefficient Regular Expression Complexity",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.rails.security.brakeman.check-regex-dos.check-regex-dos"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found request parameters in a call to `render`. This can allow end users to request arbitrary local files which may result in leaking sensitive information persisted on disk. Where possible, avoid letting users specify template paths for `render`. If you must allow user input, use an allow-list of known templates or normalize the user-supplied value with `File.basename(...)`."
              },
              "help": {
                "markdown": "Found request parameters in a call to `render`. This can allow end users to request arbitrary local files which may result in leaking sensitive information persisted on disk. Where possible, avoid letting users specify template paths for `render`. If you must allow user input, use an allow-list of known templates or normalize the user-supplied value with `File.basename(...)`.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_render.rb)\n - [https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion](https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion)\n - [https://github.com/presidentbeef/brakeman/blob/f74cb53/test/apps/rails2/app/controllers/home_controller.rb#L48-L60](https://github.com/presidentbeef/brakeman/blob/f74cb53/test/apps/rails2/app/controllers/home_controller.rb#L48-L60)\n",
                "text": "Found request parameters in a call to `render`. This can allow end users to request arbitrary local files which may result in leaking sensitive information persisted on disk. Where possible, avoid letting users specify template paths for `render`. If you must allow user input, use an allow-list of known templates or normalize the user-supplied value with `File.basename(...)`."
              },
              "helpUri": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_render.rb",
              "id": "codacy.tools-configs.ruby.rails.security.brakeman.check-render-local-file-include.check-render-local-file-include",
              "name": "codacy.tools-configs.ruby.rails.security.brakeman.check-render-local-file-include.check-render-local-file-include",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "OWASP-A05:2017 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.rails.security.brakeman.check-render-local-file-include.check-render-local-file-include"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows reverse tabnabbing on Internet Explorer, Opera, and Android Webview."
              },
              "help": {
                "markdown": "Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows reverse tabnabbing on Internet Explorer, Opera, and Android Webview.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_reverse_tabnabbing.rb)\n - [https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#browser_compatibility](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#browser_compatibility)\n - [https://github.com/presidentbeef/brakeman/blob/3f5d5d5/test/apps/rails5/app/views/users/show.html.erb](https://github.com/presidentbeef/brakeman/blob/3f5d5d5/test/apps/rails5/app/views/users/show.html.erb)\n",
                "text": "Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows reverse tabnabbing on Internet Explorer, Opera, and Android Webview."
              },
              "helpUri": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_reverse_tabnabbing.rb",
              "id": "codacy.tools-configs.ruby.rails.security.brakeman.check-reverse-tabnabbing.check-reverse-tabnabbing",
              "name": "codacy.tools-configs.ruby.rails.security.brakeman.check-reverse-tabnabbing.check-reverse-tabnabbing",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-1022: Use of Web Link to Untrusted Target with window.opener Access",
                  "MEDIUM CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.rails.security.brakeman.check-reverse-tabnabbing.check-reverse-tabnabbing"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found a Brakeman-style secret - a variable with the name password/secret/api_key/rest_auth_site_key and a non-empty string literal value."
              },
              "help": {
                "markdown": "Found a Brakeman-style secret - a variable with the name password/secret/api_key/rest_auth_site_key and a non-empty string literal value.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_secrets.rb)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n - [https://github.com/presidentbeef/brakeman/blob/3f5d5d5f00864cdf7769c50f5bd26f1769a4ba75/test/apps/rails3.1/app/controllers/users_controller.rb](https://github.com/presidentbeef/brakeman/blob/3f5d5d5f00864cdf7769c50f5bd26f1769a4ba75/test/apps/rails3.1/app/controllers/users_controller.rb)\n",
                "text": "Found a Brakeman-style secret - a variable with the name password/secret/api_key/rest_auth_site_key and a non-empty string literal value."
              },
              "helpUri": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_secrets.rb",
              "id": "codacy.tools-configs.ruby.rails.security.brakeman.check-secrets.check-secrets",
              "name": "codacy.tools-configs.ruby.rails.security.brakeman.check-secrets.check-secrets",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.rails.security.brakeman.check-secrets.check-secrets"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Allowing user input to `send_file` allows a malicious user to potentially read arbitrary files from the server. Avoid accepting user input in `send_file` or normalize with `File.basename(...)`"
              },
              "help": {
                "markdown": "Allowing user input to `send_file` allows a malicious user to potentially read arbitrary files from the server. Avoid accepting user input in `send_file` or normalize with `File.basename(...)`\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_send_file.rb)\n - [https://owasp.org/www-community/attacks/Path_Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control/](https://owasp.org/Top10/A01_2021-Broken_Access_Control/)\n",
                "text": "Allowing user input to `send_file` allows a malicious user to potentially read arbitrary files from the server. Avoid accepting user input in `send_file` or normalize with `File.basename(...)`"
              },
              "helpUri": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_send_file.rb",
              "id": "codacy.tools-configs.ruby.rails.security.brakeman.check-send-file.check-send-file",
              "name": "codacy.tools-configs.ruby.rails.security.brakeman.check-send-file.check-send-file",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-73: External Control of File Name or Path",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.rails.security.brakeman.check-send-file.check-send-file"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Found potential SQL injection due to unsafe SQL query construction via $X. Where possible, prefer parameterized queries."
              },
              "help": {
                "markdown": "Found potential SQL injection due to unsafe SQL query construction via $X. Where possible, prefer parameterized queries.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_sql.rb)\n - [https://owasp.org/www-community/attacks/SQL_Injection](https://owasp.org/www-community/attacks/SQL_Injection)\n - [https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3.1/app/models/product.rb](https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3.1/app/models/product.rb)\n",
                "text": "Found potential SQL injection due to unsafe SQL query construction via $X. Where possible, prefer parameterized queries."
              },
              "helpUri": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_sql.rb",
              "id": "codacy.tools-configs.ruby.rails.security.brakeman.check-sql.check-sql",
              "name": "codacy.tools-configs.ruby.rails.security.brakeman.check-sql.check-sql",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.rails.security.brakeman.check-sql.check-sql"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Found user-controllable input to a reflection method. This may allow a user to alter program behavior and potentially execute arbitrary instructions in the context of the process. Do not provide arbitrary user input to `tap`, `method`, or `to_proc`"
              },
              "help": {
                "markdown": "Found user-controllable input to a reflection method. This may allow a user to alter program behavior and potentially execute arbitrary instructions in the context of the process. Do not provide arbitrary user input to `tap`, `method`, or `to_proc`\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_unsafe_reflection_methods.rb)\n - [https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails6/app/controllers/groups_controller.rb](https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails6/app/controllers/groups_controller.rb)\n",
                "text": "Found user-controllable input to a reflection method. This may allow a user to alter program behavior and potentially execute arbitrary instructions in the context of the process. Do not provide arbitrary user input to `tap`, `method`, or `to_proc`"
              },
              "helpUri": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_unsafe_reflection_methods.rb",
              "id": "codacy.tools-configs.ruby.rails.security.brakeman.check-unsafe-reflection-methods.check-unsafe-reflection-methods",
              "name": "codacy.tools-configs.ruby.rails.security.brakeman.check-unsafe-reflection-methods.check-unsafe-reflection-methods",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-94: Improper Control of Generation of Code ('Code Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.rails.security.brakeman.check-unsafe-reflection-methods.check-unsafe-reflection-methods"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Found user-controllable input to Ruby reflection functionality. This allows a remote user to influence runtime behavior, up to and including arbitrary remote code execution. Do not provide user-controllable input to reflection functionality. Do not call symbol conversion on user-controllable input."
              },
              "help": {
                "markdown": "Found user-controllable input to Ruby reflection functionality. This allows a remote user to influence runtime behavior, up to and including arbitrary remote code execution. Do not provide user-controllable input to reflection functionality. Do not call symbol conversion on user-controllable input.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_unsafe_reflection.rb)\n - [https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails2/app/controllers/application_controller.rb](https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails2/app/controllers/application_controller.rb)\n",
                "text": "Found user-controllable input to Ruby reflection functionality. This allows a remote user to influence runtime behavior, up to and including arbitrary remote code execution. Do not provide user-controllable input to reflection functionality. Do not call symbol conversion on user-controllable input."
              },
              "helpUri": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_unsafe_reflection.rb",
              "id": "codacy.tools-configs.ruby.rails.security.brakeman.check-unsafe-reflection.check-unsafe-reflection",
              "name": "codacy.tools-configs.ruby.rails.security.brakeman.check-unsafe-reflection.check-unsafe-reflection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-94: Improper Control of Generation of Code ('Code Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.rails.security.brakeman.check-unsafe-reflection.check-unsafe-reflection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Found an unscoped `find(...)` with user-controllable input. If the ActiveRecord model being searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR) behavior and allow users to read arbitrary records. Scope the find to the current user, e.g. `current_user.accounts.find(params[:id])`."
              },
              "help": {
                "markdown": "Found an unscoped `find(...)` with user-controllable input. If the ActiveRecord model being searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR) behavior and allow users to read arbitrary records. Scope the find to the current user, e.g. `current_user.accounts.find(params[:id])`.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_unscoped_find.rb)\n - [https://brakemanscanner.org/docs/warning_types/unscoped_find/](https://brakemanscanner.org/docs/warning_types/unscoped_find/)\n - [https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3.1/app/controllers/users_controller.rb](https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3.1/app/controllers/users_controller.rb)\n",
                "text": "Found an unscoped `find(...)` with user-controllable input. If the ActiveRecord model being searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR) behavior and allow users to read arbitrary records. Scope the find to the current user, e.g. `current_user.accounts.find(params[:id])`."
              },
              "helpUri": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_unscoped_find.rb",
              "id": "codacy.tools-configs.ruby.rails.security.brakeman.check-unscoped-find.check-unscoped-find",
              "name": "codacy.tools-configs.ruby.rails.security.brakeman.check-unscoped-find.check-unscoped-find",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-639: Authorization Bypass Through User-Controlled Key",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "OWASP-A05:2017 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.rails.security.brakeman.check-unscoped-find.check-unscoped-find"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "$V Found an incorrectly-bounded regex passed to `validates_format_of` or `validate ... format =\u003e ...`. Ruby regex behavior is multiline by default and lines should be terminated by `\\A` for beginning of line and `\\Z` for end of line, respectively."
              },
              "help": {
                "markdown": "$V Found an incorrectly-bounded regex passed to `validates_format_of` or `validate ... format =\u003e ...`. Ruby regex behavior is multiline by default and lines should be terminated by `\\A` for beginning of line and `\\Z` for end of line, respectively.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_validation_regex.rb)\n - [https://brakemanscanner.org/docs/warning_types/format_validation/](https://brakemanscanner.org/docs/warning_types/format_validation/)\n - [https://github.com/presidentbeef/brakeman/blob/aef6253a8b7bcb97116f2af1ed2a561a6ae35bd5/test/apps/rails3/app/models/account.rb](https://github.com/presidentbeef/brakeman/blob/aef6253a8b7bcb97116f2af1ed2a561a6ae35bd5/test/apps/rails3/app/models/account.rb)\n - [https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3.1/app/models/account.rb](https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3.1/app/models/account.rb)\n",
                "text": "$V Found an incorrectly-bounded regex passed to `validates_format_of` or `validate ... format =\u003e ...`. Ruby regex behavior is multiline by default and lines should be terminated by `\\A` for beginning of line and `\\Z` for end of line, respectively."
              },
              "helpUri": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_validation_regex.rb",
              "id": "codacy.tools-configs.ruby.rails.security.brakeman.check-validation-regex.check-validation-regex",
              "name": "codacy.tools-configs.ruby.rails.security.brakeman.check-validation-regex.check-validation-regex",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-185: Incorrect Regular Expression",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "OWASP-A05:2017 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.rails.security.brakeman.check-validation-regex.check-validation-regex"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. Use the `render template` and make template files which will safely render HTML instead, or inspect that the HTML is absolutely rendered safely with a function like `sanitize`."
              },
              "help": {
                "markdown": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. Use the `render template` and make template files which will safely render HTML instead, or inspect that the HTML is absolutely rendered safely with a function like `sanitize`.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.netsparker.com/blog/web-security/preventing-xss-ruby-on-rails-web-applications/](https://www.netsparker.com/blog/web-security/preventing-xss-ruby-on-rails-web-applications/)\n - [https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html](https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html)\n",
                "text": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. Use the `render template` and make template files which will safely render HTML instead, or inspect that the HTML is absolutely rendered safely with a function like `sanitize`."
              },
              "id": "codacy.tools-configs.ruby.rails.security.injection.raw-html-format.raw-html-format",
              "name": "codacy.tools-configs.ruby.rails.security.injection.raw-html-format.raw-html-format",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.rails.security.injection.raw-html-format.raw-html-format"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as ActiveRecord which will protect your queries."
              },
              "help": {
                "markdown": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as ActiveRecord which will protect your queries.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://rorsecurity.info/portfolio/ruby-on-rails-sql-injection-cheat-sheet](https://rorsecurity.info/portfolio/ruby-on-rails-sql-injection-cheat-sheet)\n",
                "text": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as ActiveRecord which will protect your queries."
              },
              "id": "codacy.tools-configs.ruby.rails.security.injection.tainted-sql-string.tainted-sql-string",
              "name": "codacy.tools-configs.ruby.rails.security.injection.tainted-sql-string.tainted-sql-string",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.rails.security.injection.tainted-sql-string.tainted-sql-string"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Use the `ssrf_filter` gem and guard the url construction with `SsrfFilter(...)`, or create an allowlist for approved hosts."
              },
              "help": {
                "markdown": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Use the `ssrf_filter` gem and guard the url construction with `SsrfFilter(...)`, or create an allowlist for approved hosts.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)\n - [https://github.com/arkadiyt/ssrf_filter](https://github.com/arkadiyt/ssrf_filter)\n",
                "text": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Use the `ssrf_filter` gem and guard the url construction with `SsrfFilter(...)`, or create an allowlist for approved hosts."
              },
              "id": "codacy.tools-configs.ruby.rails.security.injection.tainted-url-host.tainted-url-host",
              "name": "codacy.tools-configs.ruby.rails.security.injection.tainted-url-host.tainted-url-host",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.ruby.rails.security.injection.tainted-url-host.tainted-url-host"
              }
            },
            {
              "defaultConfiguration": {
                "level": "note"
              },
              "fullDescription": {
                "text": "args_os should not be used for security operations. From the docs: \"The first element is traditionally the path of the executable, but it can be set to arbitrary text, and might not even exist. This means this property should not be relied upon for security purposes.\""
              },
              "help": {
                "markdown": "args_os should not be used for security operations. From the docs: \"The first element is traditionally the path of the executable, but it can be set to arbitrary text, and might not even exist. This means this property should not be relied upon for security purposes.\"\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://doc.rust-lang.org/stable/std/env/fn.args_os.html](https://doc.rust-lang.org/stable/std/env/fn.args_os.html)\n",
                "text": "args_os should not be used for security operations. From the docs: \"The first element is traditionally the path of the executable, but it can be set to arbitrary text, and might not even exist. This means this property should not be relied upon for security purposes.\""
              },
              "id": "codacy.tools-configs.rust.lang.security.args-os.args-os",
              "name": "codacy.tools-configs.rust.lang.security.args-os.args-os",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-807: Reliance on Untrusted Inputs in a Security Decision",
                  "HIGH CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.rust.lang.security.args-os.args-os"
              }
            },
            {
              "defaultConfiguration": {
                "level": "note"
              },
              "fullDescription": {
                "text": "args should not be used for security operations. From the docs: \"The first element is traditionally the path of the executable, but it can be set to arbitrary text, and might not even exist. This means this property should not be relied upon for security purposes.\""
              },
              "help": {
                "markdown": "args should not be used for security operations. From the docs: \"The first element is traditionally the path of the executable, but it can be set to arbitrary text, and might not even exist. This means this property should not be relied upon for security purposes.\"\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://doc.rust-lang.org/stable/std/env/fn.args.html](https://doc.rust-lang.org/stable/std/env/fn.args.html)\n",
                "text": "args should not be used for security operations. From the docs: \"The first element is traditionally the path of the executable, but it can be set to arbitrary text, and might not even exist. This means this property should not be relied upon for security purposes.\""
              },
              "id": "codacy.tools-configs.rust.lang.security.args.args",
              "name": "codacy.tools-configs.rust.lang.security.args.args",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-807: Reliance on Untrusted Inputs in a Security Decision",
                  "HIGH CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.rust.lang.security.args.args"
              }
            },
            {
              "defaultConfiguration": {
                "level": "note"
              },
              "fullDescription": {
                "text": "current_exe should not be used for security operations. From the docs: \"The output of this function should not be trusted for anything that might have security implications. Basically, if users can run the executable, they can change the output arbitrarily.\""
              },
              "help": {
                "markdown": "current_exe should not be used for security operations. From the docs: \"The output of this function should not be trusted for anything that might have security implications. Basically, if users can run the executable, they can change the output arbitrarily.\"\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://doc.rust-lang.org/stable/std/env/fn.current_exe.html#security](https://doc.rust-lang.org/stable/std/env/fn.current_exe.html#security)\n",
                "text": "current_exe should not be used for security operations. From the docs: \"The output of this function should not be trusted for anything that might have security implications. Basically, if users can run the executable, they can change the output arbitrarily.\""
              },
              "id": "codacy.tools-configs.rust.lang.security.current-exe.current-exe",
              "name": "codacy.tools-configs.rust.lang.security.current-exe.current-exe",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-807: Reliance on Untrusted Inputs in a Security Decision",
                  "HIGH CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.rust.lang.security.current-exe.current-exe"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected cryptographically insecure hashing function"
              },
              "help": {
                "markdown": "Detected cryptographically insecure hashing function\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://github.com/RustCrypto/hashes](https://github.com/RustCrypto/hashes)\n - [https://docs.rs/md2/latest/md2/](https://docs.rs/md2/latest/md2/)\n - [https://docs.rs/md4/latest/md4/](https://docs.rs/md4/latest/md4/)\n - [https://docs.rs/md5/latest/md5/](https://docs.rs/md5/latest/md5/)\n - [https://docs.rs/sha-1/latest/sha1/](https://docs.rs/sha-1/latest/sha1/)\n",
                "text": "Detected cryptographically insecure hashing function"
              },
              "id": "codacy.tools-configs.rust.lang.security.insecure-hashes.insecure-hashes",
              "name": "codacy.tools-configs.rust.lang.security.insecure-hashes.insecure-hashes",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-328: Use of Weak Hash",
                  "HIGH CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.rust.lang.security.insecure-hashes.insecure-hashes"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Dangerously accepting invalid TLS information"
              },
              "help": {
                "markdown": "Dangerously accepting invalid TLS information\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.rs/reqwest/latest/reqwest/struct.ClientBuilder.html#method.danger_accept_invalid_hostnames](https://docs.rs/reqwest/latest/reqwest/struct.ClientBuilder.html#method.danger_accept_invalid_hostnames)\n - [https://docs.rs/reqwest/latest/reqwest/struct.ClientBuilder.html#method.danger_accept_invalid_certs](https://docs.rs/reqwest/latest/reqwest/struct.ClientBuilder.html#method.danger_accept_invalid_certs)\n",
                "text": "Dangerously accepting invalid TLS information"
              },
              "id": "codacy.tools-configs.rust.lang.security.reqwest-accept-invalid.reqwest-accept-invalid",
              "name": "codacy.tools-configs.rust.lang.security.reqwest-accept-invalid.reqwest-accept-invalid",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-295: Improper Certificate Validation",
                  "HIGH CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.rust.lang.security.reqwest-accept-invalid.reqwest-accept-invalid"
              }
            },
            {
              "defaultConfiguration": {
                "level": "note"
              },
              "fullDescription": {
                "text": "Set sensitive flag on security headers with 'set_sensitive' to treat data with special care"
              },
              "help": {
                "markdown": "Set sensitive flag on security headers with 'set_sensitive' to treat data with special care\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.rs/reqwest/latest/reqwest/header/struct.HeaderValue.html#method.set_sensitive](https://docs.rs/reqwest/latest/reqwest/header/struct.HeaderValue.html#method.set_sensitive)\n",
                "text": "Set sensitive flag on security headers with 'set_sensitive' to treat data with special care"
              },
              "id": "codacy.tools-configs.rust.lang.security.reqwest-set-sensitive.reqwest-set-sensitive",
              "name": "codacy.tools-configs.rust.lang.security.reqwest-set-sensitive.reqwest-set-sensitive",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-921: Storage of Sensitive Data in a Mechanism without Access Control",
                  "MEDIUM CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.rust.lang.security.reqwest-set-sensitive.reqwest-set-sensitive"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Dangerous client config used, ensure SSL verification"
              },
              "help": {
                "markdown": "Dangerous client config used, ensure SSL verification\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.rs/rustls/latest/rustls/client/struct.DangerousClientConfig.html](https://docs.rs/rustls/latest/rustls/client/struct.DangerousClientConfig.html)\n - [https://docs.rs/rustls/latest/rustls/client/struct.ClientConfig.html#method.dangerous](https://docs.rs/rustls/latest/rustls/client/struct.ClientConfig.html#method.dangerous)\n",
                "text": "Dangerous client config used, ensure SSL verification"
              },
              "id": "codacy.tools-configs.rust.lang.security.rustls-dangerous.rustls-dangerous",
              "name": "codacy.tools-configs.rust.lang.security.rustls-dangerous.rustls-dangerous",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-295: Improper Certificate Validation",
                  "HIGH CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.rust.lang.security.rustls-dangerous.rustls-dangerous"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "SSL verification disabled, this allows for MitM attacks"
              },
              "help": {
                "markdown": "SSL verification disabled, this allows for MitM attacks\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.rs/openssl/latest/openssl/ssl/struct.SslContextBuilder.html#method.set_verify](https://docs.rs/openssl/latest/openssl/ssl/struct.SslContextBuilder.html#method.set_verify)\n",
                "text": "SSL verification disabled, this allows for MitM attacks"
              },
              "id": "codacy.tools-configs.rust.lang.security.ssl-verify-none.ssl-verify-none",
              "name": "codacy.tools-configs.rust.lang.security.ssl-verify-none.ssl-verify-none",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-295: Improper Certificate Validation",
                  "HIGH CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.rust.lang.security.ssl-verify-none.ssl-verify-none"
              }
            },
            {
              "defaultConfiguration": {
                "level": "note"
              },
              "fullDescription": {
                "text": "temp_dir should not be used for security operations. From the docs: 'The temporary directory may be shared among users, or between processes with different privileges; thus, the creation of any files or directories in the temporary directory must use a secure method to create a uniquely named file. Creating a file or directory with a fixed or predictable name may result in “insecure temporary file” security vulnerabilities.'"
              },
              "help": {
                "markdown": "temp_dir should not be used for security operations. From the docs: 'The temporary directory may be shared among users, or between processes with different privileges; thus, the creation of any files or directories in the temporary directory must use a secure method to create a uniquely named file. Creating a file or directory with a fixed or predictable name may result in “insecure temporary file” security vulnerabilities.'\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://doc.rust-lang.org/stable/std/env/fn.temp_dir.html](https://doc.rust-lang.org/stable/std/env/fn.temp_dir.html)\n",
                "text": "temp_dir should not be used for security operations. From the docs: 'The temporary directory may be shared among users, or between processes with different privileges; thus, the creation of any files or directories in the temporary directory must use a secure method to create a uniquely named file. Creating a file or directory with a fixed or predictable name may result in “insecure temporary file” security vulnerabilities.'"
              },
              "id": "codacy.tools-configs.rust.lang.security.temp-dir.temp-dir",
              "name": "codacy.tools-configs.rust.lang.security.temp-dir.temp-dir",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-807: Reliance on Untrusted Inputs in a Security Decision",
                  "HIGH CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.rust.lang.security.temp-dir.temp-dir"
              }
            },
            {
              "defaultConfiguration": {
                "level": "note"
              },
              "fullDescription": {
                "text": "Detected 'unsafe' usage, please audit for secure usage"
              },
              "help": {
                "markdown": "Detected 'unsafe' usage, please audit for secure usage\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://doc.rust-lang.org/std/keyword.unsafe.html](https://doc.rust-lang.org/std/keyword.unsafe.html)\n",
                "text": "Detected 'unsafe' usage, please audit for secure usage"
              },
              "id": "codacy.tools-configs.rust.lang.security.unsafe-usage.unsafe-usage",
              "name": "codacy.tools-configs.rust.lang.security.unsafe-usage.unsafe-usage",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-242: Use of Inherently Dangerous Function",
                  "HIGH CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.rust.lang.security.unsafe-usage.unsafe-usage"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)"
              },
              "help": {
                "markdown": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://jwt-scala.github.io/jwt-scala/](https://jwt-scala.github.io/jwt-scala/)\n",
                "text": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)"
              },
              "id": "codacy.tools-configs.scala.jwt-scala.security.jwt-scala-hardcode.jwt-scala-hardcode",
              "name": "codacy.tools-configs.scala.jwt-scala.security.jwt-scala-hardcode.jwt-scala-hardcode",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-522: Insufficiently Protected Credentials",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2017 - Broken Authentication",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.scala.jwt-scala.security.jwt-scala-hardcode.jwt-scala-hardcode"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Flags scala code that look for values that are greater than 0. This ignores the first element, which is most likely a bug. Instead, use indexOf with -1. If the intent is to check the inclusion of a value, use the contains method instead."
              },
              "help": {
                "markdown": "Flags scala code that look for values that are greater than 0. This ignores the first element, which is most likely a bug. Instead, use indexOf with -1. If the intent is to check the inclusion of a value, use the contains method instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://blog.codacy.com/9-scala-security-issues/](https://blog.codacy.com/9-scala-security-issues/)\n",
                "text": "Flags scala code that look for values that are greater than 0. This ignores the first element, which is most likely a bug. Instead, use indexOf with -1. If the intent is to check the inclusion of a value, use the contains method instead."
              },
              "id": "codacy.tools-configs.scala.lang.correctness.positive-number-index-of.positive-number-index-of",
              "name": "codacy.tools-configs.scala.lang.correctness.positive-number-index-of.positive-number-index-of",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "MEDIUM CONFIDENCE"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.scala.lang.correctness.positive-number-index-of.positive-number-index-of"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Document Builder being instantiated without calling the `setFeature` functions that are generally used for disabling entity processing. User controlled data in XML Document builder can result in XML Internal Entity Processing vulnerabilities like the disclosure of confidential data, denial of service, Server Side Request Forgery (SSRF), port scanning. Make sure to disable entity processing functionality."
              },
              "help": {
                "markdown": "Document Builder being instantiated without calling the `setFeature` functions that are generally used for disabling entity processing. User controlled data in XML Document builder can result in XML Internal Entity Processing vulnerabilities like the disclosure of confidential data, denial of service, Server Side Request Forgery (SSRF), port scanning. Make sure to disable entity processing functionality.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://cheatsheetseries.owasp.org//cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n",
                "text": "Document Builder being instantiated without calling the `setFeature` functions that are generally used for disabling entity processing. User controlled data in XML Document builder can result in XML Internal Entity Processing vulnerabilities like the disclosure of confidential data, denial of service, Server Side Request Forgery (SSRF), port scanning. Make sure to disable entity processing functionality."
              },
              "helpUri": "https://cheatsheetseries.owasp.org//cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
              "id": "codacy.tools-configs.scala.lang.security.audit.documentbuilder-dtd-enabled.documentbuilder-dtd-enabled",
              "name": "codacy.tools-configs.scala.lang.security.audit.documentbuilder-dtd-enabled.documentbuilder-dtd-enabled",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-611: Improper Restriction of XML External Entity Reference",
                  "HIGH CONFIDENCE",
                  "OWASP-A04:2017 - XML External Entities (XXE)",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.scala.lang.security.audit.documentbuilder-dtd-enabled.documentbuilder-dtd-enabled"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "A parameter being passed directly into `fromURL` most likely lead to SSRF. This could allow an attacker to send data to their own server, potentially exposing sensitive data sent with this request. They could also probe internal servers or other resources that the server running this code can access. Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host."
              },
              "help": {
                "markdown": "A parameter being passed directly into `fromURL` most likely lead to SSRF. This could allow an attacker to send data to their own server, potentially exposing sensitive data sent with this request. They could also probe internal servers or other resources that the server running this code can access. Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)\n - [https://www.scala-lang.org/api/current/scala/io/Source$.html#fromURL(url:java.net.URL)(implicitcodec:scala.io.Codec):scala.io.BufferedSource](https://www.scala-lang.org/api/current/scala/io/Source$.html#fromURL(url:java.net.URL)(implicitcodec:scala.io.Codec):scala.io.BufferedSource)\n",
                "text": "A parameter being passed directly into `fromURL` most likely lead to SSRF. This could allow an attacker to send data to their own server, potentially exposing sensitive data sent with this request. They could also probe internal servers or other resources that the server running this code can access. Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host."
              },
              "id": "codacy.tools-configs.scala.lang.security.audit.io-source-ssrf.io-source-ssrf",
              "name": "codacy.tools-configs.scala.lang.security.audit.io-source-ssrf.io-source-ssrf",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-918: Server-Side Request Forgery (SSRF)",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A10:2021 - Server-Side Request Forgery (SSRF)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.scala.lang.security.audit.io-source-ssrf.io-source-ssrf"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Usage of RSA without OAEP (Optimal Asymmetric Encryption Padding) may weaken encryption. This could lead to sensitive data exposure. Instead, use RSA with `OAEPWithMD5AndMGF1Padding` instead."
              },
              "help": {
                "markdown": "Usage of RSA without OAEP (Optimal Asymmetric Encryption Padding) may weaken encryption. This could lead to sensitive data exposure. Instead, use RSA with `OAEPWithMD5AndMGF1Padding` instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Usage of RSA without OAEP (Optimal Asymmetric Encryption Padding) may weaken encryption. This could lead to sensitive data exposure. Instead, use RSA with `OAEPWithMD5AndMGF1Padding` instead."
              },
              "id": "codacy.tools-configs.scala.lang.security.audit.rsa-padding-set.rsa-padding-set",
              "name": "codacy.tools-configs.scala.lang.security.audit.rsa-padding-set.rsa-padding-set",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-780: Use of RSA Algorithm without OAEP",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.scala.lang.security.audit.rsa-padding-set.rsa-padding-set"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "XML processor being instantiated without calling the `setFeature` functions that are generally used for disabling entity processing. User controlled data in XML Parsers can result in XML Internal Entity Processing vulnerabilities like the disclosure of confidential data, denial of service, Server Side Request Forgery (SSRF), port scanning. Make sure to disable entity processing functionality."
              },
              "help": {
                "markdown": "XML processor being instantiated without calling the `setFeature` functions that are generally used for disabling entity processing. User controlled data in XML Parsers can result in XML Internal Entity Processing vulnerabilities like the disclosure of confidential data, denial of service, Server Side Request Forgery (SSRF), port scanning. Make sure to disable entity processing functionality.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://cheatsheetseries.owasp.org//cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n",
                "text": "XML processor being instantiated without calling the `setFeature` functions that are generally used for disabling entity processing. User controlled data in XML Parsers can result in XML Internal Entity Processing vulnerabilities like the disclosure of confidential data, denial of service, Server Side Request Forgery (SSRF), port scanning. Make sure to disable entity processing functionality."
              },
              "helpUri": "https://cheatsheetseries.owasp.org//cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
              "id": "codacy.tools-configs.scala.lang.security.audit.sax-dtd-enabled.sax-dtd-enabled",
              "name": "codacy.tools-configs.scala.lang.security.audit.sax-dtd-enabled.sax-dtd-enabled",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-611: Improper Restriction of XML External Entity Reference",
                  "HIGH CONFIDENCE",
                  "OWASP-A04:2017 - XML External Entities (XXE)",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.scala.lang.security.audit.sax-dtd-enabled.sax-dtd-enabled"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Scala applications built with `debug` set to true in production may leak debug information to attackers. Debug mode also affects performance and reliability. Remove it from configuration."
              },
              "help": {
                "markdown": "Scala applications built with `debug` set to true in production may leak debug information to attackers. Debug mode also affects performance and reliability. Remove it from configuration.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.scala-lang.org/overviews/compiler-options/index.html](https://docs.scala-lang.org/overviews/compiler-options/index.html)\n",
                "text": "Scala applications built with `debug` set to true in production may leak debug information to attackers. Debug mode also affects performance and reliability. Remove it from configuration."
              },
              "id": "codacy.tools-configs.scala.lang.security.audit.scalac-debug.scalac-debug",
              "name": "codacy.tools-configs.scala.lang.security.audit.scalac-debug.scalac-debug",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-489: Active Debug Code",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.scala.lang.security.audit.scalac-debug.scalac-debug"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library."
              },
              "help": {
                "markdown": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html](https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html)\n",
                "text": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library."
              },
              "id": "codacy.tools-configs.scala.lang.security.audit.tainted-sql-string.tainted-sql-string",
              "name": "codacy.tools-configs.scala.lang.security.audit.tainted-sql-string.tainted-sql-string",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.scala.lang.security.audit.tainted-sql-string.tainted-sql-string"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "XMLInputFactory being instantiated without calling the setProperty functions that are generally used for disabling entity processing. User controlled data in XML Document builder can result in XML Internal Entity Processing vulnerabilities like the disclosure of confidential data, denial of service, Server Side Request Forgery (SSRF), port scanning. Make sure to disable entity processing functionality."
              },
              "help": {
                "markdown": "XMLInputFactory being instantiated without calling the setProperty functions that are generally used for disabling entity processing. User controlled data in XML Document builder can result in XML Internal Entity Processing vulnerabilities like the disclosure of confidential data, denial of service, Server Side Request Forgery (SSRF), port scanning. Make sure to disable entity processing functionality.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://cheatsheetseries.owasp.org//cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html)\n - [https://owasp.org/Top10/A05_2021-Security_Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration)\n",
                "text": "XMLInputFactory being instantiated without calling the setProperty functions that are generally used for disabling entity processing. User controlled data in XML Document builder can result in XML Internal Entity Processing vulnerabilities like the disclosure of confidential data, denial of service, Server Side Request Forgery (SSRF), port scanning. Make sure to disable entity processing functionality."
              },
              "helpUri": "https://cheatsheetseries.owasp.org//cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
              "id": "codacy.tools-configs.scala.lang.security.audit.xmlinputfactory-dtd-enabled.xmlinputfactory-dtd-enabled",
              "name": "codacy.tools-configs.scala.lang.security.audit.xmlinputfactory-dtd-enabled.xmlinputfactory-dtd-enabled",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-611: Improper Restriction of XML External Entity Reference",
                  "HIGH CONFIDENCE",
                  "OWASP-A04:2017 - XML External Entities (XXE)",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.scala.lang.security.audit.xmlinputfactory-dtd-enabled.xmlinputfactory-dtd-enabled"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Possibly bypassable CSRF configuration found. CSRF is an attack that forces an end user to execute unwanted actions on a web application in which they’re currently authenticated. Make sure that Content-Type black list is configured and CORS filter is turned on."
              },
              "help": {
                "markdown": "Possibly bypassable CSRF configuration found. CSRF is an attack that forces an end user to execute unwanted actions on a web application in which they’re currently authenticated. Make sure that Content-Type black list is configured and CORS filter is turned on.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.playframework.com/documentation/2.8.x/Migration25#CSRF-changes](https://www.playframework.com/documentation/2.8.x/Migration25#CSRF-changes)\n - [https://owasp.org/www-community/attacks/csrf](https://owasp.org/www-community/attacks/csrf)\n",
                "text": "Possibly bypassable CSRF configuration found. CSRF is an attack that forces an end user to execute unwanted actions on a web application in which they’re currently authenticated. Make sure that Content-Type black list is configured and CORS filter is turned on."
              },
              "id": "codacy.tools-configs.scala.play.security.conf-csrf-headers-bypass.conf-csrf-headers-bypass",
              "name": "codacy.tools-configs.scala.play.security.conf-csrf-headers-bypass.conf-csrf-headers-bypass",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-352: Cross-Site Request Forgery (CSRF)",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.scala.play.security.conf-csrf-headers-bypass.conf-csrf-headers-bypass"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Session cookie `Secure` flag is explicitly disabled. The `secure` flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the `Secure` flag by setting `secure` to `true` in configuration file."
              },
              "help": {
                "markdown": "Session cookie `Secure` flag is explicitly disabled. The `secure` flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the `Secure` flag by setting `secure` to `true` in configuration file.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#security](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#security)\n - [https://www.playframework.com/documentation/2.8.x/SettingsSession#Session-Configuration](https://www.playframework.com/documentation/2.8.x/SettingsSession#Session-Configuration)\n",
                "text": "Session cookie `Secure` flag is explicitly disabled. The `secure` flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the `Secure` flag by setting `secure` to `true` in configuration file."
              },
              "id": "codacy.tools-configs.scala.play.security.conf-insecure-cookie-settings.conf-insecure-cookie-settings",
              "name": "codacy.tools-configs.scala.play.security.conf-insecure-cookie-settings.conf-insecure-cookie-settings",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.scala.play.security.conf-insecure-cookie-settings.conf-insecure-cookie-settings"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected a request with potential user-input going into an `Ok()` response. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as Twirl which automatically escapes HTML views."
              },
              "help": {
                "markdown": "Detected a request with potential user-input going into an `Ok()` response. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as Twirl which automatically escapes HTML views.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n",
                "text": "Detected a request with potential user-input going into an `Ok()` response. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as Twirl which automatically escapes HTML views."
              },
              "id": "codacy.tools-configs.scala.play.security.tainted-html-response.tainted-html-response",
              "name": "codacy.tools-configs.scala.play.security.tainted-html-response.tainted-html-response",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.scala.play.security.tainted-html-response.tainted-html-response"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected a tainted SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Avoid using using user input for generating SQL strings."
              },
              "help": {
                "markdown": "Detected a tainted SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Avoid using using user input for generating SQL strings.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://scala-slick.org/doc/3.3.3/sql.html#splicing-literal-values](https://scala-slick.org/doc/3.3.3/sql.html#splicing-literal-values)\n - [https://scala-slick.org/doc/3.2.0/sql-to-slick.html#non-optimal-sql-code](https://scala-slick.org/doc/3.2.0/sql-to-slick.html#non-optimal-sql-code)\n",
                "text": "Detected a tainted SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Avoid using using user input for generating SQL strings."
              },
              "id": "codacy.tools-configs.scala.play.security.tainted-slick-sqli.tainted-slick-sqli",
              "name": "codacy.tools-configs.scala.play.security.tainted-slick-sqli.tainted-slick-sqli",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "HIGH CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.scala.play.security.tainted-slick-sqli.tainted-slick-sqli"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library."
              },
              "help": {
                "markdown": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html](https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html)\n",
                "text": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library."
              },
              "id": "codacy.tools-configs.scala.play.security.tainted-sql-from-http-request.tainted-sql-from-http-request",
              "name": "codacy.tools-configs.scala.play.security.tainted-sql-from-http-request.tainted-sql-from-http-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "HIGH CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.scala.play.security.tainted-sql-from-http-request.tainted-sql-from-http-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)"
              },
              "help": {
                "markdown": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [Semgrep Rule](https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n",
                "text": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)"
              },
              "helpUri": "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/",
              "id": "codacy.tools-configs.scala.scala-jwt.security.jwt-hardcode.scala-jwt-hardcoded-secret",
              "name": "codacy.tools-configs.scala.scala-jwt.security.jwt-hardcode.scala-jwt-hardcoded-secret",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-522: Insufficiently Protected Credentials",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2017 - Broken Authentication",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.scala.scala-jwt.security.jwt-hardcode.scala-jwt-hardcoded-secret"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Do not grant dangerous combinations of permissions.\n"
              },
              "help": {
                "markdown": "Do not grant dangerous combinations of permissions.\n",
                "text": "Do not grant dangerous combinations of permissions.\n"
              },
              "id": "codacy.tools-configs.scala_perm_rule-DangerousPermissions",
              "name": "codacy.tools-configs.scala_perm_rule-DangerousPermissions",
              "properties": {
                "precision": "very-high",
                "security-severity": "Info",
                "tags": [
                  "CWE-277",
                  "HIGH CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Insecure inherited permissions"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Overly permissive file permission\n"
              },
              "help": {
                "markdown": "Overly permissive file permission\n",
                "text": "Overly permissive file permission\n"
              },
              "id": "codacy.tools-configs.scala_perm_rule-OverlyPermissiveFilePermissionInline",
              "name": "codacy.tools-configs.scala_perm_rule-OverlyPermissiveFilePermissionInline",
              "properties": {
                "precision": "very-high",
                "security-severity": "High",
                "tags": [
                  "CWE-732",
                  "HIGH CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Incorrect Permission Assignment for Critical Resource"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Overly permissive file permission\n"
              },
              "help": {
                "markdown": "Overly permissive file permission\n",
                "text": "Overly permissive file permission\n"
              },
              "id": "codacy.tools-configs.scala_perm_rule-OverlyPermissiveFilePermissionObj",
              "name": "codacy.tools-configs.scala_perm_rule-OverlyPermissiveFilePermissionObj",
              "properties": {
                "precision": "very-high",
                "security-severity": "Medium",
                "tags": [
                  "CWE-732",
                  "HIGH CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Incorrect Permission Assignment for Critical Resource"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "When converting a byte array containing a hash signature to a human readable string, a\nconversion mistake can be made if the array is read byte by byte.\n"
              },
              "help": {
                "markdown": "When converting a byte array containing a hash signature to a human readable string, a\nconversion mistake can be made if the array is read byte by byte.\n",
                "text": "When converting a byte array containing a hash signature to a human readable string, a\nconversion mistake can be made if the array is read byte by byte.\n"
              },
              "id": "codacy.tools-configs.scala_strings_rule-BadHexConversion",
              "name": "codacy.tools-configs.scala_strings_rule-BadHexConversion",
              "properties": {
                "precision": "very-high",
                "security-severity": "Medium",
                "tags": [
                  "CWE-704",
                  "HIGH CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Incorrect Type Conversion or Cast"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Allowing user input to control format parameters could enable an attacker to cause exceptions\nto be thrown or leak information.Attackers may be able  to modify the format string argument,\nsuch that an exception is thrown. If this exception is left uncaught, it may crash the\napplication. Alternatively, if sensitive information is used within the unused arguments,\nattackers may change the format string to reveal this information.\n"
              },
              "help": {
                "markdown": "Allowing user input to control format parameters could enable an attacker to cause exceptions\nto be thrown or leak information.Attackers may be able  to modify the format string argument,\nsuch that an exception is thrown. If this exception is left uncaught, it may crash the\napplication. Alternatively, if sensitive information is used within the unused arguments,\nattackers may change the format string to reveal this information.\n",
                "text": "Allowing user input to control format parameters could enable an attacker to cause exceptions\nto be thrown or leak information.Attackers may be able  to modify the format string argument,\nsuch that an exception is thrown. If this exception is left uncaught, it may crash the\napplication. Alternatively, if sensitive information is used within the unused arguments,\nattackers may change the format string to reveal this information.\n"
              },
              "id": "codacy.tools-configs.scala_strings_rule-FormatStringManipulation",
              "name": "codacy.tools-configs.scala_strings_rule-FormatStringManipulation",
              "properties": {
                "precision": "very-high",
                "security-severity": "Info",
                "tags": [
                  "CWE-134",
                  "HIGH CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Use of Externally-Controlled Format String"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Improper Handling of Unicode Encoding\n"
              },
              "help": {
                "markdown": "Improper Handling of Unicode Encoding\n",
                "text": "Improper Handling of Unicode Encoding\n"
              },
              "id": "codacy.tools-configs.scala_strings_rule-ImproperUnicode",
              "name": "codacy.tools-configs.scala_strings_rule-ImproperUnicode",
              "properties": {
                "precision": "very-high",
                "security-severity": "Medium",
                "tags": [
                  "CWE-176",
                  "HIGH CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Improper Handling of Unicode Encoding"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "CERT: IDS11-J. Perform any string modifications before validation\n"
              },
              "help": {
                "markdown": "CERT: IDS11-J. Perform any string modifications before validation\n",
                "text": "CERT: IDS11-J. Perform any string modifications before validation\n"
              },
              "id": "codacy.tools-configs.scala_strings_rule-ModifyAfterValidation",
              "name": "codacy.tools-configs.scala_strings_rule-ModifyAfterValidation",
              "properties": {
                "precision": "very-high",
                "security-severity": "Info",
                "tags": [
                  "CWE-182",
                  "HIGH CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Collapse of data into unsafe value"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "IDS01-J. Normalize strings before validating them\n"
              },
              "help": {
                "markdown": "IDS01-J. Normalize strings before validating them\n",
                "text": "IDS01-J. Normalize strings before validating them\n"
              },
              "id": "codacy.tools-configs.scala_strings_rule-NormalizeAfterValidation",
              "name": "codacy.tools-configs.scala_strings_rule-NormalizeAfterValidation",
              "properties": {
                "precision": "very-high",
                "security-severity": "Info",
                "tags": [
                  "CWE-182",
                  "HIGH CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Collapse of data into unsafe value"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Potentially sensitive data was observed to be stored in UserDefaults, which is not adequate protection of sensitive information. For data of a sensitive nature, applications should leverage the Keychain."
              },
              "help": {
                "markdown": "Potentially sensitive data was observed to be stored in UserDefaults, which is not adequate protection of sensitive information. For data of a sensitive nature, applications should leverage the Keychain.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://developer.apple.com/library/archive/documentation/Security/Conceptual/SecureCodingGuide/Articles/ValidatingInput.html](https://developer.apple.com/library/archive/documentation/Security/Conceptual/SecureCodingGuide/Articles/ValidatingInput.html)\n - [https://mas.owasp.org/MASVS/controls/MASVS-STORAGE-1/](https://mas.owasp.org/MASVS/controls/MASVS-STORAGE-1/)\n",
                "text": "Potentially sensitive data was observed to be stored in UserDefaults, which is not adequate protection of sensitive information. For data of a sensitive nature, applications should leverage the Keychain."
              },
              "id": "codacy.tools-configs.swift.lang.storage.sensitive-storage-userdefaults.swift-user-defaults",
              "name": "codacy.tools-configs.swift.lang.storage.sensitive-storage-userdefaults.swift-user-defaults",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-311: Missing Encryption of Sensitive Data",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.swift.lang.storage.sensitive-storage-userdefaults.swift-user-defaults"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Webviews were observed that explictly allow JavaScript in an WKWebview to open windows automatically. Consider disabling this functionality if not required, following the principle of least privelege."
              },
              "help": {
                "markdown": "Webviews were observed that explictly allow JavaScript in an WKWebview to open windows automatically. Consider disabling this functionality if not required, following the principle of least privelege.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://mas.owasp.org/MASVS/controls/MASVS-PLATFORM-2/](https://mas.owasp.org/MASVS/controls/MASVS-PLATFORM-2/)\n - [https://developer.apple.com/documentation/webkit/wkpreferences/1536573-javascriptcanopenwindowsautomati](https://developer.apple.com/documentation/webkit/wkpreferences/1536573-javascriptcanopenwindowsautomati)\n",
                "text": "Webviews were observed that explictly allow JavaScript in an WKWebview to open windows automatically. Consider disabling this functionality if not required, following the principle of least privelege."
              },
              "id": "codacy.tools-configs.swift.webview.webview-js-window.swift-webview-config-allows-js-open-windows",
              "name": "codacy.tools-configs.swift.webview.webview-js-window.swift-webview-config-allows-js-open-windows",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-272: Least Privilege Violation",
                  "HIGH CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.swift.webview.webview-js-window.swift-webview-config-allows-js-open-windows"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The `aws_cloudwatch_log_subscription_filter` resource \"$NAME\" needs a `depends_on` clause on the `aws_lambda_permission`, otherwise Terraform may try to create these out-of-order and fail."
              },
              "help": {
                "markdown": "The `aws_cloudwatch_log_subscription_filter` resource \"$NAME\" needs a `depends_on` clause on the `aws_lambda_permission`, otherwise Terraform may try to create these out-of-order and fail.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://stackoverflow.com/questions/38407660/terraform-configuring-cloudwatch-log-subscription-delivery-to-lambda/38428834#38428834](https://stackoverflow.com/questions/38407660/terraform-configuring-cloudwatch-log-subscription-delivery-to-lambda/38428834#38428834)\n",
                "text": "The `aws_cloudwatch_log_subscription_filter` resource \"$NAME\" needs a `depends_on` clause on the `aws_lambda_permission`, otherwise Terraform may try to create these out-of-order and fail."
              },
              "id": "codacy.tools-configs.terraform.aws.correctness.subscription-filter-missing-depends.subscription-filter-missing-depends",
              "name": "codacy.tools-configs.terraform.aws.correctness.subscription-filter-missing-depends.subscription-filter-missing-depends",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "MEDIUM CONFIDENCE"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.correctness.subscription-filter-missing-depends.subscription-filter-missing-depends"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected an AWS CloudFront Distribution with an insecure TLS version. TLS versions less than 1.2 are considered insecure because they can be broken. To fix this, set your `minimum_protocol_version` to `\"TLSv1.2_2018\", \"TLSv1.2_2019\" or \"TLSv1.2_2021\"`."
              },
              "help": {
                "markdown": "Detected an AWS CloudFront Distribution with an insecure TLS version. TLS versions less than 1.2 are considered insecure because they can be broken. To fix this, set your `minimum_protocol_version` to `\"TLSv1.2_2018\", \"TLSv1.2_2019\" or \"TLSv1.2_2021\"`.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Detected an AWS CloudFront Distribution with an insecure TLS version. TLS versions less than 1.2 are considered insecure because they can be broken. To fix this, set your `minimum_protocol_version` to `\"TLSv1.2_2018\", \"TLSv1.2_2019\" or \"TLSv1.2_2021\"`."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-cloudfront-insecure-tls.aws-insecure-cloudfront-distribution-tls-version",
              "name": "codacy.tools-configs.terraform.aws.security.aws-cloudfront-insecure-tls.aws-insecure-cloudfront-distribution-tls-version",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-cloudfront-insecure-tls.aws-insecure-cloudfront-distribution-tls-version"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The AWS CloudWatch Log Group has no retention. Missing retention in log groups can cause losing important event information."
              },
              "help": {
                "markdown": "The AWS CloudWatch Log Group has no retention. Missing retention in log groups can cause losing important event information.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "The AWS CloudWatch Log Group has no retention. Missing retention in log groups can cause losing important event information."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-cloudwatch-log-group-no-retention.aws-cloudwatch-log-group-no-retention",
              "name": "codacy.tools-configs.terraform.aws.security.aws-cloudwatch-log-group-no-retention.aws-cloudwatch-log-group-no-retention",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-320: CWE CATEGORY: Key Management Errors",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-cloudwatch-log-group-no-retention.aws-cloudwatch-log-group-no-retention"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The AWS CodeBuild Project is unencrypted. The AWS KMS encryption key protects projects in the CodeBuild. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account."
              },
              "help": {
                "markdown": "The AWS CodeBuild Project is unencrypted. The AWS KMS encryption key protects projects in the CodeBuild. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "The AWS CodeBuild Project is unencrypted. The AWS KMS encryption key protects projects in the CodeBuild. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-codebuild-project-unencrypted.aws-codebuild-project-unencrypted",
              "name": "codacy.tools-configs.terraform.aws.security.aws-codebuild-project-unencrypted.aws-codebuild-project-unencrypted",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-320: CWE CATEGORY: Key Management Errors",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-codebuild-project-unencrypted.aws-codebuild-project-unencrypted"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The AWS configuration aggregator does not aggregate all AWS Config region. This may result in unmonitored configuration in regions that are thought to be unused. Configure the aggregator with all_regions for the source."
              },
              "help": {
                "markdown": "The AWS configuration aggregator does not aggregate all AWS Config region. This may result in unmonitored configuration in regions that are thought to be unused. Configure the aggregator with all_regions for the source.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/)\n",
                "text": "The AWS configuration aggregator does not aggregate all AWS Config region. This may result in unmonitored configuration in regions that are thought to be unused. Configure the aggregator with all_regions for the source."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-config-aggregator-not-all-regions.aws-config-aggregator-not-all-regions",
              "name": "codacy.tools-configs.terraform.aws.security.aws-config-aggregator-not-all-regions.aws-config-aggregator-not-all-regions",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-778: Insufficient Logging",
                  "HIGH CONFIDENCE",
                  "OWASP-A09:2021 - Security Logging and Monitoring Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-config-aggregator-not-all-regions.aws-config-aggregator-not-all-regions"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Database instance has no logging. Missing logs can cause missing important event information."
              },
              "help": {
                "markdown": "Database instance has no logging. Missing logs can cause missing important event information.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n",
                "text": "Database instance has no logging. Missing logs can cause missing important event information."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-db-instance-no-logging.aws-db-instance-no-logging",
              "name": "codacy.tools-configs.terraform.aws.security.aws-db-instance-no-logging.aws-db-instance-no-logging",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-311: Missing Encryption of Sensitive Data",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-db-instance-no-logging.aws-db-instance-no-logging"
              }
            },
            {
              "defaultConfiguration": {
                "level": "note"
              },
              "fullDescription": {
                "text": "Auditing is not enabled for DocumentDB. To ensure that you are able to accurately audit the usage of your DocumentDB cluster, you should enable auditing and export logs to CloudWatch."
              },
              "help": {
                "markdown": "Auditing is not enabled for DocumentDB. To ensure that you are able to accurately audit the usage of your DocumentDB cluster, you should enable auditing and export logs to CloudWatch.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/docdb_cluster#enabled_cloudwatch_logs_exports](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/docdb_cluster#enabled_cloudwatch_logs_exports)\n - [https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/)\n",
                "text": "Auditing is not enabled for DocumentDB. To ensure that you are able to accurately audit the usage of your DocumentDB cluster, you should enable auditing and export logs to CloudWatch."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-documentdb-auditing-disabled.aws-documentdb-auditing-disabled",
              "name": "codacy.tools-configs.terraform.aws.security.aws-documentdb-auditing-disabled.aws-documentdb-auditing-disabled",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-778: Insufficient Logging",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A09:2021 - Security Logging and Monitoring Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-documentdb-auditing-disabled.aws-documentdb-auditing-disabled"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "By default, AWS DynamoDB Table is encrypted using AWS-managed keys. However, for added security, it's recommended to configure your own AWS KMS encryption key to protect your data in the DynamoDB table. You can either create a new aws_kms_key resource or use the ARN of an existing key in your AWS account to do so."
              },
              "help": {
                "markdown": "By default, AWS DynamoDB Table is encrypted using AWS-managed keys. However, for added security, it's recommended to configure your own AWS KMS encryption key to protect your data in the DynamoDB table. You can either create a new aws_kms_key resource or use the ARN of an existing key in your AWS account to do so.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "By default, AWS DynamoDB Table is encrypted using AWS-managed keys. However, for added security, it's recommended to configure your own AWS KMS encryption key to protect your data in the DynamoDB table. You can either create a new aws_kms_key resource or use the ARN of an existing key in your AWS account to do so."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-dynamodb-table-unencrypted.aws-dynamodb-table-unencrypted",
              "name": "codacy.tools-configs.terraform.aws.security.aws-dynamodb-table-unencrypted.aws-dynamodb-table-unencrypted",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-dynamodb-table-unencrypted.aws-dynamodb-table-unencrypted"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Ensure EBS Snapshot is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."
              },
              "help": {
                "markdown": "Ensure EBS Snapshot is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Ensure EBS Snapshot is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-ebs-snapshot-encrypted-with-cmk.aws-ebs-snapshot-encrypted-with-cmk",
              "name": "codacy.tools-configs.terraform.aws.security.aws-ebs-snapshot-encrypted-with-cmk.aws-ebs-snapshot-encrypted-with-cmk",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-320: CWE CATEGORY: Key Management Errors",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-ebs-snapshot-encrypted-with-cmk.aws-ebs-snapshot-encrypted-with-cmk"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The AWS EBS is unencrypted. The AWS EBS encryption protects data in the EBS."
              },
              "help": {
                "markdown": "The AWS EBS is unencrypted. The AWS EBS encryption protects data in the EBS.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "The AWS EBS is unencrypted. The AWS EBS encryption protects data in the EBS."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-ebs-unencrypted.aws-ebs-unencrypted",
              "name": "codacy.tools-configs.terraform.aws.security.aws-ebs-unencrypted.aws-ebs-unencrypted",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-320: CWE CATEGORY: Key Management Errors",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-ebs-unencrypted.aws-ebs-unencrypted"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The AWS EBS volume is unencrypted. The volume, the disk I/O and any derived snapshots could be read if compromised. Volumes should be encrypted to ensure sensitive data is stored securely."
              },
              "help": {
                "markdown": "The AWS EBS volume is unencrypted. The volume, the disk I/O and any derived snapshots could be read if compromised. Volumes should be encrypted to ensure sensitive data is stored securely.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ebs_volume#encrypted](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ebs_volume#encrypted)\n - [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html)\n",
                "text": "The AWS EBS volume is unencrypted. The volume, the disk I/O and any derived snapshots could be read if compromised. Volumes should be encrypted to ensure sensitive data is stored securely."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-ebs-volume-unencrypted.aws-ebs-volume-unencrypted",
              "name": "codacy.tools-configs.terraform.aws.security.aws-ebs-volume-unencrypted.aws-ebs-volume-unencrypted",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-311: Missing Encryption of Sensitive Data",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-ebs-volume-unencrypted.aws-ebs-volume-unencrypted"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "EC2 instances should not have a public IP address attached in order to block public access to the instances. To fix this, set your `associate_public_ip_address` to `\"false\"`."
              },
              "help": {
                "markdown": "EC2 instances should not have a public IP address attached in order to block public access to the instances. To fix this, set your `associate_public_ip_address` to `\"false\"`.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n",
                "text": "EC2 instances should not have a public IP address attached in order to block public access to the instances. To fix this, set your `associate_public_ip_address` to `\"false\"`."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-ec2-has-public-ip.aws-ec2-has-public-ip",
              "name": "codacy.tools-configs.terraform.aws.security.aws-ec2-has-public-ip.aws-ec2-has-public-ip",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-284: Improper Access Control",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "OWASP-A05:2017 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-ec2-has-public-ip.aws-ec2-has-public-ip"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The EC2 launch template has Instance Metadata Service Version 1 (IMDSv1) enabled. IMDSv2 introduced session authentication tokens which improve security when talking to IMDS. You should either disable IMDS or require the use of IMDSv2."
              },
              "help": {
                "markdown": "The EC2 launch template has Instance Metadata Service Version 1 (IMDSv1) enabled. IMDSv2 introduced session authentication tokens which improve security when talking to IMDS. You should either disable IMDS or require the use of IMDSv2.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/launch_configuration#metadata_options](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/launch_configuration#metadata_options)\n - [https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service](https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service)\n",
                "text": "The EC2 launch template has Instance Metadata Service Version 1 (IMDSv1) enabled. IMDSv2 introduced session authentication tokens which improve security when talking to IMDS. You should either disable IMDS or require the use of IMDSv2."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-ec2-launch-template-metadata-service-v1-enabled.aws-ec2-launch-template-metadata-service-v1-enabled",
              "name": "codacy.tools-configs.terraform.aws.security.aws-ec2-launch-template-metadata-service-v1-enabled.aws-ec2-launch-template-metadata-service-v1-enabled",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-1390: Weak Authentication",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-ec2-launch-template-metadata-service-v1-enabled.aws-ec2-launch-template-metadata-service-v1-enabled"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The ECR repository allows tag mutability. Image tags could be overwritten with compromised images. ECR images should be set to IMMUTABLE to prevent code injection through image mutation. This can be done by setting `image_tag_mutability` to IMMUTABLE."
              },
              "help": {
                "markdown": "The ECR repository allows tag mutability. Image tags could be overwritten with compromised images. ECR images should be set to IMMUTABLE to prevent code injection through image mutation. This can be done by setting `image_tag_mutability` to IMMUTABLE.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ecr_repository#image_tag_mutability](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ecr_repository#image_tag_mutability)\n - [https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/](https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/)\n",
                "text": "The ECR repository allows tag mutability. Image tags could be overwritten with compromised images. ECR images should be set to IMMUTABLE to prevent code injection through image mutation. This can be done by setting `image_tag_mutability` to IMMUTABLE."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-ecr-mutable-image-tags.aws-ecr-mutable-image-tags",
              "name": "codacy.tools-configs.terraform.aws.security.aws-ecr-mutable-image-tags.aws-ecr-mutable-image-tags",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-345: Insufficient Verification of Data Authenticity",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A08:2021 - Software and Data Integrity Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-ecr-mutable-image-tags.aws-ecr-mutable-image-tags"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected wildcard access granted in your ECR repository policy principal. This grants access to all users, including anonymous users (public access). Instead, limit principals, actions and resources to what you need according to least privilege."
              },
              "help": {
                "markdown": "Detected wildcard access granted in your ECR repository policy principal. This grants access to all users, including anonymous users (public access). Instead, limit principals, actions and resources to what you need according to least privilege.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ecr_repository_policy](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ecr_repository_policy)\n - [https://docs.aws.amazon.com/lambda/latest/operatorguide/wildcard-permissions-iam.html](https://docs.aws.amazon.com/lambda/latest/operatorguide/wildcard-permissions-iam.html)\n - [https://docs.aws.amazon.com/prescriptive-guidance/latest/patterns/monitor-amazon-ecr-repositories-for-wildcard-permissions-using-aws-cloudformation-and-aws-config.html](https://docs.aws.amazon.com/prescriptive-guidance/latest/patterns/monitor-amazon-ecr-repositories-for-wildcard-permissions-using-aws-cloudformation-and-aws-config.html)\n - [https://cwe.mitre.org/data/definitions/732.html](https://cwe.mitre.org/data/definitions/732.html)\n",
                "text": "Detected wildcard access granted in your ECR repository policy principal. This grants access to all users, including anonymous users (public access). Instead, limit principals, actions and resources to what you need according to least privilege."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-ecr-repository-wildcard-principal.aws-ecr-repository-wildcard-principal",
              "name": "codacy.tools-configs.terraform.aws.security.aws-ecr-repository-wildcard-principal.aws-ecr-repository-wildcard-principal",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-732: Incorrect Permission Assignment for Critical Resource",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-ecr-repository-wildcard-principal.aws-ecr-repository-wildcard-principal"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Ensure EFS filesystem is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."
              },
              "help": {
                "markdown": "Ensure EFS filesystem is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Ensure EFS filesystem is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-efs-filesystem-encrypted-with-cmk.aws-efs-filesystem-encrypted-with-cmk",
              "name": "codacy.tools-configs.terraform.aws.security.aws-efs-filesystem-encrypted-with-cmk.aws-efs-filesystem-encrypted-with-cmk",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-320: CWE CATEGORY: Key Management Errors",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-efs-filesystem-encrypted-with-cmk.aws-efs-filesystem-encrypted-with-cmk"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected an AWS Elasticsearch domain using an insecure version of TLS. To fix this, set \"tls_security_policy\" equal to \"Policy-Min-TLS-1-2-2019-07\"."
              },
              "help": {
                "markdown": "Detected an AWS Elasticsearch domain using an insecure version of TLS. To fix this, set \"tls_security_policy\" equal to \"Policy-Min-TLS-1-2-2019-07\".\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Detected an AWS Elasticsearch domain using an insecure version of TLS. To fix this, set \"tls_security_policy\" equal to \"Policy-Min-TLS-1-2-2019-07\"."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-elasticsearch-insecure-tls-version.aws-elasticsearch-insecure-tls-version",
              "name": "codacy.tools-configs.terraform.aws.security.aws-elasticsearch-insecure-tls-version.aws-elasticsearch-insecure-tls-version",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-elasticsearch-insecure-tls-version.aws-elasticsearch-insecure-tls-version"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Ensure all Elasticsearch has node-to-node encryption enabled.\t"
              },
              "help": {
                "markdown": "Ensure all Elasticsearch has node-to-node encryption enabled.\t\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Ensure all Elasticsearch has node-to-node encryption enabled.\t"
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-elasticsearch-nodetonode-encryption.aws-elasticsearch-nodetonode-encryption-not-enabled",
              "name": "codacy.tools-configs.terraform.aws.security.aws-elasticsearch-nodetonode-encryption.aws-elasticsearch-nodetonode-encryption-not-enabled",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-elasticsearch-nodetonode-encryption.aws-elasticsearch-nodetonode-encryption-not-enabled"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected wildcard access granted to Glacier Vault. This means anyone within your AWS account ID can perform actions on Glacier resources. Instead, limit to a specific identity in your account, like this: `arn:aws:iam::\u003caccount_id\u003e:\u003cidentity\u003e`."
              },
              "help": {
                "markdown": "Detected wildcard access granted to Glacier Vault. This means anyone within your AWS account ID can perform actions on Glacier resources. Instead, limit to a specific identity in your account, like this: `arn:aws:iam::\u003caccount_id\u003e:\u003cidentity\u003e`.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cwe.mitre.org/data/definitions/732.html](https://cwe.mitre.org/data/definitions/732.html)\n",
                "text": "Detected wildcard access granted to Glacier Vault. This means anyone within your AWS account ID can perform actions on Glacier resources. Instead, limit to a specific identity in your account, like this: `arn:aws:iam::\u003caccount_id\u003e:\u003cidentity\u003e`."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-glacier-vault-any-principal.aws-glacier-vault-any-principal",
              "name": "codacy.tools-configs.terraform.aws.security.aws-glacier-vault-any-principal.aws-glacier-vault-any-principal",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-732: Incorrect Permission Assignment for Critical Resource",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-glacier-vault-any-principal.aws-glacier-vault-any-principal"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected admin access granted in your policy. This means anyone with this policy can perform administrative actions. Instead, limit actions and resources to what you need according to least privilege."
              },
              "help": {
                "markdown": "Detected admin access granted in your policy. This means anyone with this policy can perform administrative actions. Instead, limit actions and resources to what you need according to least privilege.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cwe.mitre.org/data/definitions/732.html](https://cwe.mitre.org/data/definitions/732.html)\n",
                "text": "Detected admin access granted in your policy. This means anyone with this policy can perform administrative actions. Instead, limit actions and resources to what you need according to least privilege."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-iam-admin-policy-ssoadmin.aws-iam-admin-policy-ssoadmin",
              "name": "codacy.tools-configs.terraform.aws.security.aws-iam-admin-policy-ssoadmin.aws-iam-admin-policy-ssoadmin",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-732: Incorrect Permission Assignment for Critical Resource",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-iam-admin-policy-ssoadmin.aws-iam-admin-policy-ssoadmin"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected admin access granted in your policy. This means anyone with this policy can perform administrative actions. Instead, limit actions and resources to what you need according to least privilege."
              },
              "help": {
                "markdown": "Detected admin access granted in your policy. This means anyone with this policy can perform administrative actions. Instead, limit actions and resources to what you need according to least privilege.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cwe.mitre.org/data/definitions/732.html](https://cwe.mitre.org/data/definitions/732.html)\n",
                "text": "Detected admin access granted in your policy. This means anyone with this policy can perform administrative actions. Instead, limit actions and resources to what you need according to least privilege."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-iam-admin-policy.aws-iam-admin-policy",
              "name": "codacy.tools-configs.terraform.aws.security.aws-iam-admin-policy.aws-iam-admin-policy",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-732: Incorrect Permission Assignment for Critical Resource",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-iam-admin-policy.aws-iam-admin-policy"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected AWS API Gateway to be using an insecure version of TLS. To fix this issue make sure to set \"security_policy\" equal to \"TLS_1_2\"."
              },
              "help": {
                "markdown": "Detected AWS API Gateway to be using an insecure version of TLS. To fix this issue make sure to set \"security_policy\" equal to \"TLS_1_2\".\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Detected AWS API Gateway to be using an insecure version of TLS. To fix this issue make sure to set \"security_policy\" equal to \"TLS_1_2\"."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-insecure-api-gateway-tls-version.aws-insecure-api-gateway-tls-version",
              "name": "codacy.tools-configs.terraform.aws.security.aws-insecure-api-gateway-tls-version.aws-insecure-api-gateway-tls-version",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-insecure-api-gateway-tls-version.aws-insecure-api-gateway-tls-version"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected an AWS Redshift configuration with a SSL disabled. To fix this, set your `require_ssl` to `\"true\"`."
              },
              "help": {
                "markdown": "Detected an AWS Redshift configuration with a SSL disabled. To fix this, set your `require_ssl` to `\"true\"`.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Detected an AWS Redshift configuration with a SSL disabled. To fix this, set your `require_ssl` to `\"true\"`."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-insecure-redshift-ssl-configuration.aws-insecure-redshift-ssl-configuration",
              "name": "codacy.tools-configs.terraform.aws.security.aws-insecure-redshift-ssl-configuration.aws-insecure-redshift-ssl-configuration",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-insecure-redshift-ssl-configuration.aws-insecure-redshift-ssl-configuration"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The AWS Kinesis stream does not encrypt data at rest. The data could be read if the Kinesis stream storage layer is compromised. Enable Kinesis stream server-side encryption."
              },
              "help": {
                "markdown": "The AWS Kinesis stream does not encrypt data at rest. The data could be read if the Kinesis stream storage layer is compromised. Enable Kinesis stream server-side encryption.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/kinesis_stream#encryption_type](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/kinesis_stream#encryption_type)\n - [https://docs.aws.amazon.com/streams/latest/dev/server-side-encryption.html](https://docs.aws.amazon.com/streams/latest/dev/server-side-encryption.html)\n",
                "text": "The AWS Kinesis stream does not encrypt data at rest. The data could be read if the Kinesis stream storage layer is compromised. Enable Kinesis stream server-side encryption."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-kinesis-stream-unencrypted.aws-kinesis-stream-unencrypted",
              "name": "codacy.tools-configs.terraform.aws.security.aws-kinesis-stream-unencrypted.aws-kinesis-stream-unencrypted",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-311: Missing Encryption of Sensitive Data",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-kinesis-stream-unencrypted.aws-kinesis-stream-unencrypted"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected wildcard access granted in your KMS key. This means anyone with this policy can perform administrative actions over the keys. Instead, limit principals, actions and resources to what you need according to least privilege."
              },
              "help": {
                "markdown": "Detected wildcard access granted in your KMS key. This means anyone with this policy can perform administrative actions over the keys. Instead, limit principals, actions and resources to what you need according to least privilege.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cwe.mitre.org/data/definitions/732.html](https://cwe.mitre.org/data/definitions/732.html)\n",
                "text": "Detected wildcard access granted in your KMS key. This means anyone with this policy can perform administrative actions over the keys. Instead, limit principals, actions and resources to what you need according to least privilege."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-kms-key-wildcard-principal.aws-kms-key-wildcard-principal",
              "name": "codacy.tools-configs.terraform.aws.security.aws-kms-key-wildcard-principal.aws-kms-key-wildcard-principal",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-732: Incorrect Permission Assignment for Critical Resource",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-kms-key-wildcard-principal.aws-kms-key-wildcard-principal"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The AWS KMS has no rotation. Missing rotation can cause leaked key to be used by attackers. To fix this, set a `enable_key_rotation`."
              },
              "help": {
                "markdown": "The AWS KMS has no rotation. Missing rotation can cause leaked key to be used by attackers. To fix this, set a `enable_key_rotation`.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "The AWS KMS has no rotation. Missing rotation can cause leaked key to be used by attackers. To fix this, set a `enable_key_rotation`."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-kms-no-rotation.aws-kms-no-rotation",
              "name": "codacy.tools-configs.terraform.aws.security.aws-kms-no-rotation.aws-kms-no-rotation",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-kms-no-rotation.aws-kms-no-rotation"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
              },
              "help": {
                "markdown": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n",
                "text": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-lambda-environment-credentials.aws-lambda-environment-credentials",
              "name": "codacy.tools-configs.terraform.aws.security.aws-lambda-environment-credentials.aws-lambda-environment-credentials",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-lambda-environment-credentials.aws-lambda-environment-credentials"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "The AWS Lambda permission has an AWS service principal but does not specify a source ARN. If you grant permission to a service principal without specifying the source, other accounts could potentially configure resources in their account to invoke your Lambda function. Set the source_arn value to the ARN of the AWS resource that invokes the function, eg. an S3 bucket, CloudWatch Events Rule, API Gateway, or SNS topic."
              },
              "help": {
                "markdown": "The AWS Lambda permission has an AWS service principal but does not specify a source ARN. If you grant permission to a service principal without specifying the source, other accounts could potentially configure resources in their account to invoke your Lambda function. Set the source_arn value to the ARN of the AWS resource that invokes the function, eg. an S3 bucket, CloudWatch Events Rule, API Gateway, or SNS topic.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cwe.mitre.org/data/definitions/732.html](https://cwe.mitre.org/data/definitions/732.html)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_permission](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_permission)\n - [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-permission.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-permission.html)\n",
                "text": "The AWS Lambda permission has an AWS service principal but does not specify a source ARN. If you grant permission to a service principal without specifying the source, other accounts could potentially configure resources in their account to invoke your Lambda function. Set the source_arn value to the ARN of the AWS resource that invokes the function, eg. an S3 bucket, CloudWatch Events Rule, API Gateway, or SNS topic."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-lambda-permission-unrestricted-source-arn.aws-lambda-permission-unrestricted-source-arn",
              "name": "codacy.tools-configs.terraform.aws.security.aws-lambda-permission-unrestricted-source-arn.aws-lambda-permission-unrestricted-source-arn",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-732: Incorrect Permission Assignment for Critical Resource",
                  "HIGH CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-lambda-permission-unrestricted-source-arn.aws-lambda-permission-unrestricted-source-arn"
              }
            },
            {
              "defaultConfiguration": {
                "level": "note"
              },
              "fullDescription": {
                "text": "The AWS Lambda function does not have active X-Ray tracing enabled. X-Ray tracing enables end-to-end debugging and analysis of all function activity. This makes it easier to trace the flow of logs and identify bottlenecks, slow downs and timeouts."
              },
              "help": {
                "markdown": "The AWS Lambda function does not have active X-Ray tracing enabled. X-Ray tracing enables end-to-end debugging and analysis of all function activity. This makes it easier to trace the flow of logs and identify bottlenecks, slow downs and timeouts.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cwe.mitre.org/data/definitions/778.html](https://cwe.mitre.org/data/definitions/778.html)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_function#mode](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_function#mode)\n - [https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html](https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html)\n",
                "text": "The AWS Lambda function does not have active X-Ray tracing enabled. X-Ray tracing enables end-to-end debugging and analysis of all function activity. This makes it easier to trace the flow of logs and identify bottlenecks, slow downs and timeouts."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-lambda-x-ray-tracing-not-active.aws-lambda-x-ray-tracing-not-active",
              "name": "codacy.tools-configs.terraform.aws.security.aws-lambda-x-ray-tracing-not-active.aws-lambda-x-ray-tracing-not-active",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-778: Insufficient Logging",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A09:2021 Security Logging and Monitoring Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-lambda-x-ray-tracing-not-active.aws-lambda-x-ray-tracing-not-active"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
              },
              "help": {
                "markdown": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)\n",
                "text": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-provider-static-credentials.aws-provider-static-credentials",
              "name": "codacy.tools-configs.terraform.aws.security.aws-provider-static-credentials.aws-provider-static-credentials",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-798: Use of Hard-coded Credentials",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-provider-static-credentials.aws-provider-static-credentials"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The AWS RDS has no retention. Missing retention can cause losing important event information. To fix this, set a `backup_retention_period`."
              },
              "help": {
                "markdown": "The AWS RDS has no retention. Missing retention can cause losing important event information. To fix this, set a `backup_retention_period`.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "The AWS RDS has no retention. Missing retention can cause losing important event information. To fix this, set a `backup_retention_period`."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-rds-backup-no-retention.aws-rds-backup-no-retention",
              "name": "codacy.tools-configs.terraform.aws.security.aws-rds-backup-no-retention.aws-rds-backup-no-retention",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-320: CWE CATEGORY: Key Management Errors",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-rds-backup-no-retention.aws-rds-backup-no-retention"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Wildcard used in your SQS queue policy principal. This grants access to all users, including anonymous users (public access). Unless you explicitly require anyone on the internet to be able to read or write to your queue, limit principals, actions and resources to what you need according to least privilege."
              },
              "help": {
                "markdown": "Wildcard used in your SQS queue policy principal. This grants access to all users, including anonymous users (public access). Unless you explicitly require anyone on the internet to be able to read or write to your queue, limit principals, actions and resources to what you need according to least privilege.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cwe.mitre.org/data/definitions/732.html](https://cwe.mitre.org/data/definitions/732.html)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sqs_queue](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sqs_queue)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sqs_queue_policy](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sqs_queue_policy)\n - [https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-security-best-practices.html](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-security-best-practices.html)\n",
                "text": "Wildcard used in your SQS queue policy principal. This grants access to all users, including anonymous users (public access). Unless you explicitly require anyone on the internet to be able to read or write to your queue, limit principals, actions and resources to what you need according to least privilege."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-sqs-queue-policy-wildcard-principal.aws-sqs-queue-policy-wildcard-principal",
              "name": "codacy.tools-configs.terraform.aws.security.aws-sqs-queue-policy-wildcard-principal.aws-sqs-queue-policy-wildcard-principal",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-732: Incorrect Permission Assignment for Critical Resource",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-sqs-queue-policy-wildcard-principal.aws-sqs-queue-policy-wildcard-principal"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Resources in the AWS subnet are assigned a public IP address. Resources should not be exposed on the public internet, but should have access limited to consumers required for the function of your application. Set `map_public_ip_on_launch` to false so that resources are not publicly-accessible."
              },
              "help": {
                "markdown": "Resources in the AWS subnet are assigned a public IP address. Resources should not be exposed on the public internet, but should have access limited to consumers required for the function of your application. Set `map_public_ip_on_launch` to false so that resources are not publicly-accessible.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control/](https://owasp.org/Top10/A01_2021-Broken_Access_Control/)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/subnet#map_public_ip_on_launch](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/subnet#map_public_ip_on_launch)\n - [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses)\n",
                "text": "Resources in the AWS subnet are assigned a public IP address. Resources should not be exposed on the public internet, but should have access limited to consumers required for the function of your application. Set `map_public_ip_on_launch` to false so that resources are not publicly-accessible."
              },
              "id": "codacy.tools-configs.terraform.aws.security.aws-subnet-has-public-ip-address.aws-subnet-has-public-ip-address",
              "name": "codacy.tools-configs.terraform.aws.security.aws-subnet-has-public-ip-address.aws-subnet-has-public-ip-address",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-284: Improper Access Control",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.aws-subnet-has-public-ip-address.aws-subnet-has-public-ip-address"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected an AWS load balancer with an insecure TLS version. TLS versions less than 1.2 are considered insecure because they can be broken. To fix this, set your `ssl_policy` to `\"ELBSecurityPolicy-TLS13-1-2-2021-06\"`, or include a default action to redirect to HTTPS."
              },
              "help": {
                "markdown": "Detected an AWS load balancer with an insecure TLS version. TLS versions less than 1.2 are considered insecure because they can be broken. To fix this, set your `ssl_policy` to `\"ELBSecurityPolicy-TLS13-1-2-2021-06\"`, or include a default action to redirect to HTTPS.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.ietf.org/rfc/rfc5246.txt](https://www.ietf.org/rfc/rfc5246.txt)\n",
                "text": "Detected an AWS load balancer with an insecure TLS version. TLS versions less than 1.2 are considered insecure because they can be broken. To fix this, set your `ssl_policy` to `\"ELBSecurityPolicy-TLS13-1-2-2021-06\"`, or include a default action to redirect to HTTPS."
              },
              "id": "codacy.tools-configs.terraform.aws.security.insecure-load-balancer-tls-version.insecure-load-balancer-tls-version",
              "name": "codacy.tools-configs.terraform.aws.security.insecure-load-balancer-tls-version.insecure-load-balancer-tls-version",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.insecure-load-balancer-tls-version.insecure-load-balancer-tls-version"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "`$POLICY` is missing a `condition` block which scopes users of this policy to specific GitHub repositories. Without this, `$POLICY` is open to all users on GitHub. Add a `condition` block on the variable `token.actions.githubusercontent.com:sub` which scopes it to prevent this."
              },
              "help": {
                "markdown": "`$POLICY` is missing a `condition` block which scopes users of this policy to specific GitHub repositories. Without this, `$POLICY` is open to all users on GitHub. Add a `condition` block on the variable `token.actions.githubusercontent.com:sub` which scopes it to prevent this.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services#configuring-the-role-and-trust-policy](https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services#configuring-the-role-and-trust-policy)\n - [https://dagrz.com/writing/aws-security/hacking-github-aws-oidc/](https://dagrz.com/writing/aws-security/hacking-github-aws-oidc/)\n",
                "text": "`$POLICY` is missing a `condition` block which scopes users of this policy to specific GitHub repositories. Without this, `$POLICY` is open to all users on GitHub. Add a `condition` block on the variable `token.actions.githubusercontent.com:sub` which scopes it to prevent this."
              },
              "id": "codacy.tools-configs.terraform.aws.security.unrestricted-github-oidc-policy.unrestricted-github-oidc-policy",
              "name": "codacy.tools-configs.terraform.aws.security.unrestricted-github-oidc-policy.unrestricted-github-oidc-policy",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-284: Improper Access Control",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "OWASP-A05:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.unrestricted-github-oidc-policy.unrestricted-github-oidc-policy"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected wildcard access granted to sts:AssumeRole. This means anyone with your AWS account ID and the name of the role can assume the role. Instead, limit to a specific identity in your account, like this: `arn:aws:iam::\u003caccount_id\u003e:root`."
              },
              "help": {
                "markdown": "Detected wildcard access granted to sts:AssumeRole. This means anyone with your AWS account ID and the name of the role can assume the role. Instead, limit to a specific identity in your account, like this: `arn:aws:iam::\u003caccount_id\u003e:root`.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://rhinosecuritylabs.com/aws/assume-worst-aws-assume-role-enumeration/](https://rhinosecuritylabs.com/aws/assume-worst-aws-assume-role-enumeration/)\n",
                "text": "Detected wildcard access granted to sts:AssumeRole. This means anyone with your AWS account ID and the name of the role can assume the role. Instead, limit to a specific identity in your account, like this: `arn:aws:iam::\u003caccount_id\u003e:root`."
              },
              "id": "codacy.tools-configs.terraform.aws.security.wildcard-assume-role.wildcard-assume-role",
              "name": "codacy.tools-configs.terraform.aws.security.wildcard-assume-role.wildcard-assume-role",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-250: Execution with Unnecessary Privileges",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "OWASP-A06:2017 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.aws.security.wildcard-assume-role.wildcard-assume-role"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Enabling authentication ensures that all communications in the application are authenticated. The `auth_settings` block needs to be filled out with the appropriate auth backend settings"
              },
              "help": {
                "markdown": "Enabling authentication ensures that all communications in the application are authenticated. The `auth_settings` block needs to be filled out with the appropriate auth backend settings\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#auth_settings](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#auth_settings)\n",
                "text": "Enabling authentication ensures that all communications in the application are authenticated. The `auth_settings` block needs to be filled out with the appropriate auth backend settings"
              },
              "id": "codacy.tools-configs.terraform.azure.security.appservice.appservice-authentication-enabled.appservice-authentication-enabled",
              "name": "codacy.tools-configs.terraform.azure.security.appservice.appservice-authentication-enabled.appservice-authentication-enabled",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-287: Improper Authentication",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2017 - Broken Authentication",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.azure.security.appservice.appservice-authentication-enabled.appservice-authentication-enabled"
              }
            },
            {
              "defaultConfiguration": {
                "level": "note"
              },
              "fullDescription": {
                "text": "Use the latest version of HTTP to ensure you are benefiting from security fixes. Add `http2_enabled = true` to your appservice resource block"
              },
              "help": {
                "markdown": "Use the latest version of HTTP to ensure you are benefiting from security fixes. Add `http2_enabled = true` to your appservice resource block\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#http2_enabled](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#http2_enabled)\n",
                "text": "Use the latest version of HTTP to ensure you are benefiting from security fixes. Add `http2_enabled = true` to your appservice resource block"
              },
              "id": "codacy.tools-configs.terraform.azure.security.appservice.appservice-enable-http2.appservice-enable-http2",
              "name": "codacy.tools-configs.terraform.azure.security.appservice.appservice-enable-http2.appservice-enable-http2",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.azure.security.appservice.appservice-enable-http2.appservice-enable-http2"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "By default, clients can connect to App Service by using both HTTP or HTTPS. HTTP should be disabled enabling the HTTPS Only setting."
              },
              "help": {
                "markdown": "By default, clients can connect to App Service by using both HTTP or HTTPS. HTTP should be disabled enabling the HTTPS Only setting.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#https_only](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#https_only)\n - [https://docs.microsoft.com/en-us/azure/app-service/configure-ssl-bindings#enforce-https](https://docs.microsoft.com/en-us/azure/app-service/configure-ssl-bindings#enforce-https)\n",
                "text": "By default, clients can connect to App Service by using both HTTP or HTTPS. HTTP should be disabled enabling the HTTPS Only setting."
              },
              "id": "codacy.tools-configs.terraform.azure.security.appservice.appservice-enable-https-only.appservice-enable-https-only",
              "name": "codacy.tools-configs.terraform.azure.security.appservice.appservice-enable-https-only.appservice-enable-https-only",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.azure.security.appservice.appservice-enable-https-only.appservice-enable-https-only"
              }
            },
            {
              "defaultConfiguration": {
                "level": "note"
              },
              "fullDescription": {
                "text": "Detected an AppService that was not configured to use a client certificate. Add `client_cert_enabled = true` in your resource block."
              },
              "help": {
                "markdown": "Detected an AppService that was not configured to use a client certificate. Add `client_cert_enabled = true` in your resource block.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#client_cert_enabled](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#client_cert_enabled)\n",
                "text": "Detected an AppService that was not configured to use a client certificate. Add `client_cert_enabled = true` in your resource block."
              },
              "id": "codacy.tools-configs.terraform.azure.security.appservice.appservice-require-client-cert.appservice-require-client-cert",
              "name": "codacy.tools-configs.terraform.azure.security.appservice.appservice-require-client-cert.appservice-require-client-cert",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-295: Improper Certificate Validation",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.azure.security.appservice.appservice-require-client-cert.appservice-require-client-cert"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Detected an AppService that was not configured to use TLS 1.2. Add `site_config.min_tls_version = \"1.2\"` in your resource block."
              },
              "help": {
                "markdown": "Detected an AppService that was not configured to use TLS 1.2. Add `site_config.min_tls_version = \"1.2\"` in your resource block.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#min_tls_version](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#min_tls_version)\n",
                "text": "Detected an AppService that was not configured to use TLS 1.2. Add `site_config.min_tls_version = \"1.2\"` in your resource block."
              },
              "id": "codacy.tools-configs.terraform.azure.security.appservice.appservice-use-secure-tls-policy.appservice-use-secure-tls-policy",
              "name": "codacy.tools-configs.terraform.azure.security.appservice.appservice-use-secure-tls-policy.appservice-use-secure-tls-policy",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "HIGH CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.azure.security.appservice.appservice-use-secure-tls-policy.appservice-use-secure-tls-policy"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Ensure that App service enables detailed error messages"
              },
              "help": {
                "markdown": "Ensure that App service enables detailed error messages\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures](https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures)\n",
                "text": "Ensure that App service enables detailed error messages"
              },
              "id": "codacy.tools-configs.terraform.azure.security.appservice.azure-appservice-detailed-errormessages-enabled.azure-appservice-detailed-errormessages-enabled",
              "name": "codacy.tools-configs.terraform.azure.security.appservice.azure-appservice-detailed-errormessages-enabled.azure-appservice-detailed-errormessages-enabled",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-778: Insufficient Logging",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A09:2021 - Security Logging and Monitoring Failures",
                  "OWASP-A10:2017 - Insufficient Logging \u0026 Monitoring",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.azure.security.appservice.azure-appservice-detailed-errormessages-enabled.azure-appservice-detailed-errormessages-enabled"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service Slot"
              },
              "help": {
                "markdown": "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service Slot\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service Slot"
              },
              "id": "codacy.tools-configs.terraform.azure.security.appservice.azure-appservice-https-only.azure-appservice-https-only",
              "name": "codacy.tools-configs.terraform.azure.security.appservice.azure-appservice-https-only.azure-appservice-https-only",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.azure.security.appservice.azure-appservice-https-only.azure-appservice-https-only"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Ensure web app is using the latest version of TLS encryption"
              },
              "help": {
                "markdown": "Ensure web app is using the latest version of TLS encryption\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Ensure web app is using the latest version of TLS encryption"
              },
              "id": "codacy.tools-configs.terraform.azure.security.appservice.azure-appservice-min-tls-version.azure-appservice-min-tls-version",
              "name": "codacy.tools-configs.terraform.azure.security.appservice.azure-appservice-min-tls-version.azure-appservice-min-tls-version",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.azure.security.appservice.azure-appservice-min-tls-version.azure-appservice-min-tls-version"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Ensure that the expiration date is set on all keys"
              },
              "help": {
                "markdown": "Ensure that the expiration date is set on all keys\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Ensure that the expiration date is set on all keys"
              },
              "id": "codacy.tools-configs.terraform.azure.security.azure-key-no-expiration-date.azure-key-no-expiration-date",
              "name": "codacy.tools-configs.terraform.azure.security.azure-key-no-expiration-date.azure-key-no-expiration-date",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-320: CWE CATEGORY: Key Management Errors",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.azure.security.azure-key-no-expiration-date.azure-key-no-expiration-date"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Ensure MSSQL is using the latest version of TLS encryption"
              },
              "help": {
                "markdown": "Ensure MSSQL is using the latest version of TLS encryption\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Ensure MSSQL is using the latest version of TLS encryption"
              },
              "id": "codacy.tools-configs.terraform.azure.security.azure-mssql-service-mintls-version.azure-mssql-service-mintls-version",
              "name": "codacy.tools-configs.terraform.azure.security.azure-mssql-service-mintls-version.azure-mssql-service-mintls-version",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.azure.security.azure-mssql-service-mintls-version.azure-mssql-service-mintls-version"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Ensure that MySQL server enables infrastructure encryption"
              },
              "help": {
                "markdown": "Ensure that MySQL server enables infrastructure encryption\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Ensure that MySQL server enables infrastructure encryption"
              },
              "id": "codacy.tools-configs.terraform.azure.security.azure-mysql-encryption-enabled.azure-mysql-encryption-enabled",
              "name": "codacy.tools-configs.terraform.azure.security.azure-mysql-encryption-enabled.azure-mysql-encryption-enabled",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-320: CWE CATEGORY: Key Management Errors",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.azure.security.azure-mysql-encryption-enabled.azure-mysql-encryption-enabled"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Ensure MySQL is using the latest version of TLS encryption"
              },
              "help": {
                "markdown": "Ensure MySQL is using the latest version of TLS encryption\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Ensure MySQL is using the latest version of TLS encryption"
              },
              "id": "codacy.tools-configs.terraform.azure.security.azure-mysql-mintls-version.azure-mysql-mintls-version",
              "name": "codacy.tools-configs.terraform.azure.security.azure-mysql-mintls-version.azure-mysql-mintls-version",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.azure.security.azure-mysql-mintls-version.azure-mysql-mintls-version"
              }
            },
            {
              "defaultConfiguration": {
                "level": "note"
              },
              "fullDescription": {
                "text": "Ensure that the expiration date is set on all keys"
              },
              "help": {
                "markdown": "Ensure that the expiration date is set on all keys\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault_key#expiration_date](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault_key#expiration_date)\n - [https://docs.microsoft.com/en-us/powershell/module/az.keyvault/update-azkeyvaultkey?view=azps-5.8.0#example-1--modify-a-key-to-enable-it--and-set-the-expiration-date-and-tags](https://docs.microsoft.com/en-us/powershell/module/az.keyvault/update-azkeyvaultkey?view=azps-5.8.0#example-1--modify-a-key-to-enable-it--and-set-the-expiration-date-and-tags)\n",
                "text": "Ensure that the expiration date is set on all keys"
              },
              "id": "codacy.tools-configs.terraform.azure.security.keyvault.keyvault-ensure-key-expires.keyvault-ensure-key-expires",
              "name": "codacy.tools-configs.terraform.azure.security.keyvault.keyvault-ensure-key-expires.keyvault-ensure-key-expires",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-262: Not Using Password Aging",
                  "MEDIUM CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.azure.security.keyvault.keyvault-ensure-key-expires.keyvault-ensure-key-expires"
              }
            },
            {
              "defaultConfiguration": {
                "level": "note"
              },
              "fullDescription": {
                "text": "Ensure that the expiration date is set on all secrets"
              },
              "help": {
                "markdown": "Ensure that the expiration date is set on all secrets\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault_secret#expiration_date](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault_secret#expiration_date)\n - [https://docs.microsoft.com/en-us/azure/key-vault/secrets/about-secrets](https://docs.microsoft.com/en-us/azure/key-vault/secrets/about-secrets)\n",
                "text": "Ensure that the expiration date is set on all secrets"
              },
              "id": "codacy.tools-configs.terraform.azure.security.keyvault.keyvault-ensure-secret-expires.keyvault-ensure-secret-expires",
              "name": "codacy.tools-configs.terraform.azure.security.keyvault.keyvault-ensure-secret-expires.keyvault-ensure-secret-expires",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-262: Not Using Password Aging",
                  "MEDIUM CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.azure.security.keyvault.keyvault-ensure-secret-expires.keyvault-ensure-secret-expires"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Key vault should have purge protection enabled"
              },
              "help": {
                "markdown": "Key vault should have purge protection enabled\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault#purge_protection_enabled](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault#purge_protection_enabled)\n - [https://docs.microsoft.com/en-us/azure/key-vault/general/soft-delete-overview#purge-protection](https://docs.microsoft.com/en-us/azure/key-vault/general/soft-delete-overview#purge-protection)\n",
                "text": "Key vault should have purge protection enabled"
              },
              "id": "codacy.tools-configs.terraform.azure.security.keyvault.keyvault-purge-enabled.keyvault-purge-enabled",
              "name": "codacy.tools-configs.terraform.azure.security.keyvault.keyvault-purge-enabled.keyvault-purge-enabled",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-693: Protection Mechanism Failure",
                  "MEDIUM CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.azure.security.keyvault.keyvault-purge-enabled.keyvault-purge-enabled"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected a Storage that was not configured to deny action by default. Add `enable_https_traffic_only = true` in your resource block."
              },
              "help": {
                "markdown": "Detected a Storage that was not configured to deny action by default. Add `enable_https_traffic_only = true` in your resource block.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#enable_https_traffic_only](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#enable_https_traffic_only)\n - [https://docs.microsoft.com/en-us/azure/storage/common/storage-require-secure-transfer](https://docs.microsoft.com/en-us/azure/storage/common/storage-require-secure-transfer)\n",
                "text": "Detected a Storage that was not configured to deny action by default. Add `enable_https_traffic_only = true` in your resource block."
              },
              "id": "codacy.tools-configs.terraform.azure.security.storage.storage-enforce-https.storage-enforce-https",
              "name": "codacy.tools-configs.terraform.azure.security.storage.storage-enforce-https.storage-enforce-https",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.azure.security.storage.storage-enforce-https.storage-enforce-https"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Azure Storage currently supports three versions of the TLS protocol: 1.0, 1.1, and 1.2. Azure Storage uses TLS 1.2 on public HTTPS endpoints, but TLS 1.0 and TLS 1.1 are still supported for backward compatibility. This check will warn if the minimum TLS is not set to TLS1_2."
              },
              "help": {
                "markdown": "Azure Storage currently supports three versions of the TLS protocol: 1.0, 1.1, and 1.2. Azure Storage uses TLS 1.2 on public HTTPS endpoints, but TLS 1.0 and TLS 1.1 are still supported for backward compatibility. This check will warn if the minimum TLS is not set to TLS1_2.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#min_tls_version](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#min_tls_version)\n - [https://docs.microsoft.com/en-us/azure/storage/common/transport-layer-security-configure-minimum-version](https://docs.microsoft.com/en-us/azure/storage/common/transport-layer-security-configure-minimum-version)\n",
                "text": "Azure Storage currently supports three versions of the TLS protocol: 1.0, 1.1, and 1.2. Azure Storage uses TLS 1.2 on public HTTPS endpoints, but TLS 1.0 and TLS 1.1 are still supported for backward compatibility. This check will warn if the minimum TLS is not set to TLS1_2."
              },
              "id": "codacy.tools-configs.terraform.azure.security.storage.storage-use-secure-tls-policy.storage-use-secure-tls-policy",
              "name": "codacy.tools-configs.terraform.azure.security.storage.storage-use-secure-tls-policy.storage-use-secure-tls-policy",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.azure.security.storage.storage-use-secure-tls-policy.storage-use-secure-tls-policy"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Ensure bucket logs access."
              },
              "help": {
                "markdown": "Ensure bucket logs access.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.bridgecrew.io/docs/google-cloud-policy-index](https://docs.bridgecrew.io/docs/google-cloud-policy-index)\n",
                "text": "Ensure bucket logs access."
              },
              "id": "codacy.tools-configs.terraform.gcp.security.gcp-cloud-storage-logging.gcp-cloud-storage-logging",
              "name": "codacy.tools-configs.terraform.gcp.security.gcp-cloud-storage-logging.gcp-cloud-storage-logging",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-778: Insufficient Logging",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A09:2021 - Security Logging and Monitoring Failures",
                  "OWASP-A10:2017 - Insufficient Logging \u0026 Monitoring",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.gcp.security.gcp-cloud-storage-logging.gcp-cloud-storage-logging"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Ensure that RSASHA1 is not used for the zone-signing and key-signing keys in Cloud DNS DNSSEC\t"
              },
              "help": {
                "markdown": "Ensure that RSASHA1 is not used for the zone-signing and key-signing keys in Cloud DNS DNSSEC\t\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Ensure that RSASHA1 is not used for the zone-signing and key-signing keys in Cloud DNS DNSSEC\t"
              },
              "id": "codacy.tools-configs.terraform.gcp.security.gcp-dns-key-specs-rsasha1.gcp-dns-key-specs-rsasha1",
              "name": "codacy.tools-configs.terraform.gcp.security.gcp-dns-key-specs-rsasha1.gcp-dns-key-specs-rsasha1",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.gcp.security.gcp-dns-key-specs-rsasha1.gcp-dns-key-specs-rsasha1"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Ensure all Cloud SQL database instance requires all incoming connections to use SSL"
              },
              "help": {
                "markdown": "Ensure all Cloud SQL database instance requires all incoming connections to use SSL\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A02_2021-Cryptographic_Failures](https://owasp.org/Top10/A02_2021-Cryptographic_Failures)\n",
                "text": "Ensure all Cloud SQL database instance requires all incoming connections to use SSL"
              },
              "id": "codacy.tools-configs.terraform.gcp.security.gcp-sql-database-require-ssl.gcp-sql-database-require-ssl",
              "name": "codacy.tools-configs.terraform.gcp.security.gcp-sql-database-require-ssl.gcp-sql-database-require-ssl",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.gcp.security.gcp-sql-database-require-ssl.gcp-sql-database-require-ssl"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Ensure that Cloud SQL database Instances are not open to the world"
              },
              "help": {
                "markdown": "Ensure that Cloud SQL database Instances are not open to the world\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n",
                "text": "Ensure that Cloud SQL database Instances are not open to the world"
              },
              "id": "codacy.tools-configs.terraform.gcp.security.gcp-sql-public-database.gcp-sql-public-database",
              "name": "codacy.tools-configs.terraform.gcp.security.gcp-sql-public-database.gcp-sql-public-database",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-284: Improper Access Control",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "OWASP-A05:2017 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.gcp.security.gcp-sql-public-database.gcp-sql-public-database"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "AWS EC2 Instance allowing use of the IMDSv1"
              },
              "help": {
                "markdown": "AWS EC2 Instance allowing use of the IMDSv1\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service](https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance#metadata-options](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance#metadata-options)\n",
                "text": "AWS EC2 Instance allowing use of the IMDSv1"
              },
              "id": "codacy.tools-configs.terraform.lang.security.ec2-imdsv1-optional.ec2-imdsv1-optional",
              "name": "codacy.tools-configs.terraform.lang.security.ec2-imdsv1-optional.ec2-imdsv1-optional",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-918: Server-Side Request Forgery (SSRF)",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A10:2021 - Server-Side Request Forgery (SSRF)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.lang.security.ec2-imdsv1-optional.ec2-imdsv1-optional"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "RDS instance or cluster with hardcoded credentials in source code. It is recommended to pass the credentials at runtime, or generate random credentials using the random_password resource."
              },
              "help": {
                "markdown": "RDS instance or cluster with hardcoded credentials in source code. It is recommended to pass the credentials at runtime, or generate random credentials using the random_password resource.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance#master_password](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance#master_password)\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/rds_cluster#master_password](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/rds_cluster#master_password)\n - [https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/password](https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/password)\n",
                "text": "RDS instance or cluster with hardcoded credentials in source code. It is recommended to pass the credentials at runtime, or generate random credentials using the random_password resource."
              },
              "id": "codacy.tools-configs.terraform.lang.security.rds-insecure-password-storage-in-source-code.rds-insecure-password-storage-in-source-code",
              "name": "codacy.tools-configs.terraform.lang.security.rds-insecure-password-storage-in-source-code.rds-insecure-password-storage-in-source-code",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-522: Insufficiently Protected Credentials",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2017 - Broken Authentication",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.lang.security.rds-insecure-password-storage-in-source-code.rds-insecure-password-storage-in-source-code"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "S3 bucket with public read-write access detected."
              },
              "help": {
                "markdown": "S3 bucket with public read-write access detected.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#acl](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#acl)\n - [https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl)\n",
                "text": "S3 bucket with public read-write access detected."
              },
              "id": "codacy.tools-configs.terraform.lang.security.s3-public-rw-bucket.s3-public-rw-bucket",
              "name": "codacy.tools-configs.terraform.lang.security.s3-public-rw-bucket.s3-public-rw-bucket",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.lang.security.s3-public-rw-bucket.s3-public-rw-bucket"
              }
            },
            {
              "defaultConfiguration": {
                "level": "note"
              },
              "fullDescription": {
                "text": "This rule has been deprecated, as all s3 buckets are encrypted by default with no way to disable it. See https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_server_side_encryption_configuration for more info."
              },
              "help": {
                "markdown": "This rule has been deprecated, as all s3 buckets are encrypted by default with no way to disable it. See https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_server_side_encryption_configuration for more info.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#server_side_encryption_configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#server_side_encryption_configuration)\n - [https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-encryption.html](https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-encryption.html)\n",
                "text": "This rule has been deprecated, as all s3 buckets are encrypted by default with no way to disable it. See https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_server_side_encryption_configuration for more info."
              },
              "id": "codacy.tools-configs.terraform.lang.security.s3-unencrypted-bucket.s3-unencrypted-bucket",
              "name": "codacy.tools-configs.terraform.lang.security.s3-unencrypted-bucket.s3-unencrypted-bucket",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-311: Missing Encryption of Sensitive Data",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.terraform.lang.security.s3-unencrypted-bucket.s3-unencrypted-bucket"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected the use of `$TRUST`. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. If you have to use `$TRUST`, ensure it does not come from user-input or use the appropriate prevention mechanism e.g. input validation or sanitization depending on the context."
              },
              "help": {
                "markdown": "Detected the use of `$TRUST`. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. If you have to use `$TRUST`, ensure it does not come from user-input or use the appropriate prevention mechanism e.g. input validation or sanitization depending on the context.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://angular.io/api/platform-browser/DomSanitizer](https://angular.io/api/platform-browser/DomSanitizer)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n",
                "text": "Detected the use of `$TRUST`. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. If you have to use `$TRUST`, ensure it does not come from user-input or use the appropriate prevention mechanism e.g. input validation or sanitization depending on the context."
              },
              "id": "codacy.tools-configs.typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust",
              "name": "codacy.tools-configs.typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Add \"encryption: $Y.BucketEncryption.KMS_MANAGED\" or \"encryption: $Y.BucketEncryption.S3_MANAGED\" to the bucket props for Bucket construct $X"
              },
              "help": {
                "markdown": "Add \"encryption: $Y.BucketEncryption.KMS_MANAGED\" or \"encryption: $Y.BucketEncryption.S3_MANAGED\" to the bucket props for Bucket construct $X\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.aws.amazon.com/AmazonS3/latest/userguide/security-best-practices.html](https://docs.aws.amazon.com/AmazonS3/latest/userguide/security-best-practices.html)\n",
                "text": "Add \"encryption: $Y.BucketEncryption.KMS_MANAGED\" or \"encryption: $Y.BucketEncryption.S3_MANAGED\" to the bucket props for Bucket construct $X"
              },
              "id": "codacy.tools-configs.typescript.aws-cdk.security.audit.awscdk-bucket-encryption.awscdk-bucket-encryption",
              "name": "codacy.tools-configs.typescript.aws-cdk.security.audit.awscdk-bucket-encryption.awscdk-bucket-encryption",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-311: Missing Encryption of Sensitive Data",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.typescript.aws-cdk.security.audit.awscdk-bucket-encryption.awscdk-bucket-encryption"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Bucket $X is not set to enforce encryption-in-transit, if not explictly setting this on the bucket policy - the property \"enforceSSL\" should be set to true"
              },
              "help": {
                "markdown": "Bucket $X is not set to enforce encryption-in-transit, if not explictly setting this on the bucket policy - the property \"enforceSSL\" should be set to true\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.aws.amazon.com/AmazonS3/latest/userguide/security-best-practices.html](https://docs.aws.amazon.com/AmazonS3/latest/userguide/security-best-practices.html)\n",
                "text": "Bucket $X is not set to enforce encryption-in-transit, if not explictly setting this on the bucket policy - the property \"enforceSSL\" should be set to true"
              },
              "id": "codacy.tools-configs.typescript.aws-cdk.security.audit.awscdk-bucket-enforcessl.aws-cdk-bucket-enforcessl",
              "name": "codacy.tools-configs.typescript.aws-cdk.security.audit.awscdk-bucket-enforcessl.aws-cdk-bucket-enforcessl",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.typescript.aws-cdk.security.audit.awscdk-bucket-enforcessl.aws-cdk-bucket-enforcessl"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Queue $X is missing encryption at rest. Add \"encryption: $Y.QueueEncryption.KMS\" or \"encryption: $Y.QueueEncryption.KMS_MANAGED\" to the queue props to enable encryption at rest for the queue."
              },
              "help": {
                "markdown": "Queue $X is missing encryption at rest. Add \"encryption: $Y.QueueEncryption.KMS\" or \"encryption: $Y.QueueEncryption.KMS_MANAGED\" to the queue props to enable encryption at rest for the queue.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-data-protection.html](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-data-protection.html)\n",
                "text": "Queue $X is missing encryption at rest. Add \"encryption: $Y.QueueEncryption.KMS\" or \"encryption: $Y.QueueEncryption.KMS_MANAGED\" to the queue props to enable encryption at rest for the queue."
              },
              "id": "codacy.tools-configs.typescript.aws-cdk.security.audit.awscdk-sqs-unencryptedqueue.awscdk-sqs-unencryptedqueue",
              "name": "codacy.tools-configs.typescript.aws-cdk.security.audit.awscdk-sqs-unencryptedqueue.awscdk-sqs-unencryptedqueue",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-311: Missing Encryption of Sensitive Data",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.typescript.aws-cdk.security.audit.awscdk-sqs-unencryptedqueue.awscdk-sqs-unencryptedqueue"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Using the GrantPublicAccess method on bucket contruct $X will make the objects in the bucket world accessible. Verify if this is intentional."
              },
              "help": {
                "markdown": "Using the GrantPublicAccess method on bucket contruct $X will make the objects in the bucket world accessible. Verify if this is intentional.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-overview.html](https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-overview.html)\n",
                "text": "Using the GrantPublicAccess method on bucket contruct $X will make the objects in the bucket world accessible. Verify if this is intentional."
              },
              "id": "codacy.tools-configs.typescript.aws-cdk.security.awscdk-bucket-grantpublicaccessmethod.awscdk-bucket-grantpublicaccessmethod",
              "name": "codacy.tools-configs.typescript.aws-cdk.security.awscdk-bucket-grantpublicaccessmethod.awscdk-bucket-grantpublicaccessmethod",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-306: Missing Authentication for Critical Function",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.typescript.aws-cdk.security.awscdk-bucket-grantpublicaccessmethod.awscdk-bucket-grantpublicaccessmethod"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "CodeBuild Project $X is set to have a public URL. This will make the build results, logs, artifacts publically accessible, including builds prior to the project being public. Ensure this is acceptable for the project."
              },
              "help": {
                "markdown": "CodeBuild Project $X is set to have a public URL. This will make the build results, logs, artifacts publically accessible, including builds prior to the project being public. Ensure this is acceptable for the project.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.aws.amazon.com/codebuild/latest/userguide/public-builds.html](https://docs.aws.amazon.com/codebuild/latest/userguide/public-builds.html)\n",
                "text": "CodeBuild Project $X is set to have a public URL. This will make the build results, logs, artifacts publically accessible, including builds prior to the project being public. Ensure this is acceptable for the project."
              },
              "id": "codacy.tools-configs.typescript.aws-cdk.security.awscdk-codebuild-project-public.awscdk-codebuild-project-public",
              "name": "codacy.tools-configs.typescript.aws-cdk.security.awscdk-codebuild-project-public.awscdk-codebuild-project-public",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-306: Missing Authentication for Critical Function",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.typescript.aws-cdk.security.awscdk-codebuild-project-public.awscdk-codebuild-project-public"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detection of dangerouslySetInnerHTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use dangerouslySetInnerHTML, consider using a sanitization library such as DOMPurify to sanitize your HTML."
              },
              "help": {
                "markdown": "Detection of dangerouslySetInnerHTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use dangerouslySetInnerHTML, consider using a sanitization library such as DOMPurify to sanitize your HTML.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html](https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html)\n",
                "text": "Detection of dangerouslySetInnerHTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use dangerouslySetInnerHTML, consider using a sanitization library such as DOMPurify to sanitize your HTML."
              },
              "id": "codacy.tools-configs.typescript.react.security.audit.react-dangerouslysetinnerhtml.react-dangerouslysetinnerhtml",
              "name": "codacy.tools-configs.typescript.react.security.audit.react-dangerouslysetinnerhtml.react-dangerouslysetinnerhtml",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.typescript.react.security.audit.react-dangerouslysetinnerhtml.react-dangerouslysetinnerhtml"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detection of $HTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use $HTML, consider using a sanitization library such as DOMPurify to sanitize your HTML."
              },
              "help": {
                "markdown": "Detection of $HTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use $HTML, consider using a sanitization library such as DOMPurify to sanitize your HTML.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://developer.mozilla.org/en-US/docs/Web/API/Document/writeln](https://developer.mozilla.org/en-US/docs/Web/API/Document/writeln)\n - [https://developer.mozilla.org/en-US/docs/Web/API/Document/write](https://developer.mozilla.org/en-US/docs/Web/API/Document/write)\n - [https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML](https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML)\n",
                "text": "Detection of $HTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use $HTML, consider using a sanitization library such as DOMPurify to sanitize your HTML."
              },
              "id": "codacy.tools-configs.typescript.react.security.audit.react-unsanitized-method.react-unsanitized-method",
              "name": "codacy.tools-configs.typescript.react.security.audit.react-unsanitized-method.react-unsanitized-method",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.typescript.react.security.audit.react-unsanitized-method.react-unsanitized-method"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detection of $HTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use $HTML, consider using a sanitization library such as DOMPurify to sanitize your HTML."
              },
              "help": {
                "markdown": "Detection of $HTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use $HTML, consider using a sanitization library such as DOMPurify to sanitize your HTML.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html](https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html)\n",
                "text": "Detection of $HTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use $HTML, consider using a sanitization library such as DOMPurify to sanitize your HTML."
              },
              "id": "codacy.tools-configs.typescript.react.security.audit.react-unsanitized-property.react-unsanitized-property",
              "name": "codacy.tools-configs.typescript.react.security.audit.react-unsanitized-property.react-unsanitized-property",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.typescript.react.security.audit.react-unsanitized-property.react-unsanitized-property"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Unencrypted request over HTTP detected."
              },
              "help": {
                "markdown": "Unencrypted request over HTTP detected.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.npmjs.com/package/axios](https://www.npmjs.com/package/axios)\n",
                "text": "Unencrypted request over HTTP detected."
              },
              "id": "codacy.tools-configs.typescript.react.security.react-insecure-request.react-insecure-request",
              "name": "codacy.tools-configs.typescript.react.security.react-insecure-request.react-insecure-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.typescript.react.security.react-insecure-request.react-insecure-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Using input or workflow parameters in here-scripts can lead to command injection or code injection. Convert the parameters to env variables instead."
              },
              "help": {
                "markdown": "Using input or workflow parameters in here-scripts can lead to command injection or code injection. Convert the parameters to env variables instead.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://github.com/argoproj/argo-workflows/issues/5061](https://github.com/argoproj/argo-workflows/issues/5061)\n - [https://github.com/argoproj/argo-workflows/issues/5114#issue-808865370](https://github.com/argoproj/argo-workflows/issues/5114#issue-808865370)\n",
                "text": "Using input or workflow parameters in here-scripts can lead to command injection or code injection. Convert the parameters to env variables instead."
              },
              "id": "codacy.tools-configs.yaml.argo.security.argo-workflow-parameter-command-injection.argo-workflow-parameter-command-injection",
              "name": "codacy.tools-configs.yaml.argo.security.argo-workflow-parameter-command-injection.argo-workflow-parameter-command-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "CWE-94: Improper Control of Generation of Code ('Code Injection')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 – Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.yaml.argo.security.argo-workflow-parameter-command-injection.argo-workflow-parameter-command-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Service '$SERVICE' is running in privileged mode. This grants the container the equivalent of root capabilities on the host machine. This can lead to container escapes, privilege escalation, and other security concerns. Remove the 'privileged' key to disable this capability."
              },
              "help": {
                "markdown": "Service '$SERVICE' is running in privileged mode. This grants the container the equivalent of root capabilities on the host machine. This can lead to container escapes, privilege escalation, and other security concerns. Remove the 'privileged' key to disable this capability.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://www.trendmicro.com/en_us/research/19/l/why-running-a-privileged-container-in-docker-is-a-bad-idea.html](https://www.trendmicro.com/en_us/research/19/l/why-running-a-privileged-container-in-docker-is-a-bad-idea.html)\n - [https://containerjournal.com/topics/container-security/why-running-a-privileged-container-is-not-a-good-idea/](https://containerjournal.com/topics/container-security/why-running-a-privileged-container-is-not-a-good-idea/)\n",
                "text": "Service '$SERVICE' is running in privileged mode. This grants the container the equivalent of root capabilities on the host machine. This can lead to container escapes, privilege escalation, and other security concerns. Remove the 'privileged' key to disable this capability."
              },
              "id": "codacy.tools-configs.yaml.docker-compose.security.privileged-service.privileged-service",
              "name": "codacy.tools-configs.yaml.docker-compose.security.privileged-service.privileged-service",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-250: Execution with Unnecessary Privileges",
                  "HIGH CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "OWASP-A06:2017 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.yaml.docker-compose.security.privileged-service.privileged-service"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The environment variable `ACTIONS_ALLOW_UNSECURE_COMMANDS` grants this workflow permissions to use the `set-env` and `add-path` commands. There is a vulnerability in these commands that could result in environment variables being modified by an attacker. Depending on the use of the environment variable, this could enable an attacker to, at worst, modify the system path to run a different command than intended, resulting in arbitrary code execution. This could result in stolen code or secrets. Don't use `ACTIONS_ALLOW_UNSECURE_COMMANDS`. Instead, use Environment Files. See https://github.com/actions/toolkit/blob/main/docs/commands.md#environment-files for more information."
              },
              "help": {
                "markdown": "The environment variable `ACTIONS_ALLOW_UNSECURE_COMMANDS` grants this workflow permissions to use the `set-env` and `add-path` commands. There is a vulnerability in these commands that could result in environment variables being modified by an attacker. Depending on the use of the environment variable, this could enable an attacker to, at worst, modify the system path to run a different command than intended, resulting in arbitrary code execution. This could result in stolen code or secrets. Don't use `ACTIONS_ALLOW_UNSECURE_COMMANDS`. Instead, use Environment Files. See https://github.com/actions/toolkit/blob/main/docs/commands.md#environment-files for more information.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/](https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/)\n - [https://github.com/actions/toolkit/security/advisories/GHSA-mfwh-5m23-j46w](https://github.com/actions/toolkit/security/advisories/GHSA-mfwh-5m23-j46w)\n - [https://github.com/actions/toolkit/blob/main/docs/commands.md#environment-files](https://github.com/actions/toolkit/blob/main/docs/commands.md#environment-files)\n",
                "text": "The environment variable `ACTIONS_ALLOW_UNSECURE_COMMANDS` grants this workflow permissions to use the `set-env` and `add-path` commands. There is a vulnerability in these commands that could result in environment variables being modified by an attacker. Depending on the use of the environment variable, this could enable an attacker to, at worst, modify the system path to run a different command than intended, resulting in arbitrary code execution. This could result in stolen code or secrets. Don't use `ACTIONS_ALLOW_UNSECURE_COMMANDS`. Instead, use Environment Files. See https://github.com/actions/toolkit/blob/main/docs/commands.md#environment-files for more information."
              },
              "id": "codacy.tools-configs.yaml.github-actions.security.allowed-unsecure-commands.allowed-unsecure-commands",
              "name": "codacy.tools-configs.yaml.github-actions.security.allowed-unsecure-commands.allowed-unsecure-commands",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-749: Exposed Dangerous Method or Function",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A06:2017 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.yaml.github-actions.security.allowed-unsecure-commands.allowed-unsecure-commands"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Using variable interpolation `${{...}}` with `github` context data in a `actions/github-script`'s `script:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\"."
              },
              "help": {
                "markdown": "Using variable interpolation `${{...}}` with `github` context data in a `actions/github-script`'s `script:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections](https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections)\n - [https://securitylab.github.com/research/github-actions-untrusted-input/](https://securitylab.github.com/research/github-actions-untrusted-input/)\n - [https://github.com/actions/github-script](https://github.com/actions/github-script)\n",
                "text": "Using variable interpolation `${{...}}` with `github` context data in a `actions/github-script`'s `script:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\"."
              },
              "id": "codacy.tools-configs.yaml.github-actions.security.github-script-injection.github-script-injection",
              "name": "codacy.tools-configs.yaml.github-actions.security.github-script-injection.github-script-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-94: Improper Control of Generation of Code ('Code Injection')",
                  "HIGH CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.yaml.github-actions.security.github-script-injection.github-script-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\"."
              },
              "help": {
                "markdown": "Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections](https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections)\n - [https://securitylab.github.com/research/github-actions-untrusted-input/](https://securitylab.github.com/research/github-actions-untrusted-input/)\n",
                "text": "Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\"."
              },
              "id": "codacy.tools-configs.yaml.github-actions.security.run-shell-injection.run-shell-injection",
              "name": "codacy.tools-configs.yaml.github-actions.security.run-shell-injection.run-shell-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "HIGH CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "OWASP-A03:2021 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.yaml.github-actions.security.run-shell-injection.run-shell-injection"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
              },
              "help": {
                "markdown": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components](https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components)\n - [https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-third-party-actions](https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-third-party-actions)\n",
                "text": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload."
              },
              "id": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha",
              "name": "codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-1357: Reliance on Insufficiently Trustworthy Component",
                  "CWE-353: Missing Support for Integrity Check",
                  "HIGH CONFIDENCE",
                  "OWASP-A06:2021 - Vulnerable and Outdated Components",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "This GitHub Actions workflow file uses `workflow_run` and checks out code from the incoming pull request. When using `workflow_run`, the Action runs in the context of the target repository, which includes access to all repository secrets. Normally, this is safe because the Action only runs code from the target repository, not the incoming PR. However, by checking out the incoming PR code, you're now using the incoming code for the rest of the action. You may be inadvertently executing arbitrary code from the incoming PR with access to repository secrets, which would let an attacker steal repository secrets. This normally happens by running build scripts (e.g., `npm build` and `make`) or dependency installation scripts (e.g., `python setup.py install`). Audit your workflow file to make sure no code from the incoming PR is executed. Please see https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ for additional mitigations."
              },
              "help": {
                "markdown": "This GitHub Actions workflow file uses `workflow_run` and checks out code from the incoming pull request. When using `workflow_run`, the Action runs in the context of the target repository, which includes access to all repository secrets. Normally, this is safe because the Action only runs code from the target repository, not the incoming PR. However, by checking out the incoming PR code, you're now using the incoming code for the rest of the action. You may be inadvertently executing arbitrary code from the incoming PR with access to repository secrets, which would let an attacker steal repository secrets. This normally happens by running build scripts (e.g., `npm build` and `make`) or dependency installation scripts (e.g., `python setup.py install`). Audit your workflow file to make sure no code from the incoming PR is executed. Please see https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ for additional mitigations.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://securitylab.github.com/research/github-actions-preventing-pwn-requests/](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/)\n - [https://github.com/justinsteven/advisories/blob/master/2021_github_actions_checkspelling_token_leak_via_advice_symlink.md](https://github.com/justinsteven/advisories/blob/master/2021_github_actions_checkspelling_token_leak_via_advice_symlink.md)\n - [https://www.legitsecurity.com/blog/github-privilege-escalation-vulnerability](https://www.legitsecurity.com/blog/github-privilege-escalation-vulnerability)\n",
                "text": "This GitHub Actions workflow file uses `workflow_run` and checks out code from the incoming pull request. When using `workflow_run`, the Action runs in the context of the target repository, which includes access to all repository secrets. Normally, this is safe because the Action only runs code from the target repository, not the incoming PR. However, by checking out the incoming PR code, you're now using the incoming code for the rest of the action. You may be inadvertently executing arbitrary code from the incoming PR with access to repository secrets, which would let an attacker steal repository secrets. This normally happens by running build scripts (e.g., `npm build` and `make`) or dependency installation scripts (e.g., `python setup.py install`). Audit your workflow file to make sure no code from the incoming PR is executed. Please see https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ for additional mitigations."
              },
              "id": "codacy.tools-configs.yaml.github-actions.security.workflow-run-target-code-checkout.workflow-run-target-code-checkout",
              "name": "codacy.tools-configs.yaml.github-actions.security.workflow-run-target-code-checkout.workflow-run-target-code-checkout",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-913: Improper Control of Dynamically-Managed Code Resources",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2017 - Injection",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.yaml.github-actions.security.workflow-run-target-code-checkout.workflow-run-target-code-checkout"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding a `securityContext` to your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks."
              },
              "help": {
                "markdown": "In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding a `securityContext` to your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)\n - [https://kubernetes.io/docs/tasks/configure-pod-container/security-context/](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n - [https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt](https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag)\n",
                "text": "In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding a `securityContext` to your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks."
              },
              "id": "codacy.tools-configs.yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext",
              "name": "codacy.tools-configs.yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-732: Incorrect Permission Assignment for Critical Resource",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "OWASP-A06:2017 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "In Kubernetes, each pod runs in its own isolated environment with its own  set of security policies. However, certain container images may contain  `setuid` or `setgid` binaries that could allow an attacker to perform  privilege escalation and gain access to sensitive resources. To mitigate  this risk, it's recommended to add a `securityContext` to the container in  the pod, with the parameter `allowPrivilegeEscalation` set to `false`.  This will prevent the container from running any privileged processes and  limit the impact of any potential attacks.  In the container `$CONTAINER` this parameter is set to `true` which makes this container much more vulnerable to privelege escalation attacks."
              },
              "help": {
                "markdown": "In Kubernetes, each pod runs in its own isolated environment with its own  set of security policies. However, certain container images may contain  `setuid` or `setgid` binaries that could allow an attacker to perform  privilege escalation and gain access to sensitive resources. To mitigate  this risk, it's recommended to add a `securityContext` to the container in  the pod, with the parameter `allowPrivilegeEscalation` set to `false`.  This will prevent the container from running any privileged processes and  limit the impact of any potential attacks.  In the container `$CONTAINER` this parameter is set to `true` which makes this container much more vulnerable to privelege escalation attacks.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)\n - [https://kubernetes.io/docs/tasks/configure-pod-container/security-context/](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n - [https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt](https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag)\n",
                "text": "In Kubernetes, each pod runs in its own isolated environment with its own  set of security policies. However, certain container images may contain  `setuid` or `setgid` binaries that could allow an attacker to perform  privilege escalation and gain access to sensitive resources. To mitigate  this risk, it's recommended to add a `securityContext` to the container in  the pod, with the parameter `allowPrivilegeEscalation` set to `false`.  This will prevent the container from running any privileged processes and  limit the impact of any potential attacks.  In the container `$CONTAINER` this parameter is set to `true` which makes this container much more vulnerable to privelege escalation attacks."
              },
              "id": "codacy.tools-configs.yaml.kubernetes.security.allow-privilege-escalation-true.allow-privilege-escalation-true",
              "name": "codacy.tools-configs.yaml.kubernetes.security.allow-privilege-escalation-true.allow-privilege-escalation-true",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-732: Incorrect Permission Assignment for Critical Resource",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "OWASP-A06:2017 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.yaml.kubernetes.security.allow-privilege-escalation-true.allow-privilege-escalation-true"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding the `allowPrivilegeEscalation` parameter to your the `securityContext`, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks."
              },
              "help": {
                "markdown": "In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding the `allowPrivilegeEscalation` parameter to your the `securityContext`, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)\n - [https://kubernetes.io/docs/tasks/configure-pod-container/security-context/](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n - [https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt](https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag)\n",
                "text": "In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding the `allowPrivilegeEscalation` parameter to your the `securityContext`, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks."
              },
              "id": "codacy.tools-configs.yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation",
              "name": "codacy.tools-configs.yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-732: Incorrect Permission Assignment for Critical Resource",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "OWASP-A06:2017 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Exposing host's Docker socket to containers via a volume. The owner of this socket is root. Giving someone access to it is equivalent to giving unrestricted root access to your host. Remove 'docker.sock' from hostpath to prevent this."
              },
              "help": {
                "markdown": "Exposing host's Docker socket to containers via a volume. The owner of this socket is root. Giving someone access to it is equivalent to giving unrestricted root access to your host. Remove 'docker.sock' from hostpath to prevent this.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://kubernetes.io/docs/concepts/storage/volumes/#hostpath](https://kubernetes.io/docs/concepts/storage/volumes/#hostpath)\n - [https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems)\n - [https://kubernetes.io/docs/tasks/configure-pod-container/security-context/](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-1-do-not-expose-the-docker-daemon-socket-even-to-the-containers](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-1-do-not-expose-the-docker-daemon-socket-even-to-the-containers)\n",
                "text": "Exposing host's Docker socket to containers via a volume. The owner of this socket is root. Giving someone access to it is equivalent to giving unrestricted root access to your host. Remove 'docker.sock' from hostpath to prevent this."
              },
              "id": "codacy.tools-configs.yaml.kubernetes.security.exposing-docker-socket-hostpath.exposing-docker-socket-hostpath",
              "name": "codacy.tools-configs.yaml.kubernetes.security.exposing-docker-socket-hostpath.exposing-docker-socket-hostpath",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-250: Execution with Unnecessary Privileges",
                  "MEDIUM CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.yaml.kubernetes.security.exposing-docker-socket-hostpath.exposing-docker-socket-hostpath"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Semgrep detected a Kubernetes core API ClusterRole with excessive permissions. Attaching excessive permissions to a ClusterRole associated with the core namespace allows the V1 API to perform arbitrary actions on arbitrary resources attached to the cluster. Prefer explicit allowlists of verbs/resources when configuring the core API namespace. "
              },
              "help": {
                "markdown": "Semgrep detected a Kubernetes core API ClusterRole with excessive permissions. Attaching excessive permissions to a ClusterRole associated with the core namespace allows the V1 API to perform arbitrary actions on arbitrary resources attached to the cluster. Prefer explicit allowlists of verbs/resources when configuring the core API namespace. \n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://kubernetes.io/docs/reference/access-authn-authz/rbac/#role-and-clusterrole](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#role-and-clusterrole)\n - [https://kubernetes.io/docs/concepts/security/rbac-good-practices/#general-good-practice](https://kubernetes.io/docs/concepts/security/rbac-good-practices/#general-good-practice)\n - [https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#api-groups](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#api-groups)\n",
                "text": "Semgrep detected a Kubernetes core API ClusterRole with excessive permissions. Attaching excessive permissions to a ClusterRole associated with the core namespace allows the V1 API to perform arbitrary actions on arbitrary resources attached to the cluster. Prefer explicit allowlists of verbs/resources when configuring the core API namespace. "
              },
              "id": "codacy.tools-configs.yaml.kubernetes.security.legacy-api-clusterrole-excessive-permissions.legacy-api-clusterrole-excessive-permissions",
              "name": "codacy.tools-configs.yaml.kubernetes.security.legacy-api-clusterrole-excessive-permissions.legacy-api-clusterrole-excessive-permissions",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-269: Improper Privilege Management",
                  "HIGH CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "OWASP-A06:2017 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.yaml.kubernetes.security.legacy-api-clusterrole-excessive-permissions.legacy-api-clusterrole-excessive-permissions"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Container or pod is running in privileged mode. This grants the container the equivalent of root capabilities on the host machine. This can lead to container escapes, privilege escalation, and other security concerns. Remove the 'privileged' key to disable this capability."
              },
              "help": {
                "markdown": "Container or pod is running in privileged mode. This grants the container the equivalent of root capabilities on the host machine. This can lead to container escapes, privilege escalation, and other security concerns. Remove the 'privileged' key to disable this capability.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privileged](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privileged)\n - [https://kubernetes.io/docs/tasks/configure-pod-container/security-context/](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html)\n",
                "text": "Container or pod is running in privileged mode. This grants the container the equivalent of root capabilities on the host machine. This can lead to container escapes, privilege escalation, and other security concerns. Remove the 'privileged' key to disable this capability."
              },
              "id": "codacy.tools-configs.yaml.kubernetes.security.privileged-container.privileged-container",
              "name": "codacy.tools-configs.yaml.kubernetes.security.privileged-container.privileged-container",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-250: Execution with Unnecessary Privileges",
                  "MEDIUM CONFIDENCE",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.yaml.kubernetes.security.privileged-container.privileged-container"
              }
            },
            {
              "defaultConfiguration": {
                "level": "note"
              },
              "fullDescription": {
                "text": "When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks."
              },
              "help": {
                "markdown": "When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/](https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/)\n - [https://kubernetes.io/docs/concepts/policy/pod-security-policy/](https://kubernetes.io/docs/concepts/policy/pod-security-policy/)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user)\n",
                "text": "When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks."
              },
              "id": "codacy.tools-configs.yaml.kubernetes.security.run-as-non-root-unsafe-value.run-as-non-root-unsafe-value",
              "name": "codacy.tools-configs.yaml.kubernetes.security.run-as-non-root-unsafe-value.run-as-non-root-unsafe-value",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-250: Execution with Unnecessary Privileges",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A05:2021 - Security Misconfiguration",
                  "OWASP-A06:2017 - Security Misconfiguration",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.yaml.kubernetes.security.run-as-non-root-unsafe-value.run-as-non-root-unsafe-value"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Container is explicitly disabling seccomp confinement. This runs the service in an unrestricted state. Remove 'seccompProfile: unconfined' to prevent this."
              },
              "help": {
                "markdown": "Container is explicitly disabling seccomp confinement. This runs the service in an unrestricted state. Remove 'seccompProfile: unconfined' to prevent this.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp)\n - [https://kubernetes.io/docs/tasks/configure-pod-container/security-context/](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n",
                "text": "Container is explicitly disabling seccomp confinement. This runs the service in an unrestricted state. Remove 'seccompProfile: unconfined' to prevent this."
              },
              "id": "codacy.tools-configs.yaml.kubernetes.security.seccomp-confinement-disabled.seccomp-confinement-disabled",
              "name": "codacy.tools-configs.yaml.kubernetes.security.seccomp-confinement-disabled.seccomp-confinement-disabled",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-284: Improper Access Control",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021 - Broken Access Control",
                  "OWASP-A05:2017 - Broken Access Control",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.yaml.kubernetes.security.seccomp-confinement-disabled.seccomp-confinement-disabled"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Secrets ($VALUE) should not be stored in infrastructure as code files. Use an alternative such as Bitnami Sealed Secrets or KSOPS to encrypt Kubernetes Secrets. "
              },
              "help": {
                "markdown": "Secrets ($VALUE) should not be stored in infrastructure as code files. Use an alternative such as Bitnami Sealed Secrets or KSOPS to encrypt Kubernetes Secrets. \n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://kubernetes.io/docs/concepts/configuration/secret/](https://kubernetes.io/docs/concepts/configuration/secret/)\n - [https://media.defense.gov/2021/Aug/03/2002820425/-1/-1/0/CTR_Kubernetes_Hardening_Guidance_1.1_20220315.PDF](https://media.defense.gov/2021/Aug/03/2002820425/-1/-1/0/CTR_Kubernetes_Hardening_Guidance_1.1_20220315.PDF)\n - [https://docs.gitlab.com/ee/user/clusters/agent/gitops/secrets_management.html](https://docs.gitlab.com/ee/user/clusters/agent/gitops/secrets_management.html)\n - [https://www.cncf.io/blog/2021/04/22/revealing-the-secrets-of-kubernetes-secrets/](https://www.cncf.io/blog/2021/04/22/revealing-the-secrets-of-kubernetes-secrets/)\n - [https://github.com/bitnami-labs/sealed-secrets](https://github.com/bitnami-labs/sealed-secrets)\n - [https://www.cncf.io/blog/2022/01/25/secrets-management-essential-when-using-kubernetes/](https://www.cncf.io/blog/2022/01/25/secrets-management-essential-when-using-kubernetes/)\n - [https://blog.oddbit.com/post/2021-03-09-getting-started-with-ksops/](https://blog.oddbit.com/post/2021-03-09-getting-started-with-ksops/)\n",
                "text": "Secrets ($VALUE) should not be stored in infrastructure as code files. Use an alternative such as Bitnami Sealed Secrets or KSOPS to encrypt Kubernetes Secrets. "
              },
              "id": "codacy.tools-configs.yaml.kubernetes.security.secrets-in-config-file.secrets-in-config-file",
              "name": "codacy.tools-configs.yaml.kubernetes.security.secrets-in-config-file.secrets-in-config-file",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-798: Use of Hard-coded Credentials",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A07:2021 - Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.yaml.kubernetes.security.secrets-in-config-file.secrets-in-config-file"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Cluster is disabling TLS certificate verification when communicating with the server. This makes your HTTPS connections insecure. Remove the 'insecure-skip-tls-verify: true' key to secure communication."
              },
              "help": {
                "markdown": "Cluster is disabling TLS certificate verification when communicating with the server. This makes your HTTPS connections insecure. Remove the 'insecure-skip-tls-verify: true' key to secure communication.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://kubernetes.io/docs/reference/config-api/client-authentication.v1beta1/#client-authentication-k8s-io-v1beta1-Cluster](https://kubernetes.io/docs/reference/config-api/client-authentication.v1beta1/#client-authentication-k8s-io-v1beta1-Cluster)\n",
                "text": "Cluster is disabling TLS certificate verification when communicating with the server. This makes your HTTPS connections insecure. Remove the 'insecure-skip-tls-verify: true' key to secure communication."
              },
              "id": "codacy.tools-configs.yaml.kubernetes.security.skip-tls-verify-cluster.skip-tls-verify-cluster",
              "name": "codacy.tools-configs.yaml.kubernetes.security.skip-tls-verify-cluster.skip-tls-verify-cluster",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.yaml.kubernetes.security.skip-tls-verify-cluster.skip-tls-verify-cluster"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Service is disabling TLS certificate verification when communicating with the server. This makes your HTTPS connections insecure. Remove the 'insecureSkipTLSVerify: true' key to secure communication."
              },
              "help": {
                "markdown": "Service is disabling TLS certificate verification when communicating with the server. This makes your HTTPS connections insecure. Remove the 'insecureSkipTLSVerify: true' key to secure communication.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#apiservice-v1-apiregistration-k8s-io](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#apiservice-v1-apiregistration-k8s-io)\n",
                "text": "Service is disabling TLS certificate verification when communicating with the server. This makes your HTTPS connections insecure. Remove the 'insecureSkipTLSVerify: true' key to secure communication."
              },
              "id": "codacy.tools-configs.yaml.kubernetes.security.skip-tls-verify-service.skip-tls-verify-service",
              "name": "codacy.tools-configs.yaml.kubernetes.security.skip-tls-verify-service.skip-tls-verify-service",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A02:2021 - Cryptographic Failures",
                  "OWASP-A03:2017 - Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.yaml.kubernetes.security.skip-tls-verify-service.skip-tls-verify-service"
              }
            },
            {
              "defaultConfiguration": {
                "level": "error"
              },
              "fullDescription": {
                "text": "Basic authentication is considered weak and should be avoided.  Use a different authentication scheme, such of OAuth2, OpenID Connect, or mTLS."
              },
              "help": {
                "markdown": "Basic authentication is considered weak and should be avoided.  Use a different authentication scheme, such of OAuth2, OpenID Connect, or mTLS.\n\n\u003cb\u003eReferences:\u003c/b\u003e\n - [https://cwe.mitre.org/data/definitions/287.html](https://cwe.mitre.org/data/definitions/287.html)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design/](https://owasp.org/Top10/A04_2021-Insecure_Design/)\n - [https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/](https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/)\n",
                "text": "Basic authentication is considered weak and should be avoided.  Use a different authentication scheme, such of OAuth2, OpenID Connect, or mTLS."
              },
              "id": "codacy.tools-configs.yaml.openapi.security.use-of-basic-authentication.use-of-basic-authentication",
              "name": "codacy.tools-configs.yaml.openapi.security.use-of-basic-authentication.use-of-basic-authentication",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-287: Improper Authentication",
                  "HIGH CONFIDENCE",
                  "OWASP-A04:2021 Insecure Design",
                  "OWASP-A07:2021 Identification and Authentication Failures",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: codacy.tools-configs.yaml.openapi.security.use-of-basic-authentication.use-of-basic-authentication"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Spring Boot Actuator is fully enabled. This exposes sensitive endpoints\nsuch as /actuator/env, /actuator/logfile, /actuator/heapdump and others.\nIf the application lacks proper security measures (e.g., authentication and \nauthorization), sensitive data could be accessed, compromising the application and \nits infrastructure. This configuration poses a serious risk in production \nenvironments or public-facing deployments.\n\nTo mitigate the risks, take the following measures:\n  - Expose only the Actuator endpoints required for your use case\n  - For production environments, restrict exposure to non-sensitive endpoints \n  like `health` or `info`\n  - Ensure Actuator endpoints are protected with authentication and authorization \n  (e.g., via Spring Security)\n  - Use environment-specific configurations to limit exposure in production\n\nSecure Code Example:\nInstead of include: \"*\", list only the endpoints you need to expose:\n```\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: \"health,info,metrics\"\n```\n\nReferences:\n- https://docs.spring.io/spring-boot/reference/actuator/endpoints.html#actuator.endpoints.exposing\n- https://medium.com/walmartglobaltech/perils-of-spring-boot-actuators-misconfiguration-185c43a0f785\n- https://blog.maass.xyz/spring-actuator-security-part-1-stealing-secrets-using-spring-actuators\n"
              },
              "help": {
                "markdown": "Spring Boot Actuator is fully enabled. This exposes sensitive endpoints\nsuch as /actuator/env, /actuator/logfile, /actuator/heapdump and others.\nIf the application lacks proper security measures (e.g., authentication and \nauthorization), sensitive data could be accessed, compromising the application and \nits infrastructure. This configuration poses a serious risk in production \nenvironments or public-facing deployments.\n\nTo mitigate the risks, take the following measures:\n  - Expose only the Actuator endpoints required for your use case\n  - For production environments, restrict exposure to non-sensitive endpoints \n  like `health` or `info`\n  - Ensure Actuator endpoints are protected with authentication and authorization \n  (e.g., via Spring Security)\n  - Use environment-specific configurations to limit exposure in production\n\nSecure Code Example:\nInstead of include: \"*\", list only the endpoints you need to expose:\n```\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: \"health,info,metrics\"\n```\n\nReferences:\n- https://docs.spring.io/spring-boot/reference/actuator/endpoints.html#actuator.endpoints.exposing\n- https://medium.com/walmartglobaltech/perils-of-spring-boot-actuators-misconfiguration-185c43a0f785\n- https://blog.maass.xyz/spring-actuator-security-part-1-stealing-secrets-using-spring-actuators\n",
                "text": "Spring Boot Actuator is fully enabled. This exposes sensitive endpoints\nsuch as /actuator/env, /actuator/logfile, /actuator/heapdump and others.\nIf the application lacks proper security measures (e.g., authentication and \nauthorization), sensitive data could be accessed, compromising the application and \nits infrastructure. This configuration poses a serious risk in production \nenvironments or public-facing deployments.\n\nTo mitigate the risks, take the following measures:\n  - Expose only the Actuator endpoints required for your use case\n  - For production environments, restrict exposure to non-sensitive endpoints \n  like `health` or `info`\n  - Ensure Actuator endpoints are protected with authentication and authorization \n  (e.g., via Spring Security)\n  - Use environment-specific configurations to limit exposure in production\n\nSecure Code Example:\nInstead of include: \"*\", list only the endpoints you need to expose:\n```\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: \"health,info,metrics\"\n```\n\nReferences:\n- https://docs.spring.io/spring-boot/reference/actuator/endpoints.html#actuator.endpoints.exposing\n- https://medium.com/walmartglobaltech/perils-of-spring-boot-actuators-misconfiguration-185c43a0f785\n- https://blog.maass.xyz/spring-actuator-security-part-1-stealing-secrets-using-spring-actuators\n"
              },
              "id": "codacy.tools-configs.yaml_spring_rule-SpringActuatorFullyEnabled",
              "name": "codacy.tools-configs.yaml_spring_rule-SpringActuatorFullyEnabled",
              "properties": {
                "precision": "very-high",
                "security-severity": "Medium",
                "tags": [
                  "CWE-497",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A01:2021-Broken Access Control",
                  "OWASP-A3:2017-Sensitive Data Exposure",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Exposure of sensitive system information to an unauthorized control sphere"
              }
            }
          ],
          "semanticVersion": "1.131.0"
        }
      }
    }
  ],
  "version": "2.1.0"
}